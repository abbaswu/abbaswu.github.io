<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jifeng Wu&#39;s Personal Website</title>
  
  <subtitle>Jifeng Wu&#39;s Personal Website</subtitle>
  <link href="https://abbaswu.github.io/atom.xml" rel="self"/>
  
  <link href="https://abbaswu.github.io/"/>
  <updated>2023-10-18T22:38:09.743Z</updated>
  <id>https://abbaswu.github.io/</id>
  
  <author>
    <name>Jifeng Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nico Ritschel&#39;s Ph.D. Defense Summary</title>
    <link href="https://abbaswu.github.io/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/"/>
    <id>https://abbaswu.github.io/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/</id>
    <published>2023-10-13T07:00:00.000Z</published>
    <updated>2023-10-18T22:38:09.743Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cs.ubc.ca/~ritschel/">Nico Ritschel</a>‘s research focuses on refining block-based programming by integrating elements from visual programming to make it more accessible and effective for end-users, especially in the robotics domain.</p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><ul><li>Block-based programming is mainly used for computer science education. Can they target other tasks, such as end-user programming?</li><li>The challenge: end-users often need to write larger, real-world programs, contrasting with the simple toy examples students typically handle.</li><li>Traditional block-based programming struggles with scalability, especially in terms of readability.</li><li>While visual end-user programming tools like Excel and Simulink support bigger programs through domain-specific visual abstractions, creating new visual languages is difficult and costly.</li><li>Solution Approach: Merge design features from visual programming into block-based programming languages.</li></ul><h1 id="Target-Domain-Robotics"><a href="#Target-Domain-Robotics" class="headerlink" title="Target Domain: Robotics"></a>Target Domain: Robotics</h1><ol><li><strong>Current Scenario:</strong><ul><li>Professional tools exist, but they’re challenging to use.</li><li>There needs to be more effective block-based tools in the domain.</li></ul></li><li><strong>Robot Arms for Factory Floors:</strong><ul><li>Task: Coordinate and synchronize two robot arms.</li><li>Issues: Current block-based languages require complex solutions like nontrivial mutexes.</li><li><strong>Solution &amp; Studies:</strong><ul><li>Proposed two design ideas:<ol><li>Represent programs for each arm vertically and side-by-side. Synchronized actions appear as shared nodes between the arms.</li><li>A left-to-right flow resembling video editing.</li></ol></li><li>The ‘side-by-side’ design was selected.</li><li>A study found that end-users using this design outperformed those using a commercial, text-based tool.</li></ul></li></ul></li><li><strong>Mobile Robots for Warehouses &amp; Labs:</strong><ul><li>Task: Handle large tasks across multiple workstations.</li><li>Issues:<ul><li>Difficulty decomposing long programs and locating where to make changes.</li><li></li></ul></li><li><strong>Solutions &amp; Features:</strong><ul><li>Introduced block-based language that supports functional decomposition.</li><li>Provided two separate canvases: one for task composition&#x2F;movement and the other for low-level task definitions.</li><li>Included triggers as dataflow graphs to improve the visibility of nested expressions and enhance user freedom in structuring programs.</li></ul></li></ul></li></ol><h1 id="Questions-Addressed-During-the-Practice-Session"><a href="#Questions-Addressed-During-the-Practice-Session" class="headerlink" title="Questions Addressed During the Practice Session"></a>Questions Addressed During the Practice Session</h1><ol><li><strong>Why focus on the two robotics scenarios?</strong><ul><li>They are important and relevant in the robotics domain.</li><li>These scenarios present challenges for end-users learning to program.</li><li>They represent a complex form of programming that’s worth refining.</li></ul></li><li><strong>Would functional programming principles enhance end-user visual programming, given the imperative nature of block-based programming?</strong><ul><li>The inherent complexity in robotics means many elements can’t be simplified.</li><li>Introducing functional programming might not necessarily boost user productivity.</li></ul></li><li><strong>What was the environment for user studies?</strong><ul><li>Engaged actual end-users for genuine feedback.</li><li>Also recruited students from non-computer science departments for a broader perspective.</li></ul></li></ol><h1 id="Questions-Asked-During-the-Ph-D-Defense"><a href="#Questions-Asked-During-the-Ph-D-Defense" class="headerlink" title="Questions Asked During the Ph.D. Defense"></a>Questions Asked During the Ph.D. Defense</h1><ul><li>How were the visions and observations formulated?<ul><li>Separate users into traditional versus new environments and then compare.</li><li>Gain knowledge of their needs and patterns.</li><li>Test on a small pool of users to refine the design.</li></ul></li><li>How do you account for the spectrum of end-users regarding programming experience, domain-specific task time, and tool experience?</li><li>Which results were the most and least robust?</li><li>What factors made the tool easy to learn?<ul><li>The “blocks” concept is already well-known.</li><li>The tool matches the users’ previous domain-specific knowledge (e.g., separate columns for two arms).</li></ul></li><li>How realistic is the decomposition at scale? Any evidence from related work?<ul><li>More of a “lower bound,” limited by the time of the user study.</li></ul></li><li>Why was the comparison made between block-based methods and graph-based methods?<ul><li>Graph-based methods are already used in end-user programming, such as game programming.</li></ul></li><li>What is the importance and implication of the determined p-value?<ul><li>We have a null hypothesis - there is no difference between the performance of the two groups.</li></ul></li><li>What improvements (e.g., 5%) are worthwhile?</li><li>What are the advantages of block-based approaches over dataflow, and how can this be further investigated?<ul><li>Different aspects, e.g., reading vs writing</li><li>Different domains, e.g., robotics vs game</li><li>Different styles of programs</li><li>Different representations of graphs</li></ul></li><li>How are potential accessibility challenges addressed?<ul><li>Already addressed to a degree in the normal block-based domain.</li><li>Domain-specific challenges are directions for future work.</li></ul></li><li>How does the new tool compare with LLMs?<ul><li>Can work together.</li><li>Have advantages in evolution and understanding vs. writing something that would work the first time.<ul><li>Debugging.</li><li>Reliability.</li><li>No training required.</li></ul></li></ul></li><li>What follow-up studies are anticipated for real-world usage? How do you anticipate the tool’s usability in practical scenarios? Follow-up studies based on real-world usage in the wild may encounter unanticipated, really specific problems. Is your tool something someone wants to use in practice?</li><li>Would featuring a table of reactive values a la Excel be beneficial?</li><li>How do different domains within computer science influence the tool’s design and analysis? What interdisciplinary expertise would be beneficial?<ul><li>Information visualization.</li><li>Designing design drafts with an expert in visualization would be beneficial.</li></ul></li><li>What about your tool’s applicability to expert programmers instead of end users?<ul><li>Different design goals.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cs.ubc.ca/~ritschel/&quot;&gt;Nico Ritschel&lt;/a&gt;‘s research focuses on refining block-based programming by integrating elemen</summary>
      
    
    
    
    <category term="Meeting Minutes" scheme="https://abbaswu.github.io/categories/Meeting-Minutes/"/>
    
    
  </entry>
  
  <entry>
    <title>Conversation with Prof. Margo Seltzer</title>
    <link href="https://abbaswu.github.io/2023/10/10/Conversation-with-Prof-Margo-Seltzer/"/>
    <id>https://abbaswu.github.io/2023/10/10/Conversation-with-Prof-Margo-Seltzer/</id>
    <published>2023-10-10T07:00:00.000Z</published>
    <updated>2023-10-18T22:34:13.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia"><a href="#Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia" class="headerlink" title="Introduction to Prof. Margo Seltzer (quoted from Wikipedia)"></a>Introduction to Prof. Margo Seltzer (quoted from Wikipedia)</h1><p>“<strong>Margo Ilene Seltzer</strong> is a professor and researcher in computer systems. She is currently the Canada 150 Research Chair in Computer Systems and the Cheriton Family Chair in Computer Science at the <a href="https://en.wikipedia.org/wiki/University_of_British_Columbia" title="University of British Columbia">University of British Columbia</a>. Previously, Seltzer was the Herchel Smith Professor of Computer Science at Harvard University’s <a href="https://en.wikipedia.org/wiki/John_A._Paulson_School_of_Engineering_and_Applied_Sciences" title="John A. Paulson School of Engineering and Applied Sciences">John A. Paulson School of Engineering and Applied Sciences</a> and director at the <a href="https://en.wikipedia.org/wiki/Center_for_Research_on_Computation_and_Society" title="Center for Research on Computation and Society">Center for Research on Computation and Society</a>.”</p><h1 id="Question-How-did-you-conduct-research-across-a-variety-of-domains-from-operating-systems-to-machine-learning-systems"><a href="#Question-How-did-you-conduct-research-across-a-variety-of-domains-from-operating-systems-to-machine-learning-systems" class="headerlink" title="Question: How did you conduct research across a variety of domains, from operating systems to machine learning systems?"></a>Question: How did you conduct research across a variety of domains, from operating systems to machine learning systems?</h1><p>Prof. Seltzer: I’ve always been intellectually curious and I find almost all research problems fascinating. Engaging in discussions with diverse people has also fueled my passion. When I was a junior faculty member, I focused on tenure and focused on core systems research, but that was miserable. However, I still explored different areas.</p><p>My deep interest lies in software architecture, even though my Ph.D. was in storage. I was fortunate when another lab decided to support my research. This shift allowed me to progress from storage to core systems.</p><p>I also got interested into data provenance, especially realizing that we could do a lot more at the systems level.</p><p>Transitioning to machine learning was a natural progression, driven mainly by collaborations with graduate students and other partners.</p><h1 id="Question-Why-did-you-pursue-a-Ph-D-in-storage-if-you-were-more-interested-in-core-systems"><a href="#Question-Why-did-you-pursue-a-Ph-D-in-storage-if-you-were-more-interested-in-core-systems" class="headerlink" title="Question: Why did you pursue a Ph.D. in storage if you were more interested in core systems?"></a>Question: Why did you pursue a Ph.D. in storage if you were more interested in core systems?</h1><p>Prof. Seltzer: Before pursuing my Ph.D., I was primarily involved with databases. However, as I delved deeper, my curiosity veered towards system issues.</p><h1 id="Question-How-do-you-manage-evolving-interests-during-a-Ph-D"><a href="#Question-How-do-you-manage-evolving-interests-during-a-Ph-D" class="headerlink" title="Question: How do you manage evolving interests during a Ph.D.?"></a>Question: How do you manage evolving interests during a Ph.D.?</h1><p>Prof. Seltzer: It’s uncommon for Ph.D. students to plot a lifetime research agenda. Instead, it’s about producing one miracle per paper and developing the skills to do research for your whole life. The key is to focus on accomplishing your first piece of independent research during your Ph.D.</p><p>Choosing a supervisor you get along well with is most important. It’s essential to be involved in an interesting area and join a lab that aligns with your interests. However, a perfect match isn’t always necessary. Looking at co-supervised students can give insights into potential co-supervision opportunities.</p><p>As a Ph.D. student, your primary goal should be to define your research problem. Although you shouldn’t jump between entirely different areas, it’s crucial to select a project that genuinely interests you in the first year. Other interests can be pursued as side projects.</p><p>To maintain engagement, pick a broad domain that offers a plethora of projects you find captivating.</p><p>Before starting a Ph.D., actively seek out research papers that intrigue you and identify the labs behind them.</p><h1 id="Question-What’s-your-vision-for-the-future-of-Computer-Systems"><a href="#Question-What’s-your-vision-for-the-future-of-Computer-Systems" class="headerlink" title="Question: What’s your vision for the future of Computer Systems?"></a>Question: What’s your vision for the future of Computer Systems?</h1><p>Prof. Seltzer: A pressing concern is that people are not very good at writing software that works. We need to develop strategies to create software with minimal bugs from the ground up. Embracing modularity can be a solution, and the solution is about software architecture.</p><p>Researchers focus on verifying existing software products because the publication cycle is way too short. Moreover, we lack good metrics for evaluating software architecture, and there is no equivalent of a debugger for software architecture. Software architecture, in its current state, remains an art more than a well-defined discipline. Often, professionals in the field rely heavily on mentors, and they don’t see the growth of a new generation of software architects.</p><h1 id="Personal-Comments-and-Recommendations"><a href="#Personal-Comments-and-Recommendations" class="headerlink" title="Personal Comments and Recommendations:"></a>Personal Comments and Recommendations:</h1><p>I’m pleased to note your inspiration derived from challenges in the ‘Type Inference for Python’ project, including the importance of formalizations and specifications both for the design goal and for implementation, the tedious and fault-prone task of setting up an evaluation pipeline, etc.</p><p>Deep learning thrives in domains with a clear ground truth. In other scenarios, basic probabilistic methods might offer better results.</p><p>Your task of combining AST traversal with introspection of live objects reminds me of the work I did in “StarFlow: A Script-Centric Data Analysis Environment” and Arpan Gujarati’s tracing infrastructure efforts in Python.</p><p>Should you wish to delve deeper into software architecture for data science and machine learning, I recommend focusing on constructing intricate software like operating systems instead of shorter data wrangling scripts. Or you can explore the challenges in experimental frameworks. For insights on this, consider discussing with Joe Wonsil. Additionally, Philip Guo at UCSD has an intriguing Ph.D. thesis about tools for research programmers that might be of interest to you.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia&quot;&gt;&lt;a href=&quot;#Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia&quot; class=</summary>
      
    
    
    
    <category term="Meeting Minutes" scheme="https://abbaswu.github.io/categories/Meeting-Minutes/"/>
    
    
  </entry>
  
  <entry>
    <title>Pre-MICCAI Workshop@UBC Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/</id>
    <published>2023-10-08T07:00:00.000Z</published>
    <updated>2023-10-08T22:11:40.323Z</updated>
    
    <content type="html"><![CDATA[<p>From the <a href="https://sites.google.com/view/pre-miccai-ubc/home">Pre-MICCAI Workshop@UBC</a> website:</p><blockquote><p>The Pre-MICCAI Workshop is a dynamic and innovative platform that unites machine learning and medical computer vision. As a prelude to the prestigious MICCAI (Medical Image Computing and Computer-Assisted Intervention) conference, this workshop serves as a vital nexus where experts, researchers, and enthusiasts converge to explore cutting-edge advancements, exchange knowledge, and foster collaborative partnerships in the field of medical image analysis.</p></blockquote><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Pre-MICCAI-Workshop-UBC-Selfie.jpg" alt="Selfie"></p><h1 id="Shaoting-Zhang-Shanghai-AI-Lab-Keynote-Talk-2-Foundation-Models-in-Medicine-Generalist-vs-Specialist"><a href="#Shaoting-Zhang-Shanghai-AI-Lab-Keynote-Talk-2-Foundation-Models-in-Medicine-Generalist-vs-Specialist" class="headerlink" title="Shaoting Zhang (Shanghai AI Lab) - Keynote Talk 2 - Foundation Models in Medicine: Generalist vs Specialist"></a>Shaoting Zhang (Shanghai AI Lab) - Keynote Talk 2 - Foundation Models in Medicine: Generalist vs Specialist</h1><ul><li>Advantages of Large Models:<ul><li>Emergent abilities.</li><li>Long-tail problems (only a small amount of fine-tuning is required for downstream tasks and does not require a tremendous amount of data collection and labeling).</li><li>Model sharing strengthens data security.</li></ul></li><li>Shanghai AI Lab presents <a href="https://github.com/openmedlab">OpenMEDLab (open-source medical image and language foundation models)</a>.</li><li>Utilizing a single model with varied prompts for diverse tasks.</li><li>Large language model training encompasses:<ul><li>Self-supervised pre-training.</li><li>Instruction tuning.</li><li>RLHF.</li><li>Plugins for accessing updated information without retraining.</li></ul></li><li>Computer vision researchers lean towards generalist models due to the technical challenges.</li><li>Clinicians prefer specialist models to solve day-to-day work.</li></ul><p>Question: Will medical foundation models support more modalities in the future besides vision and language?</p><p>Answer:</p><ul><li>People will still focus on one modality for one model with high accuracy to address practical business demands.</li><li>Multiple models can be used on demand to handle multimodal data.</li></ul><h1 id="Briefings"><a href="#Briefings" class="headerlink" title="Briefings"></a>Briefings</h1><h2 id="Sana-Ayromlou-Continual-Class-Specific-Impression-for-Data-free-Class-Incremental-Learning"><a href="#Sana-Ayromlou-Continual-Class-Specific-Impression-for-Data-free-Class-Incremental-Learning" class="headerlink" title="Sana Ayromlou - Continual Class-Specific Impression for Data-free Class Incremental Learning"></a>Sana Ayromlou - Continual Class-Specific Impression for Data-free Class Incremental Learning</h2><ul><li>Focuses on training models over newly introduced classes, termed <a href="https://en.wikipedia.org/wiki/Incremental_learning">incremental learning</a>.</li><li>Challenges include the loss of old data, resulting in catastrophic forgetting.</li><li>Proposed Solution: Generate synthetic medical data from prior classes using <a href="https://arxiv.org/abs/2201.10787">model inversion</a> (extracting training data from the model) and employing <a href="https://arxiv.org/abs/2102.09517">cosine-normalized cross-entropy loss</a>.</li></ul><h2 id="Hooman-Vaseli-ProtoASNet"><a href="#Hooman-Vaseli-ProtoASNet" class="headerlink" title="Hooman Vaseli - ProtoASNet"></a>Hooman Vaseli - ProtoASNet</h2><ul><li>Emphasizes the importance of interpretability in AI solutions, especially in healthcare.</li><li>Core Technology: <a href="https://proceedings.neurips.cc/paper_files/paper/2017/hash/cb8da6767461f2812ae4290eac7cbc42-Abstract.html">Prototypical neural networks</a>, which “learn a metric space in which classification can be performed by computing distances to prototype representations of each class.”</li></ul><h1 id="Ruogu-Fang-University-of-Florida-Keynote-Talk-4-A-Tale-of-Two-Frontiers-When-Brain-Meets-AI"><a href="#Ruogu-Fang-University-of-Florida-Keynote-Talk-4-A-Tale-of-Two-Frontiers-When-Brain-Meets-AI" class="headerlink" title="Ruogu Fang (University of Florida) - Keynote Talk 4 - A Tale of Two Frontiers: When Brain Meets AI"></a>Ruogu Fang (University of Florida) - Keynote Talk 4 - A Tale of Two Frontiers: When Brain Meets AI</h1><p>Research Vision:</p><ul><li>Integrate domain knowledge over mere data-driven approaches.</li><li>Harness neuroscience principles for next-gen AI designs.</li><li>Leverage AI in testing neural science hypotheses and promoting brain health.</li></ul><p><a href="https://www.sciencedirect.com/science/article/pii/S1361841518307734">Deep Evolutionary Networks with Expedited Genetic Algorithms for Medical Image Denoising</a></p><ul><li>Auto feature extraction and hyperparameter search are major pain points in deep learning research (compared with traditional machine learning research) faced by deep learning researchers.</li><li>Fine gene transfer learning to optimize on a larger dataset - c.f. <a href="https://www.investopedia.com/financial-edge/0412/the-best-portfolio-balance.aspx">portfolio balance</a> in finance</li><li>Question: Is it possible to combine the genetic algorithm that maintains a gene pool of neural networks with ensemble learning?<ul><li>Answer: Different objective.</li></ul></li></ul><p><a href="https://www.biorxiv.org/content/10.1101/2023.04.16.537079v2.abstract">Emergence of Emotion Selectivity in A Deep Neural Network Trained to Recognize Visual Objects</a></p><ul><li>Simple, interpretable neural network architecture based on biology.</li><li>Representation similarity between the DNN model and brain amygdala.</li><li>$1M NSF funding.</li></ul><p><a href="https://www.nature.com/articles/s41598-020-80312-2">Modular machine learning for Alzheimer’s disease classification from retinal vasculature</a></p><ul><li>Retina data is easy to collect.</li><li>A lot of information (gender, body mass index) can be seen from the retina.</li><li>The results are interpretable.</li></ul><h1 id="Herve-Lombaert-ETS-Montreal-Keynote-Talk-3-Geometric-Deep-Learning-Examples-on-Brain-Surfaces"><a href="#Herve-Lombaert-ETS-Montreal-Keynote-Talk-3-Geometric-Deep-Learning-Examples-on-Brain-Surfaces" class="headerlink" title="Hervé Lombaert (ETS Montreal) - Keynote Talk 3 - Geometric Deep Learning - Examples on Brain Surfaces"></a>Hervé Lombaert (ETS Montreal) - Keynote Talk 3 - Geometric Deep Learning - Examples on Brain Surfaces</h1><p>Research directions:</p><ul><li>Geometry and Machine Learning.</li><li>Correspondences and variability existent in the brain.</li></ul><p>Motivation:</p><ul><li>Traditional algorithms frequently rely on an image grid (pixels). However, in neuroimaging, data is often on 3D surfaces. Two neighboring points may be neighbors but may lie very far away on such a surface.</li><li>How to learn on such surfaces? How do we transfer convolution and pooling on images to such surfaces?</li></ul><p>Solution:</p><ul><li>Represent surfaces as graphs.</li><li>Project problem into spectral space (<a href="https://en.wikipedia.org/wiki/Spectral_shape_analysis">spectral shape analysis</a>).<ul><li>An object’s vibration pattern is governed by shape - spectral space captures a unique intrinsic shape signature.</li><li>Extract spectral signature via spectral decomposition and exploit to find correspondences.</li><li>Enables transforming convolutions on surfaces to convolutions on spectral embeddings, enabling classical architectures on brain surfaces.</li></ul></li></ul><p>Ongoing work:</p><ul><li><a href="https://en.wikipedia.org/wiki/Active_learning_(machine_learning)">Active learning</a> to reduce annotation effort - focus on sample-level uncertainty and find the most uncertain images.<ul><li>Goals: Informative and diverse samples.</li><li>Works:<ul><li><a href="https://link.springer.com/chapter/10.1007/978-3-031-17027-0_5">TAAL: Test-time augmentation for active learning in medical image segmentation</a></li><li><a href="https://arxiv.org/abs/2301.07670">Active learning for medical image segmentation with stochastic batches</a></li></ul></li></ul></li></ul><h1 id="Ali-Bashashati-x2F-Ruogu-Fang-x2F-Shaoting-Zhang-x2F-Herve-Lombaer-x2F-Jun-Ma-Panel-Discussion"><a href="#Ali-Bashashati-x2F-Ruogu-Fang-x2F-Shaoting-Zhang-x2F-Herve-Lombaer-x2F-Jun-Ma-Panel-Discussion" class="headerlink" title="Ali Bashashati&#x2F;Ruogu Fang&#x2F;Shaoting Zhang&#x2F;Hervé Lombaer&#x2F;Jun Ma - Panel Discussion"></a>Ali Bashashati&#x2F;Ruogu Fang&#x2F;Shaoting Zhang&#x2F;Hervé Lombaer&#x2F;Jun Ma - Panel Discussion</h1><h2 id="The-influence-of-Large-Language-Models-is-growing-significantly-What-changes-do-you-think-LLMs-will-bring-about-in-medical-imaging-from-both-positive-and-negative-sides"><a href="#The-influence-of-Large-Language-Models-is-growing-significantly-What-changes-do-you-think-LLMs-will-bring-about-in-medical-imaging-from-both-positive-and-negative-sides" class="headerlink" title="The influence of Large Language Models is growing significantly. What changes do you think LLMs will bring about in medical imaging (from both positive and negative sides)?"></a>The influence of Large Language Models is growing significantly. What changes do you think LLMs will bring about in medical imaging (from both positive and negative sides)?</h2><ul><li>Language contributes to improved performance.</li><li>Still need a diversity of models to investigate different modalities and tasks.</li><li>Large language models help in day-to-day routine tasks. They are a copilot which facilitates the processing of huge amounts of information in pathology and brain research.</li><li>Reduces cost and boosts accessibility for patients.</li><li>Multimodal data integration.</li><li>LLMs face data privacy and trustworthiness.</li><li>When to use LLMs and when to use human abilities requires careful thinking.</li></ul><h2 id="What-other-recent-medical-image-analysis-advancements-excite-you-the-most"><a href="#What-other-recent-medical-image-analysis-advancements-excite-you-the-most" class="headerlink" title="What other recent medical image analysis advancements excite you the most?"></a>What other recent medical image analysis advancements excite you the most?</h2><ul><li>Classic problems like segmentations and how to capture geometry remain unsolved.</li><li>More comprehensive and dynamic brain-inspired, biologically-inspired AI.</li><li>Understanding the biology behind the data will help you design more applicable models. Those models can better make a difference</li><li>Prior knowledge is important in addition to big data. Foundational models will explore all non-synthetic data in the next few years; no new data will exist.</li><li>Montreal is a major hub for neuroscience and AI.</li></ul><h2 id="For-the-many-students-here-what-technical-skills-and-knowledge-should-the-next-generation-of-medical-image-analysis-researchers-prepare-for"><a href="#For-the-many-students-here-what-technical-skills-and-knowledge-should-the-next-generation-of-medical-image-analysis-researchers-prepare-for" class="headerlink" title="For the many students here, what technical skills and knowledge should the next generation of medical image analysis researchers prepare for?"></a>For the many students here, what technical skills and knowledge should the next generation of medical image analysis researchers prepare for?</h2><ul><li>Know the neglected basics, e.g., solid mathematical background and proficiency in programming</li><li>Understand the data</li><li>Ability to explain the results and ask the question of why and how</li><li>Visualization is very important for both exploratory data analysis and publishing</li><li>Learning from mistakes - find out why a model doesn’t work instead of throwing in different models</li><li>Ask yourself: Who will care about an increase in accuracy? Is it significant? Will it have tradeoffs in robustness, explainability, etc.?</li><li>Quickly take up new skills (mathematics, programming, etc.)</li><li>Research paradigms have changed in the foundation model era - how to leverage foundation models for your field to stand on the shoulders of giants?</li><li>Low-level implementation details such as preprocessing, multiprocessing in coding for large-scale data, model development, multi-node distributed training, efficient fine-tuning, and model deployment on constrained environments are also critical skills.</li><li>Work and have fun at the same time.</li><li>Perseverance in the face of failure is one of the most essential qualities for Ph.D. students.</li></ul><h2 id="Question-The-future-of-models-for-specific-tasks-e-g-segmentation-vs-end-to-end-models"><a href="#Question-The-future-of-models-for-specific-tasks-e-g-segmentation-vs-end-to-end-models" class="headerlink" title="Question: The future of models for specific tasks (e.g., segmentation) vs end-to-end models."></a>Question: The future of models for specific tasks (e.g., segmentation) vs end-to-end models.</h2><ul><li>New models for specific tasks make lovely reads.</li><li>Methodology will change, but specific tasks will stay there. However, improving specific tasks will gradually shift towards industry. Universities will focus on publishing the first paper in a domain, while industry will focus on publishing the last paper in a domain.</li><li>In the end, we care about helping patients.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;From the &lt;a href=&quot;https://sites.google.com/view/pre-miccai-ubc/home&quot;&gt;Pre-MICCAI Workshop@UBC&lt;/a&gt; website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Pre-MIC</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>Understanding the Name, Structure, and Loss Function of the Variational Autoencoder</title>
    <link href="https://abbaswu.github.io/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/"/>
    <id>https://abbaswu.github.io/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/</id>
    <published>2023-09-30T07:00:00.000Z</published>
    <updated>2023-10-04T05:14:56.718Z</updated>
    
    <content type="html"><![CDATA[<p>Despite the intuitive appeal of <a href="https://en.wikipedia.org/wiki/Variational_autoencoder">variational autoencoders (VAEs)</a>, their underlying principles can be elusive. After extensive research across papers and online resources, I will summarize the core insights behind the VAE’s name, structure, and loss function and try to explain <strong>how the mathematical formulas used to describe the VAE came into being from first principles</strong>, as opposed to simply providing interpretations for them.</p><h2 id="Basics-of-VAEs"><a href="#Basics-of-VAEs" class="headerlink" title="Basics of VAEs"></a>Basics of VAEs</h2><p>VAEs are probabilistic generative models, when trained on a dataset $X$, allow us to sample from a latent variable $Z$ and generate output resembling samples in $X$ through a trained neural network $f: Z \rightarrow X$.</p><p>This can be formulated as making the probability of generating $X &#x3D; x$ as close as possible to the actual $P(X &#x3D; x)$ (known quality) under the entire generative process.</p><h2 id="Ideal-Training-Goal"><a href="#Ideal-Training-Goal" class="headerlink" title="Ideal Training Goal"></a>Ideal Training Goal</h2><p>In the <strong>ideal situation</strong>, based on the <a href="https://en.wikipedia.org/wiki/Marginal_distribution">marginal distribution formula</a> we have $P(X &#x3D; x) &#x3D; \int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$. Thus, the training goal of variational autoencoders is to <strong>make the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as close to $P(X &#x3D; x)$ as possible</strong>.</p><h2 id="Latent-Variable-Distribution"><a href="#Latent-Variable-Distribution" class="headerlink" title="Latent Variable Distribution"></a>Latent Variable Distribution</h2><p>VAEs select a <strong>multivariate normal distribution</strong> for the latent variable $Z$ based on the principle that <a href="https://doi.org/10.1145/318242.318443">any distribution in $d$ dimensions can be generated by mapping normally distributed variables through a sufficiently complicated function</a>, which could be approximated using the neural network $f: Z \rightarrow X$ we train.</p><h2 id="Approximation-Challenge"><a href="#Approximation-Challenge" class="headerlink" title="Approximation Challenge"></a>Approximation Challenge</h2><p>Having reasonably decided $Z \sim N(0, I)$, we may calculate the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$. This is straightforward to approximate: we can randomly sample a large number of $Z$ values ${z_1, \dots, z_n}$, and approximate $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as $\sum_{j}^{n}{P(X &#x3D; x | Z &#x3D; z_j)}$.</p><p>However, for most $Z$ values, $P(X &#x3D; x | Z)$ will be nearly zero, contributing almost nothing to our calculation. This is especially the case in high dimensional spaces, for which an extremely large number of samples of $Z$ may be required.</p><p>To address the problem, we can attempt to <strong>sample values of $Z$ that are likely to have produced $X &#x3D; x$ and compute $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ just from those</strong>.</p><h2 id="The-“Variational”-Aspect"><a href="#The-“Variational”-Aspect" class="headerlink" title="The “Variational” Aspect:"></a>The “Variational” Aspect:</h2><p>To do so, we can <strong>fit another parametrized function</strong> $Q(Z | X &#x3D; x)$, which can give us a distribution over $Z$ values that are likely to produce $X &#x3D; x$ through $f: Z \rightarrow X$ given $X &#x3D; x$. This is an example of a <a href="https://en.wikipedia.org/wiki/Variational_Bayesian_methods">variational Bayesian method</a>, which involves finding an “optimal” function (a task known as <a href="https://en.wikipedia.org/wiki/Calculus_of_variations">variational calculus</a>) and is the source of the word “variational” in variational autoencoders.</p><h2 id="Minimizing-Divergence"><a href="#Minimizing-Divergence" class="headerlink" title="Minimizing Divergence"></a>Minimizing Divergence</h2><p>Theoretically, the values of $Z$ that are likely to have produced $X &#x3D; x$ follow the conditional distribution $P(Z | X &#x3D; x)$. <strong>Thus, our original goal of making the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as close to $P(X &#x3D; x)$ as possible can be transformed to minimizing the Kullback-Leibler divergence between $P(Z | X &#x3D; x)$ and<br>$Q(Z | X &#x3D; x)$</strong>:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x)) &#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z | X &#x3D; x)}} dz}$$</p><p>According to Bayes’ Law,</p><p>$$P(Z &#x3D; z | X &#x3D; x) &#x3D; \frac{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z)}{P(X &#x3D; x)}$$</p><p>Thus, we have:</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x) P(X &#x3D; x)}{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z)}} dz}$$</p><p>$$&#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) (\log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} + \log{P(X &#x3D; x)} - \log{P(X &#x3D; x | Z &#x3D; z)}) dz}$$</p><p>$$&#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} dz} + \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x)} dz} - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$</p><p>Note that:</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} dz} &#x3D; KL(Q(Z | X &#x3D; x) || P(Z))$$</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x)} dz} &#x3D; \log{P(X &#x3D; x)} \int{Q(Z &#x3D; z | X &#x3D; x)} dz &#x3D; \log{P(X &#x3D; x)}$$</p><p>Thus, we have:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x)) &#x3D; KL(Q(Z | X &#x3D; x) || P(Z)) + \log{P(X &#x3D; x)} - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$</p><p>As $\log{P(X &#x3D; x)}$ is constant, if we were to minimize $KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x))$, we should minimize:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z)) - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$ </p><p>To further transfer that into a calculatable function, we need to be more specific about the form that $Q(Z | X)$ will take. The usual choice is to say that $Q(Z | X &#x3D; x) &#x3D; N(Z | \mu(X &#x3D; x), \Sigma(X &#x3D; x))$, i.e., $Q(Z | X &#x3D; x)$ follows a Gaussian distribution where the mean and covariance matrix are calculated by <strong>parameterized functions (trained neural networks)</strong> given $X &#x3D; x$. In this case, <strong>fitting $Q(Z | X &#x3D; x)$ involves training these neural networks</strong>.</p><p>The advantages of this choice are computational, as $KL(Q(Z | X &#x3D; x) || P(Z)) + \log{P(X &#x3D; x)}$ is now <strong>a KL-divergence between two multivariate Gaussian distributions</strong>, which can be computed in <strong>closed form</strong>.</p><p>As for $\int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$, it depicts the expected log-likelihood of generating $X &#x3D; x$ as the VAE’s output through $f(Z)$ when sampling from $Q(Z &#x3D; z | X &#x3D; x)$ given $X &#x3D; x$. Thus, it can be treated as the “reconstruction loss” of the VAE, and different closed-form indices, such as mean square error, may be used as proxies of it depending on the project domain.</p><h2 id="Why-“Autoencoders”"><a href="#Why-“Autoencoders”" class="headerlink" title="Why “Autoencoders”?"></a>Why “Autoencoders”?</h2><p>Despite the mathematical basis of VAEs being quite different from classical autoencoders, they are named “autoencoders” due to their final training objective involving an encoder (the neural networks $\mu$ and $\Sigma$ determining mean and covariance) and a decoder (the neural network $f$), which resembles a traditional autoencoder in structure.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://arxiv.org/abs/1606.05908">https://arxiv.org/abs/1606.05908</a></li><li><a href="https://agustinus.kristia.de/techblog/2016/12/10/variational-autoencoder/">https://agustinus.kristia.de/techblog/2016/12/10/variational-autoencoder/</a></li><li><a href="https://arxiv.org/abs/1312.6114">https://arxiv.org/abs/1312.6114</a></li><li><a href="https://arxiv.org/abs/1907.08956">https://arxiv.org/abs/1907.08956</a></li><li></li><li><a href="https://stats.stackexchange.com/questions/485488/should-reconstruction-loss-be-computed-as-sum-or-average-over-input-for-variatio">https://stats.stackexchange.com/questions/485488/should-reconstruction-loss-be-computed-as-sum-or-average-over-input-for-variatio</a></li><li><a href="https://stats.stackexchange.com/questions/540092/how-do-we-get-to-the-mse-in-the-loss-function-for-a-variational-autoencoder">https://stats.stackexchange.com/questions/540092/how-do-we-get-to-the-mse-in-the-loss-function-for-a-variational-autoencoder</a></li><li><a href="https://stats.stackexchange.com/questions/464875/mean-square-error-as-reconstruction-loss-in-vae">https://stats.stackexchange.com/questions/464875/mean-square-error-as-reconstruction-loss-in-vae</a></li><li><a href="https://stats.stackexchange.com/questions/323568/help-understanding-reconstruction-loss-in-variational-autoencoder">https://stats.stackexchange.com/questions/323568/help-understanding-reconstruction-loss-in-variational-autoencoder</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Despite the intuitive appeal of &lt;a href=&quot;https://en.wikipedia.org/wiki/Variational_autoencoder&quot;&gt;variational autoencoders (VAEs)&lt;/a&gt;, thei</summary>
      
    
    
    
    <category term="Mathematics" scheme="https://abbaswu.github.io/categories/Mathematics/"/>
    
    
  </entry>
  
  <entry>
    <title>My Software Engineering Philosophy</title>
    <link href="https://abbaswu.github.io/2023/09/24/My-Software-Engineering-Philosophy/"/>
    <id>https://abbaswu.github.io/2023/09/24/My-Software-Engineering-Philosophy/</id>
    <published>2023-09-24T07:00:00.000Z</published>
    <updated>2023-09-24T19:18:57.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If you deprive yourself of outsourcing and your competitors do not, you’re putting yourself out of business.<br>Lee Kuan Yew</p></blockquote><ul><li>Do the high-level, high-value <a href="https://en.wikipedia.org/wiki/Requirements_engineering"><strong>requirements</strong></a>, <a href="https://en.wikipedia.org/wiki/Requirements_analysis"><strong>analysis</strong></a>, and <a href="https://en.wikipedia.org/wiki/Software_design"><strong>design</strong></a> work in an <em>incremental</em> fashion while not sacrificing <em>rigor</em>.</li><li>Maximize the utilization of <em>tools</em> that make coding, testing, and operations as <em>cheap, trivial, straightforward, and error-free</em> as possible, minimizing <em>technical debt</em>, including:<ul><li>Generative AI tools like ChatGPT.</li><li>Functional Programming.</li></ul></li><li>A critique on both <a href="https://en.wikipedia.org/wiki/Waterfall_model">the waterfall model</a> and <a href="https://en.wikipedia.org/wiki/Agile_software_development">the agile model</a>.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;If you deprive yourself of outsourcing and your competitors do not, you’re putting yourself out of business.&lt;br&gt;Lee Kuan Yew</summary>
      
    
    
    
    <category term="Reflections" scheme="https://abbaswu.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>The Cornell, Maryland, Max Planck Pre-doctoral Research School 2023 Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/</id>
    <published>2023-09-08T07:00:00.000Z</published>
    <updated>2023-10-08T22:18:46.953Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023.jpeg" alt="Group Photo"></p><h2 id="Panel-Session-2-“Research-in-industry-vs-academia”"><a href="#Panel-Session-2-“Research-in-industry-vs-academia”" class="headerlink" title="Panel Session 2: “Research in industry vs. academia”"></a>Panel Session 2: “Research in industry vs. academia”</h2><h3 id="Problem-Focus-amp-Recognition"><a href="#Problem-Focus-amp-Recognition" class="headerlink" title="Problem Focus &amp; Recognition"></a>Problem Focus &amp; Recognition</h3><ul><li>Industry tends to focus on concrete problems.</li><li>In academia, broader issues are often addressed.</li><li>Authorship and credit in academia is complex. It’s not a zero-sum game. It’s not just about who is first or second author; giving credit to students doesn’t mean professors won’t get any.</li></ul><h3 id="Publication-amp-Quality"><a href="#Publication-amp-Quality" class="headerlink" title="Publication &amp; Quality"></a>Publication &amp; Quality</h3><ul><li>The emphasis is on publishing fewer papers but ensuring they are of high quality. It’s not about the quantity but the impact and quality of the papers.</li><li>The first, last, or best paper on a topic are the most influential.</li></ul><h3 id="Career-Path"><a href="#Career-Path" class="headerlink" title="Career Path"></a>Career Path</h3><ul><li>Before securing a tenure professor position, many go through multiple postdocs and even stints as industrial research scientists.</li><li>Only about 10-20% of PhDs eventually become faculty.</li><li>Some research scientists find academic-like environments within the right industry groups.</li></ul><h3 id="Factors-Differentiating-Academia-and-Industry"><a href="#Factors-Differentiating-Academia-and-Industry" class="headerlink" title="Factors Differentiating Academia and Industry:"></a>Factors Differentiating Academia and Industry:</h3><ul><li>Industrial research must eventually have some commercial value.</li><li>In academia, there are constraints like obtaining funding, student recruitment, and equipment acquisition.</li><li>Academics have better job security and can rebound from mistakes.</li><li>Industry doesn’t need to chase grants or funding in the same way academia does.</li></ul><h3 id="Skills-amp-Transitions"><a href="#Skills-amp-Transitions" class="headerlink" title="Skills &amp; Transitions"></a>Skills &amp; Transitions</h3><ul><li>Transferring skills between departments or companies is straightforward.</li><li>Transitioning between academia and industry is often a one-way street. It’s challenging to return to academia from industry unless one maintains a consistent publishing record and works on research-valued projects.</li></ul><h3 id="Geographical-and-Topic-Mobility"><a href="#Geographical-and-Topic-Mobility" class="headerlink" title="Geographical and Topic Mobility"></a>Geographical and Topic Mobility</h3><p>Researchers are encouraged to be flexible, moving across countries and topics.  </p><h3 id="Work-Life-Balance"><a href="#Work-Life-Balance" class="headerlink" title="Work-Life Balance"></a>Work-Life Balance</h3><ul><li>Systems vary across locations.</li><li>Enforce personal boundaries and learn to say no.</li><li>A balance doesn’t mean absence of stress. In the industry, even if the work-life balance is okay, stress may arise from working on undesired projects or facing peer pressure.</li><li>Find people who become friends with you.</li></ul><h3 id="Two-Body-Problem"><a href="#Two-Body-Problem" class="headerlink" title="Two-Body Problem"></a>Two-Body Problem</h3><p>It’s more of an issue in academia than in industry since it’s easier to change companies than academic institutions.</p><h3 id="Personality-and-Approach"><a href="#Personality-and-Approach" class="headerlink" title="Personality and Approach"></a>Personality and Approach</h3><ul><li>Industry caters to hackers and those interested in tooling.</li><li>Academics focus on research and higher purposes and see coding as a tool. Effective communication, including selling your idea in proposals and talks, is vital.</li></ul><h3 id="Startups-vs-PhD-Journey"><a href="#Startups-vs-PhD-Journey" class="headerlink" title="Startups vs. PhD Journey"></a>Startups vs. PhD Journey</h3><ul><li>Both require a significant commitment, typically around 6-8 years to IPO.</li><li>Startups demand full devotion, often with little to no work-life balance.</li></ul><h3 id="Funding-amp-Tenure"><a href="#Funding-amp-Tenure" class="headerlink" title="Funding &amp; Tenure"></a>Funding &amp; Tenure</h3><ul><li>If a grant from a company fails, there will be no direct legal consequences, but the likelihood of getting another might be reduced.</li><li>Tenure provides a basic salary and job security, but researchers still need to raise funds for their research.</li><li>Doing a job aligned research can be beneficial for dissertation and future career opportunities.</li></ul><h2 id="Laxman-Dhulipala-2nd-Lecture"><a href="#Laxman-Dhulipala-2nd-Lecture" class="headerlink" title="Laxman Dhulipala (2nd Lecture)"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Laxman Dhulipala (2nd Lecture)</a></h2><ul><li>Graphs are ubiquitous structures. Implementing high-performance graph algorithms speeds up scientific discovery.</li><li>I don’t work on dense graphs. Real-world graphs are sparse, and I haven’t seen a dense graph in practice in 10 years.</li><li>I focus on shared-memory algorithms and don’t recommend programming supercomputers until you have to.</li><li>Recommended reading: <a href="https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-mcsherry.pdf"><strong>Scalability! But at what COST?</strong></a></li><li>Should batch updates to dynamic graphs<ul><li>More parallelism</li><li>Reduces the cost of each update</li></ul></li><li>Representing adjacency information using purely functional trees are safe for concurrency.</li></ul><h2 id="Guest-Lecture-Yiting-Xia"><a href="#Guest-Lecture-Yiting-Xia" class="headerlink" title="Guest Lecture: Yiting Xia"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Guest Lecture: Yiting Xia</a></h2><ul><li>There are different available connections at different time slices.</li><li>Precomputing routes and handling link failure is still work in progress.</li></ul><h2 id="Group-Mentoring-Session"><a href="#Group-Mentoring-Session" class="headerlink" title="Group-Mentoring Session"></a>Group-Mentoring Session</h2><h3 id="Peter-Druschel-and-Bobby-Bhattacharjee"><a href="#Peter-Druschel-and-Bobby-Bhattacharjee" class="headerlink" title="Peter Druschel and Bobby Bhattacharjee"></a><a href="https://people.mpi-sws.org/~druschel/">Peter Druschel</a> and <a href="https://www.cs.umd.edu/people/bobby">Bobby Bhattacharjee</a></h3><h4 id="Key-Skills-and-Knowledge"><a href="#Key-Skills-and-Knowledge" class="headerlink" title="Key Skills and Knowledge"></a>Key Skills and Knowledge</h4><ul><li>Emphasized the importance of academic aptitude and the ability to work in unstructured environments.</li></ul><h4 id="Problem-solving-Approach"><a href="#Problem-solving-Approach" class="headerlink" title="Problem-solving Approach"></a>Problem-solving Approach</h4><ul><li>Seek problems that are significant, solvable, and align with your skill set.</li><li>Recognize that one may not always approach the right problem from the best angle.</li><li>Handling setbacks is crucial. Time spent on tackling a problem is never lost.</li><li>Resilience, dedication, and discipline are essential traits for success.</li><li>Read many things that are loosely related to solve a problem, as they might offer insights.</li></ul><h4 id="Application-Strategy"><a href="#Application-Strategy" class="headerlink" title="Application Strategy"></a>Application Strategy</h4><ul><li>Apply to a minimum of 5-10 institutions.</li><li>Do the homework for providing a strong application, especially given low acceptance rates, like 10%.</li></ul><h4 id="Interests-and-Graduate-Programs"><a href="#Interests-and-Graduate-Programs" class="headerlink" title="Interests and Graduate Programs"></a>Interests and Graduate Programs</h4><ul><li>Have a broad range of interests when considering a graduate program.</li><li>Opt for programs that offer a wide variety of choices.</li><li>Expressing diverse interests in applications can improve acceptance chances.</li><li>It’s advisable not to close one’s doors apriori.</li></ul><h4 id="Monitoring-Progress-in-Grad-Programs"><a href="#Monitoring-Progress-in-Grad-Programs" class="headerlink" title="Monitoring Progress in Grad Programs"></a>Monitoring Progress in Grad Programs</h4><ul><li>A competent group advisor is crucial, as they will guide and look out for students challenges like selecting an excessively challenging problem, lacking motivation, or poor time management.</li><li>Set achievable milestones that lead to publications, helping to build a solid publication record.</li></ul><h3 id="Mariya-Toneva"><a href="#Mariya-Toneva" class="headerlink" title="Mariya Toneva"></a><a href="https://mtoneva.com/">Mariya Toneva</a></h3><h4 id="Changing-Discipline-during-Ph-D"><a href="#Changing-Discipline-during-Ph-D" class="headerlink" title="Changing Discipline during Ph.D."></a>Changing Discipline during Ph.D.</h4><ul><li>Evaluate if the institution has the necessary resources to support this transition.</li></ul><h4 id="Traits-of-an-Ideal-Ph-D-Student"><a href="#Traits-of-an-Ideal-Ph-D-Student" class="headerlink" title="Traits of an Ideal Ph.D. Student"></a>Traits of an Ideal Ph.D. Student</h4><ul><li>Effective communication skills.</li><li>Strong critical thinking abilities.</li><li>A robust computational background.</li><li>Prior research experience.</li></ul><h4 id="Linguistics"><a href="#Linguistics" class="headerlink" title="Linguistics"></a>Linguistics</h4><ul><li>Noted a resurgence in the domain of linguistics as opposed to pure data-driven techniques.</li></ul><h4 id="MPI-SWS"><a href="#MPI-SWS" class="headerlink" title="MPI-SWS"></a>MPI-SWS</h4><ul><li>MPI-SWS is highly recommended for programming languages, especially when collaborating with diverse groups of people.</li></ul><h4 id="Diving-into-NLP-Natural-Language-Processing-Hop-On-Now"><a href="#Diving-into-NLP-Natural-Language-Processing-Hop-On-Now" class="headerlink" title="Diving into NLP (Natural Language Processing) - Hop On Now?"></a>Diving into NLP (Natural Language Processing) - Hop On Now?</h4><ul><li>When considering venturing into NLP, focus on:<ul><li>Experts who have a distinct vision in a less-saturated niche.</li><li>Those with substantial experience in related fields, such as the intersection of NLP and robotics.</li></ul></li></ul><h4 id="Distinguishing-Yourself-in-Applications"><a href="#Distinguishing-Yourself-in-Applications" class="headerlink" title="Distinguishing Yourself in Applications"></a>Distinguishing Yourself in Applications</h4><ul><li>To stand out:<ul><li>Foster qualities like initiative, drive, and ambition.</li><li>Accumulate experiences that align with and support your academic and research interests.</li><li>Obtain references that can vouch for your character and work ethic.</li></ul></li><li>It’s also essential to explore and consider multiple options or paths.</li></ul><h3 id="Lorenzo-Alvisi"><a href="#Lorenzo-Alvisi" class="headerlink" title="Lorenzo Alvisi"></a><a href="https://www.engineering.cornell.edu/faculty-directory/lorenzo-alvisi">Lorenzo Alvisi</a></h3><h4 id="Cultivating-an-Academic-Sense"><a href="#Cultivating-an-Academic-Sense" class="headerlink" title="Cultivating an Academic Sense"></a>Cultivating an Academic Sense</h4><ul><li>To nurture an academic mindset, one should assess how an individual performs when faced with a problem.</li><li>He mentioned the “Dijkstra club” at UT Austin as an example.</li><li>Emphasized the significance of “beautiful work” and that it’s crucial for individuals to produce work of beauty and quality.</li><li>Observing and learning from the endeavors of others is beneficial.</li></ul><h4 id="Life’s-Blueprint"><a href="#Life’s-Blueprint" class="headerlink" title="Life’s Blueprint"></a>Life’s Blueprint</h4><ul><li>Life does not come with a set map but rather a compass for direction.</li><li>Professor Alvisi never limited his imagination about his capabilities.</li><li>Guiding principles in life:<ul><li>Seeking personal happiness.</li><li>Maintaining healthy relationships.</li><li>Pursuing a fulfilling job that combines happiness with challenges.</li></ul></li><li>Acceptance of uncertain outcomes: One might not always know if they will succeed or fail.</li><li>The importance of personal growth: Find joy in self-improvement.</li><li>Shared personal experience of pursuing two Ph.D. degrees, the first of which was at an institution he didn’t particularly favor. Highlighted that struggles are often hidden from view.</li></ul><h4 id="Career-Perspectives"><a href="#Career-Perspectives" class="headerlink" title="Career Perspectives"></a>Career Perspectives</h4><ul><li>One’s career doesn’t necessarily peak at a fixed point; there’s always potential for growth, including entering academia.</li><li>Career choices are not always black and white; it depends on personal preferences and aspirations, such as seeking excellent opportunities close to home.</li><li>Consider the duration of your investments in particular career choices. Not every commitment needs to be long-term.</li></ul><h4 id="Balancing-Hobbies-and-Work"><a href="#Balancing-Hobbies-and-Work" class="headerlink" title="Balancing Hobbies and Work"></a>Balancing Hobbies and Work</h4><ul><li>Prof. Alvisi shared advice from his mentor’s mentor about integrating hobbies into professional life.</li><li>While he had diverse interests, he made sacrifices to focus on computer science due to his intellectual capacities. Some hobbies were too time-consuming.</li><li>Emphasized the importance of hobbies as they provide a necessary balance and maintain mental well-being.</li></ul><h4 id="Addressing-the-Two-Body-Problem"><a href="#Addressing-the-Two-Body-Problem" class="headerlink" title="Addressing the Two-Body Problem"></a>Addressing the Two-Body Problem</h4><ul><li>Universities recognize the challenge when both partners in a relationship are professionals.</li><li>If partners excel in different domains, there’s potential for both to be hired with attractive incentives.</li><li>Solutions include proactive planning, alternating priorities between partners over the years, and considering remote work opportunities.</li></ul><h4 id="Other-Insights"><a href="#Other-Insights" class="headerlink" title="Other Insights"></a>Other Insights</h4><ul><li>Mentioned the Sloan Fellowship as a notable achievement before tenure.</li><li>Advised young professionals to delay specialization as long as possible. Explore various options.</li><li>Encouraged students to seek advice from multiple professors to gain a diverse range of opinions and insights.</li></ul><h2 id="Tapomayukh-Bhattacharjee-2nd-Lecture"><a href="#Tapomayukh-Bhattacharjee-2nd-Lecture" class="headerlink" title="Tapomayukh Bhattacharjee (2nd Lecture)"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Tapomayukh Bhattacharjee (2nd Lecture)</a></h2><ul><li>There are six activities of daily living (ADLs) defined in literature: personal hygiene or grooming, dressing, toileting, transferring or ambulating, and eating</li><li>Anomaly detection is used in processing sensor data.</li><li>A* is widely used in motion planning due to its efficiency and optimality (it never overestimates the cost).</li><li>Motion planning time &#x3D; search time + collision checking time (~90%). Therefore, the author proposed lazy A* (which finds an optimal path in an unconstrained situation, goes over collision checking while on the path, and re-searches a path if a collision is encountered).</li><li>Collect a dataset before embarking on research.</li><li>To understand how to manipulate different kinds of foods, the author created a <em>food manipulation taxonomy</em>.</li><li>Choose hardware components for real-world deployability.</li><li>Use deformation of points on a gel coupled with computer vision algorithms to measure shear force</li><li>Add <em>structure</em> to machine learning algorithms to overcome a lack of data.</li><li>If integrating multimodal data sources, think of <em>where</em> to integrate as the size or magnitude of different data may be inconsistent.</li><li>A “bandit” algorithm is an RL algorithm where we utilize <em>partial feedback</em> of <em>one step</em> in the decision-making process, unlike conventional RL algorithms with “episodes” spanning multiple steps.</li></ul><h3 id="Audience-question-How-to-stay-up-to-date-with-the-state-of-the-art-especially-in-the-fast-changing-landscape-of-machine-learning"><a href="#Audience-question-How-to-stay-up-to-date-with-the-state-of-the-art-especially-in-the-fast-changing-landscape-of-machine-learning" class="headerlink" title="Audience question: How to stay up-to-date with the state-of-the-art (especially in the fast-changing landscape of machine learning)?"></a>Audience question: How to stay up-to-date with the state-of-the-art (especially in the fast-changing landscape of machine learning)?</h3><ul><li>One of the main tasks of faculty life</li><li>Look at titles and abstracts of publications in all well-known conferences.</li><li>Organize reading groups and reading sessions.</li><li>Interact with known other research groups.</li></ul><h2 id="Derek-Dreyer-How-to-write-papers-and-give-talks-that-people-can-follow"><a href="#Derek-Dreyer-How-to-write-papers-and-give-talks-that-people-can-follow" class="headerlink" title="Derek Dreyer: How to write papers and give talks that people can follow"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Derek Dreyer: How to write papers and give talks that people can follow</a></h2><ul><li><p>Many papers suffer from the TMI (too much information) problem.</p></li><li><p>Aim at giving <em>constructive principles</em> that are easy to check and fix.</p></li><li><p>A paper is different from a textbook - people <em>aren’t as committed to reading a paper as they are to reading a textbook</em>.</p></li><li><p>A <em>good but not interesting</em> paper tends to get a “B” or a “weak accept.”</p></li><li><p>Putting the Related Work section at the front (as opposed to in the back before the Conclusion) may hinder unfamiliar authors from understanding your work.</p></li><li><p>Most people <em>don’t listen to talks to determine whether they should read a paper</em>. Instead, they listen to talks to discuss with others. The main goal of a talk is to <em>give people positive feelings about your work</em>.</p></li><li><p>A talk should only cover the <em>intro</em> and <em>key ideas</em> sections of the corresponding paper.</p></li><li><p>The <em>key ideas</em> should be the high point in your talk before presenting the takeaway messages.</p></li><li><p>Add visual elements to emphasize <em>one point</em> per slide.</p></li><li><p>Use smooth animations to help the listener follow.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-S</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>From the Fourier Series to the Fourier Transform to the Discrete-time Fourier Transform: Demystifying the Formulas</title>
    <link href="https://abbaswu.github.io/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/"/>
    <id>https://abbaswu.github.io/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/</id>
    <published>2023-09-04T07:00:00.000Z</published>
    <updated>2023-09-05T04:27:53.736Z</updated>
    
    <content type="html"><![CDATA[<p>In realms as broad as electrical engineering, acoustics, optics, signal processing, quantum mechanics, and econometrics, the Fourier Series, Fourier Transform, and Discrete-time Fourier Transform play a pivotal role in analyzing signals by allowing us to decompose them into simpler components. Many articles present their formulas or dive into their intuition and applications. However, what seems to be missing is a blog post that explains the derivation of their formulas in a way that is both clear and accessible, requiring no more than a rudimentary understanding of calculus.</p><h1 id="Fourier-Series"><a href="#Fourier-Series" class="headerlink" title="Fourier Series"></a>Fourier Series</h1><h2 id="Standard-Form-of-the-Fourier-Series"><a href="#Standard-Form-of-the-Fourier-Series" class="headerlink" title="Standard Form of the Fourier Series"></a>Standard Form of the Fourier Series</h2><p>Our journey begins with the <a href="https://en.wikipedia.org/wiki/Fourier_series">Fourier Series</a> - a method to represent periodic functions as a sum of sine and cosine waves.</p><p>Let $x(t)$ be a periodic function with period $T$. The <em>standard form of the Fourier series</em> for $x(t)$ is given by:</p><p>$$x(t) &#x3D; \frac{a_0}{2} + a_1 \cos{\frac{2\pi}{T} t} + b_1 \sin{\frac{2\pi}{T} t} + a_2 \cos{\frac{4\pi}{T} t} + b_2 \sin{\frac{4\pi}{T} t} + \dots $$</p><p>To solve for $a_0, a_1, b_1, \dots$, we first observe the .</p><p>Thus, we can multiply both sides of the equation by $cos{\frac{2k\pi}{T} t}$ or $\sin{\frac{2k\pi}{T} t}$ $(k \in {0, 1, 2, \dots, n})$, and then integrate over one period $[-\frac{T}{2}, \frac{T}{2})$ to obtain:</p><p>$$a_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \cos{\frac{2k\pi}{T} t} dt}$$</p><p>$$b_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \sin{\frac{2k\pi}{T} t} dt}$$</p><h2 id="Exponential-Form-of-the-Fourier-Series"><a href="#Exponential-Form-of-the-Fourier-Series" class="headerlink" title="Exponential Form of the Fourier Series"></a>Exponential Form of the Fourier Series</h2><p>Using Euler’s formula $e^{ix} &#x3D; \cos{x} + i \sin{x}$, we can derive:</p><p>$$\cos{x} &#x3D; \frac{e^{ix} + e^{-ix}}{2}$$</p><p>$$\sin{x} &#x3D; -i \frac{e^{ix} - e^{-ix}}{2}$$</p><p>Substituting these representations of $\cos{x}$ and $\sin{x}$ into $a_k$ and $b_k$, we get:</p><p>$$a_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \frac{e^{i \frac{2k\pi}{T} t} + e^{-i \frac{2k\pi}{T} t}}{2} dt}$$</p><p>$$b_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{-i x(t) \frac{e^{i \frac{2k\pi}{T} t} - e^{-i \frac{2k\pi}{T} t}}{2} dt}$$</p><p>And:</p><p>$$a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t} &#x3D; a_k \frac{e^{i \frac{2k\pi}{T} t} + e^{-i \frac{2k\pi}{T} t}}{2} - i b_k \frac{e^{i \frac{2k\pi}{T} t} - e^{-i \frac{2k\pi}{T} t}}{2} &#x3D; \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t} + \frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}$$</p><p>And:</p><p>$$\frac{a_k - i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>$$\frac{a_k + i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t} dt}$$</p><p>Furthermore, if we let:</p><p>$$c_k &#x3D; \frac{a_k - i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>Substituting $k \leftarrow -k$ into the expression for $c_k$, we will obtain:</p><p>$$c_{-k} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t} dt} &#x3D; \frac{a_k + i b_k}{2}$$</p><p>Thus:</p><p>$$a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t}  &#x3D; \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t} + \frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}<br>&#x3D; c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i \frac{2k\pi}{T} t}$$</p><p>And by substituting $k \leftarrow 0$ into the expression for $c_k$, we get:</p><p>$$c_0 &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) dt} &#x3D; \frac{a_0}{2}$$</p><p>Therefore:</p><p>$$x(t) &#x3D; \frac{a_0}{2} + \sum_{k&#x3D;1}^{n}{(a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t})}  &#x3D; c_0 + \sum_{k&#x3D;1}^{n}{(c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i \frac{2k\pi}{T} t})} &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i \frac{2k\pi}{T} t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>This is the <em>exponential form of the Fourier series</em>. It is more concise than the standard form of the Fourier series and is used more often in practice.</p><h1 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h1><p>The Fourier transform is a generalization of the Fourier series, which can analyze the effect of a frequency in <em>any function</em> (which may not necessarily be a periodic function). In this section, we will present how it can be derived from the exponential form of the Fourier series.</p><p>Given a periodic function $x(t)$ with period $T$, the exponential form of the Fourier series of $x(t)$ is as follows:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i \frac{2k\pi}{T} t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>Let’s say that the period $T$ is associated with a frequency known as the <a href="https://en.wikipedia.org/wiki/Fundamental_frequency"><em>fundamental frequency</em></a> $f_0 &#x3D; \frac{1}{T}$. Given $f_0$, we can rewrite the previous Fourier series as:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i 2\pi k f_0 t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i 2\pi k f_0 t} dt}$$</p><p>For a non-periodic function, we can consider it as a periodic function with $T \rightarrow +\infty$. In this case, the fundamental frequency $f_0$ is an infinitesimal quantity; therefore, <em>we can consider that any frequency $f$ can be expressed as an integer multiple of the fundamental frequency, and the difference between two neighboring frequencies is the fundamental frequency $f_0$</em>. In this case, the fundamental frequency $f_0$ can be expressed as a differential of the frequency $f$, i.e., $df$.</p><p>In this case, for a possibly non-periodic function $x(t)$:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-\infty}^{\infty}{c_k e^{i 2\pi k (df)t}}$$</p><p>$$c_k&#x3D; (df) \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi k (df) t} dt}$$</p><p>Thus, $x(t)$ can be represented as:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-\infty}^{\infty}{[(df) \cdot \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi k (df) t} dt} \cdot e^{i 2\pi k (df) t}]}$$</p><p>By considering $f \leftarrow k (df)$, <a href="https://maninbocss.medium.com/summation-and-the-definite-integral-235663ef5ec3">we can transform the summation into a definite integral</a>:</p><p>$$x(t)&#x3D; \int_{-\infty}^{\infty}{ [(\int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}) e^{i 2\pi f t}] df}$$</p><p>Let:</p><p>$$X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}$$</p><p>Then $x(t)$ can be represented as:</p><p>$$x(t) &#x3D; \int_{-\infty}^{\infty}{ X(f) e^{i 2\pi f t} df}$$</p><p>These two equations are very important.</p><ul><li>If we know $x(t)$ (i.e., the value of $x(t)$ at any time $t$), through $X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}$, we can compute <em>the relative magnitude of any frequency $f$ over the whole time period</em>.</li><li>At the same time, if we know $X(f)$ (i.e., the relative magnitude of any frequency $f$ over the whole time period), by means of $x(t) &#x3D; \int_{-\infty}^{\infty}{ X(f) e^{i 2\pi f t} df}$, we can calculate <em>the value of $x(t)$ at any time $t$</em>.</li></ul><p>We refer to $X(f)$ as the <em>Fourier transform</em> of $x(t)$, also known as the <em>spectrum</em> of $x(t)$, and to $x(t)$ as the <em>inverse Fourier transform</em> of $X(f)$.</p><h1 id="Discrete-time-Fourier-Transform"><a href="#Discrete-time-Fourier-Transform" class="headerlink" title="Discrete-time Fourier Transform"></a>Discrete-time Fourier Transform</h1><p>When we process signals with computers, as computers cannot store a continuous infinite function, we usually take $N$ samples of the original signal $x(t)$ at a certain time interval $\Delta t$, obtaining an array $x[0:N-1]$.</p><p>Using $x[0:N-1]$ to estimate the Fourier transform $X(f)$ of the sampled function $x(t)$, we get:</p><p>$$X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt} \approx \int_{0}^{N \Delta t}{x(t) e^{-i 2\pi f t} dt} \approx \sum_{m&#x3D;0}^{N - 1}{x(m \Delta t) e^{-i 2\pi f m \Delta t}}$$</p><p>If we <em>assume these samples have spanned a period of the original signal, e.g. $T &#x3D; N \Delta t$, and that we only consider frequencies satisfying $f &#x3D; k \frac{1}{N \Delta t} (k \in {0, 1, \dots, N - 1})$</em>, we get:</p><p>$$X(k \frac{1}{N \Delta t}) \approx \sum_{n&#x3D;0}^{N - 1}{x(n \Delta t) e^{-i 2\pi k \frac{1}{N \Delta t} n \Delta t}} &#x3D; \sum_{n&#x3D;0}^{N - 1}{x(n \Delta t) e^{-i 2\pi \frac{k}{N} n}} &#x3D; \sum_{n&#x3D;0}^{N - 1}{x[n] e^{-i 2\pi \frac{k}{N} n}}$$</p><p>Let:</p><p>$$X[k] &#x3D; \sum_{n&#x3D;0}^{N - 1}{x[n] e^{-i 2\pi \frac{k}{N} n}} (k \in {0, 1, \dots, N - 1})$$</p><p>We call such an array of $N$ discrete numbers $X[0:N-1]$ the <em>discrete-time Fourier transform</em> of $x[0:N-1]$, which is a <em>discrete</em> frequency domain representation of $x[0:N-1]$.</p><p>Using $X[0:N-1]$, we can restore $x[0:N-1]$:</p><p>$$x[n] &#x3D; \frac{1}{N} \sum_{k&#x3D;0}^{N - 1}{X[k] e^{i 2\pi \frac{k}{N} n}} (n \in {0, 1, \dots, N - 1})$$</p><p>We call $x[0:N-1]$ the <em>inverse discrete-time Fourier transform</em> of $X[0:N-1]$. This is analogous to $X(f)$ being the Fourier transform of $x(t)$ and $x(t)$ being the inverse Fourier transform of $X(f)$ in the continuous case.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In realms as broad as electrical engineering, acoustics, optics, signal processing, quantum mechanics, and econometrics, the Fourier Seri</summary>
      
    
    
    
    <category term="Mathematics" scheme="https://abbaswu.github.io/categories/Mathematics/"/>
    
    
  </entry>
  
  <entry>
    <title>On Convolutional Neural Networks and Photographic Lenses</title>
    <link href="https://abbaswu.github.io/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/"/>
    <id>https://abbaswu.github.io/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/</id>
    <published>2023-08-24T07:00:00.000Z</published>
    <updated>2023-08-24T14:04:41.628Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutional neural networks</a> are <a href="https://en.wikipedia.org/wiki/Camera_lens">camera lenses</a> to a computer.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Typical_cnn.png" alt="A convolutional neural network"></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Tessar.png" alt="A camera lens"></p><p>The analogy does not stop at the point that both compress visual information:</p><ul><li>The <a href="https://www.jeremyjordan.me/convnet-architectures/">evolution of convolutional neural network architectures</a> resembles the <a href="https://en.wikipedia.org/wiki/History_of_photographic_lens_design">evolution of camera lenses</a>.</li><li>The <a href="https://analyticsindiamag.com/complete-guide-to-understanding-precision-and-recall-curves/">P-R curve</a> showing the performance of a convolutional neural network is strikingly similar to the <a href="https://www.dearsusan.net/how-to-read-mtf-curves-like-an-artist/">MTF curve</a> evaluating lens performance.</li></ul><p><img src="https://machinelearningmastery.com/wp-content/uploads/2020/01/Precision-Recall-Curve-of-a-Logistic-Regression-Model-and-a-No-Skill-Classifier2.png" alt="A P-R curve"></p><p><img src="https://photographylife.com/wp-content/uploads/2013/01/How-to-Read-MTF-Charts.png" alt="An MTF curve"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolutional_neural_network&quot;&gt;Convolutional neural networks&lt;/a&gt; are &lt;a href=&quot;https://en.wikipedia.</summary>
      
    
    
    
    <category term="Reflections" scheme="https://abbaswu.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Timetable of Well-known Conferences in Different Subdomains of Computer Science</title>
    <link href="https://abbaswu.github.io/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/"/>
    <id>https://abbaswu.github.io/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/</id>
    <published>2023-08-16T07:00:00.000Z</published>
    <updated>2023-08-16T22:03:49.788Z</updated>
    
    <content type="html"><![CDATA[<p>We have compiled a timetable of well-known conferences in different subdomains of computer science based on the <em>Class A</em> and <em>Class B</em> conferences in <a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/">“Directory of International Academic Conferences and Journals Recommended by the Chinese Computer Society”</a>. Although the precise start dates of each conference vary year by year, the provided start dates provide a general guideline on the <em>relative order</em> of the conferences throughout each year.</p><table><thead><tr><th>Name</th><th>Start Date</th><th>Subdomain</th></tr></thead><tbody><tr><td>CIDR</td><td>01&#x2F;08&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>GROUP</td><td>01&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>POPL</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VMCAI</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>HiPEAC</td><td>01&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SODA</td><td>01&#x2F;22&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>PPoPP</td><td>02&#x2F;05&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>AAAI</td><td>02&#x2F;07&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>FPGA</td><td>02&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>FAST</td><td>02&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPCA</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CGO</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NDSS</td><td>02&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>WSDM</td><td>02&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FM</td><td>03&#x2F;07&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>PERCOM</td><td>03&#x2F;13&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>FSE</td><td>03&#x2F;20&#x2F;23</td><td>Security</td></tr><tr><td>SANER</td><td>03&#x2F;21&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>DCC</td><td>03&#x2F;21&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ASPLOS</td><td>03&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>VR</td><td>03&#x2F;25&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>IUI</td><td>03&#x2F;27&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICDT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>EDBT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICDE</td><td>04&#x2F;03&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>RECOMB</td><td>04&#x2F;16&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>DATE</td><td>04&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NSDI</td><td>04&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>DASFAA</td><td>04&#x2F;17&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ETAPS</td><td>04&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>EUROCRYPT</td><td>04&#x2F;23&#x2F;23</td><td>Security</td></tr><tr><td>CHI</td><td>04&#x2F;23&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SDM</td><td>04&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>WWW</td><td>04&#x2F;30&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>I3D</td><td>05&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PKC</td><td>05&#x2F;07&#x2F;23</td><td>Security</td></tr><tr><td>EG</td><td>05&#x2F;08&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>RTAS</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IPSN</td><td>05&#x2F;09&#x2F;23</td><td>Computer Networks</td></tr><tr><td>HSCC</td><td>05&#x2F;09&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>EuroSys</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICSE</td><td>05&#x2F;14&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IPDPS</td><td>05&#x2F;15&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICPC</td><td>05&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>INFOCOM</td><td>05&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MSST</td><td>05&#x2F;22&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>S&amp;P</td><td>05&#x2F;22&#x2F;23</td><td>Security</td></tr><tr><td>ICRA</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>AAMAS</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICASSP</td><td>06&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ECSCW</td><td>06&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>NOSSDAV</td><td>06&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CAiSE</td><td>06&#x2F;12&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SoCG</td><td>06&#x2F;12&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICMR</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>EuroVis</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SPAA</td><td>06&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISCA</td><td>06&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>PLDI</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LCTES</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiSys</td><td>06&#x2F;18&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SIGMOD</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>PODS</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CVPR</td><td>06&#x2F;18&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SIGMETRICS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IWQoS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PODC</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPDC</td><td>06&#x2F;20&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>STOC</td><td>06&#x2F;20&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICS</td><td>06&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HotOS</td><td>06&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LICS</td><td>06&#x2F;26&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>DSN</td><td>06&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>EGSR</td><td>06&#x2F;28&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CADE&#x2F;IJCAR</td><td>07&#x2F;01&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICWS</td><td>07&#x2F;02&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SGP</td><td>07&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SAT</td><td>07&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SPM</td><td>07&#x2F;05&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICAPS</td><td>07&#x2F;08&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>DAC</td><td>07&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CSFW</td><td>07&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>ACL</td><td>07&#x2F;09&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>USENIX ATC</td><td>07&#x2F;10&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>OSDI</td><td>07&#x2F;10&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICALP</td><td>07&#x2F;10&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICME</td><td>07&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>COLT</td><td>07&#x2F;12&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISSTA</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ECOOP</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CAV</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>CCC</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICCBR</td><td>07&#x2F;17&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICDCS</td><td>07&#x2F;18&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SIGIR</td><td>07&#x2F;23&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICML</td><td>07&#x2F;23&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISMB</td><td>07&#x2F;23&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>CogSci</td><td>07&#x2F;26&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>UAI</td><td>07&#x2F;31&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SCA</td><td>08&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SIGKDD</td><td>08&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>SIGGRAPH</td><td>08&#x2F;06&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICPP</td><td>08&#x2F;07&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>USENIX Security</td><td>08&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>CRYPTO</td><td>08&#x2F;19&#x2F;23</td><td>Security</td></tr><tr><td>IJCAI</td><td>08&#x2F;19&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>HOT CHIPS</td><td>08&#x2F;27&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CP</td><td>08&#x2F;27&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VLDB</td><td>08&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>KR</td><td>09&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>RE</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICFP</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ESA</td><td>09&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SIGCOMM</td><td>09&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CHES</td><td>09&#x2F;10&#x2F;23</td><td>Security</td></tr><tr><td>SECON</td><td>09&#x2F;11&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ASE</td><td>09&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CODES+ISSS</td><td>09&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>EMSOFT</td><td>09&#x2F;17&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>ECML-PKDD</td><td>09&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CONCUR</td><td>09&#x2F;19&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ESORICS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>SRDS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>MobileHCI</td><td>09&#x2F;26&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ECAI</td><td>09&#x2F;30&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>MoDELS</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICSME</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiCom</td><td>10&#x2F;02&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ICCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ECCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ITC</td><td>10&#x2F;08&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>UbiComp</td><td>10&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ESEM</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ISSRE</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICNP</td><td>10&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PG</td><td>10&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CSCW</td><td>10&#x2F;14&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>RAID</td><td>10&#x2F;16&#x2F;23</td><td>Security</td></tr><tr><td>ISMAR</td><td>10&#x2F;16&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PACT</td><td>10&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CIKM</td><td>10&#x2F;21&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>OOPSLA</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SAS</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IEEE VIS</td><td>10&#x2F;22&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>MobiHoc</td><td>10&#x2F;23&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SOSP</td><td>10&#x2F;23&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IMC</td><td>10&#x2F;24&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MICRO</td><td>10&#x2F;28&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICCAD</td><td>10&#x2F;29&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ACM MM</td><td>10&#x2F;29&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>UIST</td><td>10&#x2F;29&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SoCC</td><td>10&#x2F;30&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CLUSTER</td><td>10&#x2F;31&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISS</td><td>11&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICCD</td><td>11&#x2F;06&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISWC</td><td>11&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FOCS</td><td>11&#x2F;06&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SC</td><td>11&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SenSys</td><td>11&#x2F;12&#x2F;23</td><td>Computer Networks</td></tr><tr><td>Performance</td><td>11&#x2F;14&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CCS</td><td>11&#x2F;26&#x2F;23</td><td>Security</td></tr><tr><td>ICSOC</td><td>11&#x2F;28&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>TCC</td><td>11&#x2F;29&#x2F;23</td><td>Security</td></tr><tr><td>ICDM</td><td>12&#x2F;01&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FSE&#x2F;ESEC</td><td>12&#x2F;03&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ACSAC</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>ASIACRYPT</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>CoNEXT</td><td>12&#x2F;05&#x2F;23</td><td>Computer Networks</td></tr><tr><td>RTSS</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>BIBM</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>EMNLP</td><td>12&#x2F;06&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>NeurIPS</td><td>12&#x2F;10&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>Middleware</td><td>12&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;We have compiled a timetable of well-known conferences in different subdomains of computer science based on the &lt;em&gt;Class A&lt;/em&gt; and &lt;em&gt;</summary>
      
    
    
    
    <category term="Reference" scheme="https://abbaswu.github.io/categories/Reference/"/>
    
    
  </entry>
  
  <entry>
    <title>Our Motivation for Maintaining Our Blog</title>
    <link href="https://abbaswu.github.io/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/"/>
    <id>https://abbaswu.github.io/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/</id>
    <published>2023-08-16T07:00:00.000Z</published>
    <updated>2023-08-16T22:48:29.241Z</updated>
    
    <content type="html"><![CDATA[<p>今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。</p><p>This blog is a replica of our previous “problem books” used for junior and senior high school. In the past, we would record background knowledge, problem solving ideas, and efficient algorithms. Today, we would note down understandings and insights. These are all the result of the hard work of searching and exploring, and we record them down in order to gradually accumulate our knowledge and understanding. Only the direct purpose has been changed from “preparing for a test” to “doing scientific research”.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。&lt;/p&gt;
&lt;p&gt;This blog is a replica of our previous “probl</summary>
      
    
    
    
    <category term="Reflections" scheme="https://abbaswu.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>ISSTA/ECOOP 2023 Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/</id>
    <published>2023-07-22T04:00:00.000Z</published>
    <updated>2023-07-22T22:01:01.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mon-17-Jul"><a href="#Mon-17-Jul" class="headerlink" title="Mon 17 Jul"></a>Mon 17 Jul</h1><h2 id="Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20"><a href="#Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Session 1 FUZZING at Amazon Auditorium (Gates G20)"></a>Session 1 FUZZING at Amazon Auditorium (Gates G20)</h2><h3 id="Welcome-and-Introductions"><a href="#Welcome-and-Introductions" class="headerlink" title="Welcome and Introductions"></a>Welcome and Introductions</h3><p>The following reviewing criteria for workshop papers can serve as a guide for us in writing papers:</p><ul><li>Is the problem that is addressed significant for research or practice?</li><li>Are the contributions (technique, hypothesis, or evaluation) over existing work sufficient?</li><li>Is the methodology (experimental setup or protocol) specified to validate the claims or hypotheses reasonable?</li><li>Can an independent research group reproduce the results, given the proposed methodology (experimental setup)</li></ul><p>Establish significance, novelty, and soundness, even if results do not show a large performance gain. Inspect unexpected results, such as why results are negative.</p><h3 id="Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar"><a href="#Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar" class="headerlink" title="Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/fuzzing-2023/9/Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges">Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar</a></h3><p>Why does fuzzing keep finding bugs in production software? LOTS of code is added or modified without being tested. (Covrig: A framework for the analysis of code, test, and coverage evolution in real software)</p><p>Fuzzing is not automated enough. Fuzz targets (test drivers) need to be manually specified. There is much work on improving fuzzing heuristics, but more work is required for test driver generation.</p><p>An ideal test case should benefit quality assurance, debugging aid, and documentation. They should <em>target human users</em>, and be small, fast, readable, and well-documented. However, automatically generated test suites, such as those generated by fuzzers, need to be improved in these aspects. They achieve high code coverage, excel at finding generic&#x2F;crash bugs in general software that <em>may not be very realistic</em> (<a href="https://www.manuelrigger.at/preprints/NoREC.pdf">assertion faults, crashes, undefined behavior</a>) but do not achieve high feature coverage and are poor at detecting logical bugs in software for specific domains.</p><p>On the other hand, such fuzzing makes it appropriate for use cases outside of security and software testing that <em>require a novel search to find diverse failing inputs, corner cases, and loopholes</em>, such as ML models and even investigating legal documents (Rohan).</p><p>Developers tend to be <em>afraid</em> of using fuzzers as they don’t understand them or think of them as security tools, in contrast to a standard testing tool. Allowing fuzzing to operate at a higher declarative level and combining fuzzing with domain-specific specification languages would be beneficial.</p><p>Sound fuzzer evaluation is challenging.</p><ul><li>Well-designed experiment methodology.</li><li>Huge variance due to randomness, demanding substantial computation resources (e.g., repeat 20x, 24 hours, X fuzzers, Y programs)</li></ul><h1 id="Thu-20-Jul"><a href="#Thu-20-Jul" class="headerlink" title="Thu 20 Jul"></a>Thu 20 Jul</h1><h2 id="Keynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynotes at Amazon Auditorium (Gates G20)"></a>Keynotes at Amazon Auditorium (Gates G20)</h2><p>Paper Reviewing Statistics</p><ul><li>44&#x2F;97 papers accepted</li><li>Round 1: 40 submitted, 17 accepted, 9 rejected, 14 resubmit</li><li>Round 2: 57 submitted (11 resubmissions), 27 accepted, 18 rejected, 12 resubmit</li></ul><h3 id="Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou"><a href="#Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou" class="headerlink" title="Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/7/Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities">Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou</a></h3><ul><li>Think of an exciting question, such as various language features, and look into it as a research question (<a href="https://link.springer.com/chapter/10.1007/3-540-45332-6_3">An Abstract Model of Java Dynamic Linking and Loading</a>, <a href="https://spiral.imperial.ac.uk/bitstream/10044/1/705/1/A%20flexible%20model%20for%20dynamic.pdf">A Flexible Model for Dynamic Linking in Java and C#</a>).</li><li>The key for program verification is to <em>develop formal models for a (subset) of a language</em>, make it small and simple, and gradually expand (<a href="https://spiral.imperial.ac.uk/handle/10044/1/95175">Java is type safe – probably</a>).</li><li>Actively start collaborations (<a href="https://dl.acm.org/doi/10.1145/582419.582447">Ownership, encapsulation and the disjointness of type and effect</a>).</li></ul><h2 id="ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10"><a href="#ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10" class="headerlink" title="ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)"></a>ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)</h2><h3 id="June-A-Type-Testability-Transformation-for-Improved-ATG-Performance"><a href="#June-A-Type-Testability-Transformation-for-Improved-ATG-Performance" class="headerlink" title="June: A Type Testability Transformation for Improved ATG Performance"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/15/June-A-Type-Testability-Transformation-for-Improved-ATG-Performance">June: A Type Testability Transformation for Improved ATG Performance</a></h3><p>Automatically generating unit tests is a powerful approach to exercising complex software. However, existing methods frequently fail to deliver appropriate input values, like strings, capable of <em>bypassing domain-specific sanity checks</em>. For instance, Randoop commonly uses “hi!” as a value. (<a href="https://ieeexplore.ieee.org/abstract/document/8115617">Saying ‘Hi!’ is not enough: Mining inputs for effective test generation</a>)</p><h3 id="Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests"><a href="#Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests" class="headerlink" title="Pattern-Based Peephole Optimizations with Java JIT Tests"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/112/Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests">Pattern-Based Peephole Optimizations with Java JIT Tests</a></h3><p>To demonstrate the advantage of JOG over hand-written peephole optimizations in terms of <em>ease of writing</em>, existing hand-written peephole optimizations are compared, and <em>number of characters and number of lines</em> are used as metrics.</p><h3 id="GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper"><a href="#GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper" class="headerlink" title="GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/54/GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper-">GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)</a></h3><p>The tool has been implemented as <a href="https://tinyurl.com/issta-gpuharbor"><em>a Web app using WebGPU to access the GPU</em></a>, allowing the audience to <em>try it out during the talk</em>.</p><h2 id="Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)"></a>Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)</h2><h3 id="Machine-Learning-for-Software-Engineering"><a href="#Machine-Learning-for-Software-Engineering" class="headerlink" title="Machine Learning for Software Engineering"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/1/Machine-Learning-for-Software-Engineering">Machine Learning for Software Engineering</a></h3><p>What underlies the success of machine learning for software engineering?</p><ul><li><a href="https://people.inf.ethz.ch/suz/publications/natural.pdf">The naturalness of code</a>. <code>i++</code> is predictable given <code>for (i = 0; i &lt; 10; </code>, and <code>backward()</code> is predictable given <code>loss.</code></li><li><a href="https://dl.acm.org/doi/10.1145/3338906.3340458">The bimodality of code, or code contains natural language</a>. Q. How do I get a platform-dependent new line character? A. public static String get<em>Platform</em>LineSeparator() { return System.getProperty(“<em>line</em>.separator”); }</li><li><a href="http://janvitek.org/events/NEU/7580/papers/more-papers/oopsla16-dt.pdf">Code has predictable properties</a>. Given <code>... = x.weight * x.height</code>, what is the <code>???</code> in <code>... = y.weight * ???</code>?</li><li>Large amount of data (GitHub repos with code, version history, and commit logs, StackOverflow questions and answers, internal corpora in companies, etc.)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mon-17-Jul&quot;&gt;&lt;a href=&quot;#Mon-17-Jul&quot; class=&quot;headerlink&quot; title=&quot;Mon 17 Jul&quot;&gt;&lt;/a&gt;Mon 17 Jul&lt;/h1&gt;&lt;h2 id=&quot;Session-1-FUZZING-at-Amazon-Audit</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>Syncing a Local Directory With a Remote Directory via rsync</title>
    <link href="https://abbaswu.github.io/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/"/>
    <id>https://abbaswu.github.io/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/</id>
    <published>2023-07-11T07:00:00.000Z</published>
    <updated>2023-07-11T05:49:44.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync"><a href="#Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync" class="headerlink" title="Syncing a Local Directory With a Remote Directory via rsync"></a>Syncing a Local Directory With a Remote Directory via rsync</h1><p><code>rsync</code> is a powerful utility for efficiently synchronizing directories between a local computer and a remote server. It achieves this synchronization by comparing file modification times and sizes, utilizing delta encoding, and optionally employing data compression to minimize network usage.</p><p>To successfully synchronize directories between two systems using rsync, you need to have rsync installed on both the local and remote machines. Additionally, the remote machine should be accessible from the local machine via SSH, enabling the local machine to invoke the remote machine’s rsync and determine which parts of local files need to be transferred.</p><p>The rsync command-line syntax is similar to that of cp and scp. The following command-line options are commonly used:</p><ul><li><code>-e</code>: Specifies the command to establish an SSH connection before the <code>username@domain</code> section. This option allows you to <em>customize SSH behavior</em>, such as using specific ports or providing a PEM file (e.g., <code>ssh -i SSH-key.pem</code>).</li><li><code>-r</code> (recursive): Used for syncing directories, similar to <code>cp</code> and <code>scp</code>.</li><li><code>-v</code> (verbose): Lists files being transferred during synchronization.</li><li><code>-z</code>: Enables additional data compression for improved network usage.</li></ul><p>When specifying the source directory and the destination directory, <em>keep the following points in mind</em>:</p><ul><li>A local directory can be represented using either a relative or absolute path.</li><li>A remote directory is represented using the <code>username@domain:&lt;absolute path on the remote machine&gt;</code> notation, similar to <code>scp</code>.</li><li>A source directory <em>must</em> end with a trailing slash.</li><li>A destination directory <em>must not</em> end with a trailing slash.</li></ul><p>Here’s an example that illustrates how to sync the local directory <code>TypeWriter_dataset</code> to the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> with additional data compression. This assumes connecting to <code>ubuntu@104.171.203.254</code> via the command <code>ssh -i SSH-key.pem</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>TypeWriter_dataset/ \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>Conversely, to sync the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> to the local directory <code>TypeWriter_dataset</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset/ \<br>TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>References:</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories">https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories</a></li><li><a href="https://en.wikipedia.org/wiki/Rsync">https://en.wikipedia.org/wiki/Rsync</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync&quot;&gt;&lt;a href=&quot;#Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync&quot; </summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
  <entry>
    <title>Task Parallelism and Data Parallelism Thread Pools</title>
    <link href="https://abbaswu.github.io/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/"/>
    <id>https://abbaswu.github.io/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/</id>
    <published>2023-07-11T07:00:00.000Z</published>
    <updated>2023-07-11T16:29:59.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Task-Parallelism-and-Data-Parallelism-Thread-Pools"><a href="#Task-Parallelism-and-Data-Parallelism-Thread-Pools" class="headerlink" title="Task Parallelism and Data Parallelism Thread Pools"></a>Task Parallelism and Data Parallelism Thread Pools</h1><p>Parallel computing environments often involve distributing code across multiple processors for efficient execution. Two common paradigms of parallelization are task parallelism and data parallelism.</p><p>Task parallelism focuses on distributing encapsulated tasks that can execute the same or different code on the same or different data across different processors. On the other hand, data parallelism involves performing the same operations on different subsets of the same data on multiple processors.</p><p>Both task parallelism and data parallelism can be implemented using thread pools. This article explores simple implementations of thread pools for task parallelism and data parallelism scenarios.</p><h2 id="Task-Parallelism-Thread-Pool"><a href="#Task-Parallelism-Thread-Pool" class="headerlink" title="Task Parallelism Thread Pool"></a>Task Parallelism Thread Pool</h2><p>The following code demonstrates a simple thread pool for task parallelism. It utilizes a task queue to distribute <em>tasks</em>, which are represented as <code>Callable[[], None]</code> objects (callables accepting no parameters and returning None) across multiple threads. Each thread continuously fetches a task from the task queue and executes it. If an exception occurs during task execution, a traceback is printed, and a new task is obtained from the task queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = task_queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            task: <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span> = self.task_queue.get()<br><br>            <span class="hljs-keyword">if</span> task <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                task()<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_task_parallelism_thread_pool</span>(<span class="hljs-params">tasks: Iterable[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]], num_threads: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create task queue.</span><br>    task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share a task queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = TaskParallelismThreadPoolThread(task_queue)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all tasks.</span><br>    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>        task_queue.put(task)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once all tasks are finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        task_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To use this task parallelism thread pool, provide it with a collection of <em>tasks</em> (represented as <code>Callable[[], None]</code> objects) and the desired number of threads. The tasks will be executed in parallel by the thread pool until all tasks have finished.</p><h2 id="Data-Parallelism-Thread-Pool"><a href="#Data-Parallelism-Thread-Pool" class="headerlink" title="Data Parallelism Thread Pool"></a>Data Parallelism Thread Pool</h2><p>The following code showcases a simple thread pool for data parallelism. It distributes data as <em>argument tuples</em> across multiple threads using an <em>argument tuple queue</em>. Each thread is assigned an <em>operation</em> created using an <em>operation factory</em>. After <em>executing an operation on an argument tuple</em>, the resulting return value is passed to a return value callback.</p><p>As with the task parallelism thread pool, all threads in the thread pool are always busy by getting a new argument tuple whenever its operation finishes execution on a previous argument tuple. Should an exception be raised when executing an operation on an argument tuple, a traceback is printed, and a new argument tuple is taken from the shared argument tuple queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>], argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>], return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>] = operation<br>        self.argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = argument_tuple_queue<br>        self.return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = return_value_callback<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            argument_tuple: <span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span> = self.argument_tuple_queue.get()<br><br>            <span class="hljs-keyword">if</span> argument_tuple <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                self.return_value_callback(self.operation(*argument_tuple))<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_data_parallelism_thread_pool</span>(<span class="hljs-params"></span><br><span class="hljs-params">    operation_factory: <span class="hljs-type">Callable</span>[[], <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>]],</span><br><span class="hljs-params">    argument_tuples: Iterable[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...]],</span><br><span class="hljs-params">    return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = <span class="hljs-keyword">lambda</span> return_value: <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    num_threads: <span class="hljs-built_in">int</span> = multiprocessing.cpu_count(<span class="hljs-params"></span>)</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create argument tuple queue.</span><br>    argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share an argument tuple queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = DataParallelismThreadPoolThread(operation_factory(), argument_tuple_queue, return_value_callback)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all argument tuples.</span><br>    <span class="hljs-keyword">for</span> argument_tuple <span class="hljs-keyword">in</span> argument_tuples:<br>        argument_tuple_queue.put(argument_tuple)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once execution on all argument tuples have finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        argument_tuple_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To utilize the data parallelism thread pool, provide an <em>operation factory</em>, a collection of argument tuples, and a return value callback. The operation factory, when called, creates operations represented as <code>Callable[[...], Any]</code> objects, accepting arguments from an <em>argument tuple</em> and returning a value. Each thread in the thread pool will execute these operations on the provided argument tuples. Any return values will be passed to the return value callback, which can be customized according to your needs. The data parallelism thread pool will process the argument tuples in parallel until all tuples have been processed. </p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Say that we want to sleep for $0, 1, 2, \dots, N - 1$ seconds before printing the number of seconds slept in parallel, where $N$ is the number of threads in our thread pool.</p><p>We can adopt a task parallelism approach, where we <em>create tasks which encapsulate how long they sleep</em>, and add them to a task parallelism thread pool:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_task</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>        <span class="hljs-keyword">nonlocal</span> sleep_time<br>        time.sleep(sleep_time)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> task<br><br><br>run_simple_task_parallelism_thread_pool(<br>    (create_task(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    N<br>)<br></code></pre></td></tr></table></figure><p>As an alternative, we can also use a data parallelism approach, in which <em>operations</em> accept the number of seconds they sleep from <em>argument tuples</em>, sleep for those time durations, and return those time durations before <em>return value callbacks</em> operate on the return values and print those time durations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    time.sleep(sleep_time)<br>    <span class="hljs-keyword">return</span> sleep_time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation_factory</span>() -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-built_in">int</span>], <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> operation<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_value_callback</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br><br><br>run_simple_data_parallelism_thread_pool(<br>    operation_factory,<br>    ((i,) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    return_value_callback,<br>    N<br>)<br></code></pre></td></tr></table></figure><p>Running both thread pools takes the same time and produces the same output.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.m.wikipedia.org/wiki/Task_parallelism">https://en.m.wikipedia.org/wiki/Task_parallelism</a></li><li><a href="https://en.wikipedia.org/wiki/Data_parallelism">https://en.wikipedia.org/wiki/Data_parallelism</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Task-Parallelism-and-Data-Parallelism-Thread-Pools&quot;&gt;&lt;a href=&quot;#Task-Parallelism-and-Data-Parallelism-Thread-Pools&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Batch Killing Processes Looked up Through ps -aux | grep &lt;process_name&gt;</title>
    <link href="https://abbaswu.github.io/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/"/>
    <id>https://abbaswu.github.io/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/</id>
    <published>2023-06-10T04:00:00.000Z</published>
    <updated>2023-06-10T18:33:14.919Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we acidentally spawn a series of processes, and we want to kill them. We can look up their pid’s through <code>ps -aux | grep &lt;process_name&gt;</code> (as shown below) and manually run the <code>kill</code> command to kill each process by providing its pid, but <em>how can we automate this tedious task</em>?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.7  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.3  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br>jifengwu   59564  0.0  0.0  19612  2516 pts/2    S+   13:45   0:00 grep --color=auto pipreqs<br></code></pre></td></tr></table></figure><p>First, we can add <code>grep -v grep</code> to the pipe to <em>hide the grep processes from the output</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.6  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.2  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br></code></pre></td></tr></table></figure><p>Then, we can add <code>awk &#39;&#123;print $2&#125;&#39;</code> to the pipe to invoke <code>awk</code> to <em>trim the second space-delimited component</em> (which in this case is the pid). Now we have a list of the pid’s of the processes we want to kill:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>58180<br>58205<br>58224<br>58267<br>58272<br>58282<br>58295<br>58659<br></code></pre></td></tr></table></figure><p>Finally, we can iterate over the pid’s in a for-loop to kill them.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> $(ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>&gt; <span class="hljs-keyword">do</span><br>&gt; <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$pid</span><br>&gt; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>References</p><ul><li><a href="https://www.baeldung.com/linux/grep-exclude-ps-results">https://www.baeldung.com/linux/grep-exclude-ps-results</a></li><li><a href="https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command">https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes we acidentally spawn a series of processes, and we want to kill them. We can look up their pid’s through &lt;code&gt;ps -aux | grep &amp;</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>Parsing Command-line Options in Shell Scripts Using `getopts`</title>
    <link href="https://abbaswu.github.io/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/"/>
    <id>https://abbaswu.github.io/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/</id>
    <published>2023-06-09T04:00:00.000Z</published>
    <updated>2023-06-09T19:00:27.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-getopts"><a href="#What-is-getopts" class="headerlink" title="What is getopts"></a>What is <code>getopts</code></h1><p>getopts is a built-in Unix shell command for parsing command-line options. It is a wrapper around <code>getopt</code>, a POSIX C library function used to parse command-line options of the Unix&#x2F;POSIX style. Specifically:</p><ul><li>Options are <em>single-character alphanumerics</em> preceded by a - (hyphen-minus) character, i.e. <code>-a</code>. <code>-b</code>, <code>-c</code>.</li><li>Options can take an argument or none.</li><li>Multiple options can be chained together, as long as the non-last ones are not argument-taking. If <code>-a</code> and <code>-b</code> take no arguments while <code>-c</code> takes an argument, <code>-abc foo</code> is the same as <code>-a -c -e foo</code>, but <code>-bca</code> is not the same as <code>-b -c a</code> due to the preceding rule.</li><li>When an option takes an argument, this can be in the same token or in the next one. In other words, if <code>-c</code> takes an argument, <code>-cfoo</code> is the same as <code>-c foo</code>.</li></ul><h1 id="optstring‘s"><a href="#optstring‘s" class="headerlink" title="optstring‘s"></a><code>optstring</code>‘s</h1><p>Both getopt and getopts specifies specify options using a <em>optstring</em>. Specifically:</p><ul><li><em>Begin an optstring with <code>:</code>.</em></li><li>To specify an option that <em>does not take an argument</em>, append its name to the optstring.</li><li>To specify an option that <em>takes an argument</em>, append its name <em>and <code>:</code></em> to the optstring.</li></ul><p>For example, the optstring that specifies two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments is <code>:abc:d:</code>.</p><h1 id="Using-getopts-in-a-Shell-Script"><a href="#Using-getopts-in-a-Shell-Script" class="headerlink" title="Using getopts in a Shell Script"></a>Using <code>getopts</code> in a Shell Script</h1><p>In Shell scripts, <code>getopts</code> invoked with an <code>optstring</code> is used with a <code>while</code>-loop to parse command-line options.</p><p>Say that our Shell script <code>test_getopts.sh</code> accepts two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments. Our Shell script can look like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;:abc:d:&#x27;</span> name<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$name</span> <span class="hljs-keyword">in</span><br>        a)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -a&quot;</span><br>            ;;<br>        b)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -b&quot;</span><br>            ;;<br>        c)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -c with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        d)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -d with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        :)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument&quot;</span><br>            ;;<br>        ?)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided an invalid option -<span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>Here, <code>getopts</code> is invoked with the <code>optstring</code> for specifying our options, <code>:abc:d:</code>. In each iteration of the <code>while</code>-loop, the <em>next option</em> is parsed and the Shell variables <code>name</code> and <code>OPTARG</code> are set to different values based on different conditions we may encounter.</p><ul><li>If a <em>valid</em> option is detected and that option <em>does not take an argument</em>, the Shell variable <code>name</code> is set to the name of the option.</li><li>If a <em>valid</em> option is detected and that option <em>takes an argument</em>:<ul><li>If we have provided an argument, the Shell variable <code>name</code> is set to the name of the option, and the Shell variable <code>OPTARG</code> is set to the value of the argument.</li><li>If we <em>haven’t provided an argument</em>, <em>the Shell variable <code>name</code> is set to <code>:</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul></li><li>If an <em>invalid</em> option is detected, <em>the Shell variable <code>name</code> is set to <code>?</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul><p>We can see <code>getopts</code> at work by providing different command-line options when invoking our Shell script.</p><p>Providing no command-line options:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a -a<br>You provided option -a<br>You provided option -a<br>$ sh test_getopts.sh -aa<br>You provided option -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo<br>You provided option -c with argument foo<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code> <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo -c bar<br>You provided option -c with argument foo<br>You provided option -c with argument bar<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument without an argument:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c<br>Option -c requires an argument<br></code></pre></td></tr></table></figure><p>Providing an invalid argument <code>-e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -e<br>You provided an invalid option -e<br></code></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/Getopts">https://en.wikipedia.org/wiki/Getopts</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html">https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html</a></li><li><a href="https://en.wikipedia.org/wiki/Getopt">https://en.wikipedia.org/wiki/Getopt</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html">https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-getopts&quot;&gt;&lt;a href=&quot;#What-is-getopts&quot; class=&quot;headerlink&quot; title=&quot;What is getopts&quot;&gt;&lt;/a&gt;What is &lt;code&gt;getopts&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;getop</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>PNW PLSE Workshop 2023 Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/</id>
    <published>2023-05-10T04:00:00.000Z</published>
    <updated>2023-07-24T22:18:02.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-30-Talks"><a href="#10-30-Talks" class="headerlink" title="10:30 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.5ebiaujbjmrk">10:30 - Talks</a></h1><h2 id="Linear-Types-for-Systems-Verification"><a href="#Linear-Types-for-Systems-Verification" class="headerlink" title="Linear Types for Systems Verification"></a><a href="https://drive.google.com/file/d/1Bv4_PnXXZfx6egG4htZNfNYES_gFhfR7/view?usp=share_link">Linear Types for Systems Verification</a></h2><p>It is a good idea to embed verification information in type system of a programming language.</p><h2 id="Verified-Program-Construction"><a href="#Verified-Program-Construction" class="headerlink" title="Verified Program Construction"></a><a href="https://drive.google.com/file/d/14XdepAsHM1ts-tp21UXAqMOEbsB8mkHG/view?usp=share_link">Verified Program Construction</a></h2><ul><li>Program verification is hard per se.<ul><li>Proofs are brittle.</li><li>Existing techniques provide poor support for commonly-used datatypes such as vectors, sets, and maps.</li><li>Partial verification is important due to the complexity of programs.</li></ul></li><li>Program verification for general-purpose programming languages and frameworks for general-purpose programming languages is tedious compared to focusing on a DSL.</li><li>The direction for program verification should be <em>verified program construction</em>.</li><li>Be aware of the pain point you are trying to solve and the day-to-day engineering reality in real-world software development.</li></ul><h1 id="13-00-Keynote-Patrick-Lam"><a href="#13-00-Keynote-Patrick-Lam" class="headerlink" title="13:00 - Keynote: Patrick Lam"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.4alvulgrtjyi">13:00 - Keynote: Patrick Lam</a></h1><h2 id="Hot-Takes-on-Machine-Learning-for-Program-Analysis"><a href="#Hot-Takes-on-Machine-Learning-for-Program-Analysis" class="headerlink" title="Hot Takes on Machine Learning for Program Analysis"></a><a href="https://drive.google.com/file/d/1cfncXsqGw9kFHwi0BBE-VO7JkA1qY8eO/view?usp=share_link">Hot Takes on Machine Learning for Program Analysis</a></h2><ul><li>A crucial step in Machine Learning for Program Analysis is deciding what things could be used as features based on experience.</li><li>Generative AI can replace junior developers doing <em>raw coding</em> instead of <em>contextual work</em>.</li></ul><h1 id="13-30-Lightning-Talks"><a href="#13-30-Lightning-Talks" class="headerlink" title="13:30 - Lightning Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.m58uw7yzsis">13:30 - Lightning Talks</a></h1><h2 id="Lakeroad-Hardware-Compilation-via-Program-Synthesis"><a href="#Lakeroad-Hardware-Compilation-via-Program-Synthesis" class="headerlink" title="Lakeroad: Hardware Compilation via Program Synthesis"></a><a href="https://drive.google.com/file/d/165w2NcaRdSk_gy80TkHSQDb1z3yLnxyZ/view?usp=share_link">Lakeroad: Hardware Compilation via Program Synthesis</a></h2><p>If you don’t use DSLs, FPGAs bring crappy performance running programs in general-purpose programming languages.</p><h2 id="Checked-C"><a href="#Checked-C" class="headerlink" title="Checked C"></a><a href="https://drive.google.com/file/d/1e8T4sz96FRtYDzqdxMM2AFEf7Cfutn7z/view?usp=share_link">Checked C</a></h2><p>Retrofitting verification into non-verified languages is an arduous task.</p><h1 id="15-15-Talks"><a href="#15-15-Talks" class="headerlink" title="15:15 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.kl2qgin09esc">15:15 - Talks</a></h1><h2 id="An-Anti-Capitalist-Multicultural-Accessible-Programming-Language"><a href="#An-Anti-Capitalist-Multicultural-Accessible-Programming-Language" class="headerlink" title="An Anti-Capitalist, Multicultural, Accessible Programming Language"></a><a href="https://drive.google.com/file/d/1OD9XlNAPLXTtYFzFY2mpRA-gCoLWFCic/view?usp=share_link">An Anti-Capitalist, Multicultural, Accessible Programming Language</a></h2><p>An event-based language enabling time-traveling to all points in program execution history would greatly benefit debugging.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-30-Talks&quot;&gt;&lt;a href=&quot;#10-30-Talks&quot; class=&quot;headerlink&quot; title=&quot;10:30 - Talks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/cs.washington.edu</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Sized Types</title>
    <link href="https://abbaswu.github.io/2023/03/25/Paper-Review-Sized-Types/"/>
    <id>https://abbaswu.github.io/2023/03/25/Paper-Review-Sized-Types/</id>
    <published>2023-03-25T07:00:00.000Z</published>
    <updated>2023-04-11T22:20:17.304Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/237721.240882">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>You can check the presentation that I made for this paper <a href="https://github.com/abbaswu/sized-types-presentation">in this GitHub repository</a>.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Although I liked the idea of Sized Types proposed in the motivation, this paper was difficult for me to grasp, and after spending days reading it, there are still sections which I am confused about. I have summarized my understanding of this paper in the uploaded PDF, and I will discuss my thoughts here.</p><ol><li>I really like the idea of Sized Types that they can be used to prove data computations terminate and codata computations are productive using the same formalization.</li><li>Apparently, the requirement that size indexes in Sized Types be natural number size variables, the special index $\omega$, or linear functions of the size variables facilitates generating constraints in the type checking algorithm that can be solved by a constraint solver (e.g. an SMT solver). Although this may lead to overapproximation in certain scenarions (for example, representing the type of the factorial function), over all, I consider it to be a good balance point between expressiveness and usability.</li><li>3.2 Semantics of Expressions, 3.3 The Universe of Types, 3.4 Continuity and Ordinals, 3.5 Semantics of Types, and 3.7 $\omega$-Types used a lot of concepts before properly introducing them, and I couldn’t understand this part.</li><li>The example presented to demonstrate the type checking algorithm involves generating constraints. However, only the generated constraints are presented, while how the constraints are generated and what each symbol in the constraints stand for with regards to the aforementioned AST nodes is unknown.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Refinement Types</title>
    <link href="https://abbaswu.github.io/2023/03/19/Paper-Review-Refinement-Types/"/>
    <id>https://abbaswu.github.io/2023/03/19/Paper-Review-Refinement-Types/</id>
    <published>2023-03-19T07:00:00.000Z</published>
    <updated>2023-03-20T03:56:54.982Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://arxiv.org/abs/2010.07763">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This paper presents a clear and organized guide to refinement type systems by condensing the extensive literature on the topic and demonstrating the implementation of a refinement type checker. It first states the motivation for requirement types, a history of requirement types, and refinement logic, which is a logic system used in the proposed refinement type checker. The rest of the paper shows the implementation of a refinement type checker through a series of programming languages, beginning with simply-typed lambda calculus and incrementally adding additional features. This approach is influenced by the nanopass framework, which is used to teach compilation.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Honestly, I have found the section on implementing a refinement type checker through a series of programming languages challenging to understand. Still, I have understood much of the paper before that. Therefore, I will summarize my gained insights and state questions that I have in mind.</p><h2 id="Insights"><a href="#Insights" class="headerlink" title="Insights"></a>Insights</h2><h3 id="Refinement-Types-as-Subtypes"><a href="#Refinement-Types-as-Subtypes" class="headerlink" title="Refinement Types as Subtypes"></a>Refinement Types as Subtypes</h3><p>Type systems are the most commonly employed technique for ensuring the correct behavior of software. However, even well-typed programs can contain various bugs, such as buffer overflows, divisions by zero, logic bugs, and out-of-bounds array accesses. One approach to address this issue is to enhance a language’s types with <strong>subtypes that limit the range of valid values with predicates</strong>, such as ‘non-negative integer’ from ‘integer.’ These subtypes are known as ‘refinement types.’ They enable developers to write precise contracts for valid inputs and outputs of functions and specify the correctness properties. This brings formal verification into mainstream software development.</p><h3 id="Refinement-Logic-and-How-it-Maps-to-SMT-Expressions"><a href="#Refinement-Logic-and-How-it-Maps-to-SMT-Expressions" class="headerlink" title="Refinement Logic and How it Maps to SMT Expressions"></a>Refinement Logic and How it Maps to SMT Expressions</h3><p>I was partically impressed by refinement logic, the logic system used in the proposed refinement type checker, as it is both expressive and easy to be verified using an SMT solver.</p><p>Refinement logic consists of two parts: predicates and constraints. </p><p>Predicates are drawn from the quantifier-free fragment of linear arithmetic and uninterpreted functions (commonly used in SMT solvers), and may include boolean and integer literals, boolean and integer variables, arithmetic operators, boolean operators, comparisons, the ‘if-then-else’ expression, and uninterpreted functions (resembling those in <code>z3</code>).</p><p>Predicates are the building block of constraints, which are generated from refinement type checking. A constraint is either a predicate, an implication $\forall t: T : p \Rightarrow c$ which states that for each term $t$ of type $T$, if the predicate $p$ holds then another constraint $c$ must be true, or a conjunction of two other constraints.</p><p>Constraints can be verified by <strong>checking whether there is no satisfying assignment for the negated constraint</strong>. In this process, they can be converted into SMT expressions in a straightforward way. </p><p>For example, the constraint presented in the paper</p><p>$$c &#x3D; \forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x)$$</p><p>can be negated as follows:</p><p>$$\neg c$$</p><p>$$\neg (\forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \neg (\forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \neg (\forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land \neg (0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land (0 &gt; i \lor i \ge length(x))$$</p><p>We can verify the negated constraint using an SMT solver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> z3<br><br>In [<span class="hljs-number">2</span>]: L = z3.Int(<span class="hljs-string">&#x27;L&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: n = z3.Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>In [<span class="hljs-number">4</span>]: i = z3.Int(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br>In [<span class="hljs-number">5</span>]: solver = z3.Solver()<br><br>In [<span class="hljs-number">6</span>]: solver.add(<span class="hljs-number">0</span> &lt;= L)<br><br>In [<span class="hljs-number">7</span>]: solver.add(n == L)<br><br>In [<span class="hljs-number">8</span>]: solver.add(i == n - <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">9</span>]: solver.add(z3.Or(i &lt; <span class="hljs-number">0</span>, i &gt; L))<br><br>In [<span class="hljs-number">10</span>]: check_sat_result = solver.check()<br><br>In [<span class="hljs-number">11</span>]: check_sat_result<br>Out[<span class="hljs-number">11</span>]: sat<br><br>In [<span class="hljs-number">12</span>]: model_ref = solver.model()<br><br>In [<span class="hljs-number">13</span>]: model_ref<br>Out[<span class="hljs-number">13</span>]: [i = -<span class="hljs-number">1</span>, L = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>Note that <code>check_sat_result</code> is <code>sat</code> and we can find a satisfying assignment for $\neg c$: $i &#x3D; -1, length(x) &#x3D; 0, n &#x3D; 0$. This means that the original constraint $c$ is invalid.</p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>Although the concept of refinement types is neat, what is the burden on programmers of writing refinement types that describe legal inputs and outputs of functions? This is a critical aspect to determine whether refinement types can bring formal verification into mainstream software development.</p><p>Furthermore, constraints in the proposed refinement logic generated by the refinement type checker can be negated and converted into SMT expressions. However, what is the feasibility of doing such checking for large-scale programs? Would it become unscalable?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Rapidly Prototyping Presentations Using Markdown with Marp</title>
    <link href="https://abbaswu.github.io/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/"/>
    <id>https://abbaswu.github.io/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/</id>
    <published>2023-03-17T07:00:00.000Z</published>
    <updated>2023-04-11T22:24:04.224Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>In the need to create a <em>decent</em>, <em>academic</em> presentation <em>fast</em>?</li><li>LaTeX overly verbose?</li><li>No time to spend on adjusting style?</li><li>Have notes written in Markdown?</li></ul><p>The solution: create presentations with Markdown using Marp!</p><p>Source code and compiled PDF of the presentation for “Rapidly Prototyping Presentations Using Markdown with Marp” presented at the SPL Workshop 2023W2 is available <a href="https://github.com/abbaswu/rapidly-prototyping-presentations-using-markdown-with-marp">in this GitHub repository</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;In the need to create a &lt;em&gt;decent&lt;/em&gt;, &lt;em&gt;academic&lt;/em&gt; presentation &lt;em&gt;fast&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;LaTeX overly verbose?&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: How to make ad-hoc polymorphism less ad-hoc</title>
    <link href="https://abbaswu.github.io/2023/03/06/Paper-Review-How-to-make-ad-hoc-polymorphism-less-ad-hoc/"/>
    <id>https://abbaswu.github.io/2023/03/06/Paper-Review-How-to-make-ad-hoc-polymorphism-less-ad-hoc/</id>
    <published>2023-03-06T08:00:00.000Z</published>
    <updated>2023-03-06T18:35:38.150Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/75277.75283">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The paper first defines and compares <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">parametric and ad-hoc polymorphism</a> and points out the limitations of existing implementations of ad-hoc polymorphism. It then presents type classes that extend the Hindley&#x2F;Milner type system to support ad-hoc polymorphism as a remedy to these limitations and explains how to translate a program using type classes into an equivalent program without them at compile-time. Furthermore, it showcases the power of type classes and the translation mechanism using the example of a polymorphic equality operation. Finally, it explores subclassing of type classes.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>The paper is easy to follow as it is written in a lucid manner and gives an informal introduction to type classes and its translation rules. Furthermore, the motivation for type classes and how it connects to object-oriented programming languages is explicitly stated in the paper. I have further looked up some material following these lines. I will summarize them before presenting some questions and comments.</p><h2 id="My-Takeaways"><a href="#My-Takeaways" class="headerlink" title="My Takeaways"></a>My Takeaways</h2><h3 id="Different-Types-of-Polymorphism"><a href="#Different-Types-of-Polymorphism" class="headerlink" title="Different Types of Polymorphism"></a>Different Types of Polymorphism</h3><p>See <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">my Paper Review for “Types and Programming Languages” Chapter 15 and Chapter 16</a>.</p><h3 id="Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C"><a href="#Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C" class="headerlink" title="Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#"></a>Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#</h3><p>An interface is an abstract type used to provide a collection of methods compliant classes must implement in the Java (and C#) programming languages.</p><p>Java is mostly influenced by Objective-C, and Java’s interfaces are adaptations of the protocols in Objective-C and Smalltalk, which in turn is based on protocols in networking, notably the ARPANet.</p><p>Although Type Classes and Interfaces do not share a common lineage, it is straightforward to implement Type Classes with <em>Generic Interfaces</em> whose Generic Parameters should be Classes that comply with the Interface.</p><p>For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented in Java using the following Generic Interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eq</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(T other)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Type-Classes-and-Concepts-in-C"><a href="#Type-Classes-and-Concepts-in-C" class="headerlink" title="Type Classes and Concepts in C++"></a>Type Classes and Concepts in C++</h3><p>Although Java’s syntax resembles C++’s, its semantics of late-binding, single inheritance, class objects, and an extensive runtime system are in the lineage of Smalltalk and Objective-C, far away from that of C++’s. However, in C++’s Template Metaprogramming world, Concepts, added in C++20, resembles Type Classes.</p><p>Template Metaprogramming in C++ had been untyped, with template parameters being generic type variables substituted at template instantiation.</p><p>In C++20, a type system has been added to this untyped template language through concepts. They are Boolean predicates on template parameters evaluated at the point of, not after, template instantiation. The compiler will produce a clear error immediately if a programmer tries to use a template parameter that doesn’t meet the requirements of a concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported after an invalid type substitutes a generic type variable emanating from the implementation context rather than the template instantiation itself.</p><p>For instance, the first two arguments to <code>std::sort</code> must be random-access iterators. If an argument is not a random-access iterator, an error will occur when <code>std::sort</code> attempts to use it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of error information, starting with an equation that failed to compile when it tried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reported at template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances: </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;, which is satisfied by any type &#x27;T&#x27;</span><br><span class="hljs-comment">// such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles</span><br><span class="hljs-comment">// and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parameters are being introduced in a template definition, to indicate that the corresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities">https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</a></li><li><a href="https://cs.gmu.edu/~sean/stuff/java-objc.html">https://cs.gmu.edu/~sean/stuff/java-objc.html</a></li><li><a href="https://functionalcpp.wordpress.com/2013/08/16/type-classes/">https://functionalcpp.wordpress.com/2013/08/16/type-classes/</a></li><li><a href="https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses">https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</a></li><li><a href="https://wiki.haskell.org/OOP_vs_type_classes">https://wiki.haskell.org/OOP_vs_type_classes</a></li><li><a href="https://doi.org/10.1145/1411318.1411324">https://doi.org/10.1145/1411318.1411324</a></li><li><a href="https://www.foonathan.net/2021/07/concepts-structural-nominal/">https://www.foonathan.net/2021/07/concepts-structural-nominal/</a></li><li><a href="https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/">https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</a></li></ul><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><ul><li>The translation mechanism (pre-processor) proposed in this paper translates a program using type classes into an equivalent program without them at compile-time so that an existing Hindley&#x2F;Milner type system can be used afterward instead of having to develop a new, complex type system to support type classes. This is indeed a very clever mechanism. Can this be viewed as an example of <a href="https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/#Derived-Forms">desugaring</a>?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
</feed>
