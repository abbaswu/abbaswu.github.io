<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jifeng Wu&#39;s Personal Website</title>
  
  <subtitle>Jifeng Wu&#39;s Personal Website</subtitle>
  <link href="https://abbaswu.github.io/atom.xml" rel="self"/>
  
  <link href="https://abbaswu.github.io/"/>
  <updated>2023-08-24T14:04:41.628Z</updated>
  <id>https://abbaswu.github.io/</id>
  
  <author>
    <name>Jifeng Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>On Convolutional Neural Networks and Photographic Lenses</title>
    <link href="https://abbaswu.github.io/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/"/>
    <id>https://abbaswu.github.io/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/</id>
    <published>2023-08-24T07:00:00.000Z</published>
    <updated>2023-08-24T14:04:41.628Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutional neural networks</a> are <a href="https://en.wikipedia.org/wiki/Camera_lens">camera lenses</a> to a computer.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Typical_cnn.png" alt="A convolutional neural network"></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Tessar.png" alt="A camera lens"></p><p>The analogy does not stop at the point that both compress visual information:</p><ul><li>The <a href="https://www.jeremyjordan.me/convnet-architectures/">evolution of convolutional neural network architectures</a> resembles the <a href="https://en.wikipedia.org/wiki/History_of_photographic_lens_design">evolution of camera lenses</a>.</li><li>The <a href="https://analyticsindiamag.com/complete-guide-to-understanding-precision-and-recall-curves/">P-R curve</a> showing the performance of a convolutional neural network is strikingly similar to the <a href="https://www.dearsusan.net/how-to-read-mtf-curves-like-an-artist/">MTF curve</a> evaluating lens performance.</li></ul><p><img src="https://machinelearningmastery.com/wp-content/uploads/2020/01/Precision-Recall-Curve-of-a-Logistic-Regression-Model-and-a-No-Skill-Classifier2.png" alt="A P-R curve"></p><p><img src="https://photographylife.com/wp-content/uploads/2013/01/How-to-Read-MTF-Charts.png" alt="An MTF curve"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolutional_neural_network&quot;&gt;Convolutional neural networks&lt;/a&gt; are &lt;a href=&quot;https://en.wikipedia.</summary>
      
    
    
    
    <category term="Reflections" scheme="https://abbaswu.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Timetable of Well-known Conferences in Different Subdomains of Computer Science</title>
    <link href="https://abbaswu.github.io/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/"/>
    <id>https://abbaswu.github.io/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/</id>
    <published>2023-08-16T07:00:00.000Z</published>
    <updated>2023-08-16T22:03:49.788Z</updated>
    
    <content type="html"><![CDATA[<p>We have compiled a timetable of well-known conferences in different subdomains of computer science based on the <em>Class A</em> and <em>Class B</em> conferences in <a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/">“Directory of International Academic Conferences and Journals Recommended by the Chinese Computer Society”</a>. Although the precise start dates of each conference vary year by year, the provided start dates provide a general guideline on the <em>relative order</em> of the conferences throughout each year.</p><table><thead><tr><th>Name</th><th>Start Date</th><th>Subdomain</th></tr></thead><tbody><tr><td>CIDR</td><td>01&#x2F;08&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>GROUP</td><td>01&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>POPL</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VMCAI</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>HiPEAC</td><td>01&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SODA</td><td>01&#x2F;22&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>PPoPP</td><td>02&#x2F;05&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>AAAI</td><td>02&#x2F;07&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>FPGA</td><td>02&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>FAST</td><td>02&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPCA</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CGO</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NDSS</td><td>02&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>WSDM</td><td>02&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FM</td><td>03&#x2F;07&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>PERCOM</td><td>03&#x2F;13&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>FSE</td><td>03&#x2F;20&#x2F;23</td><td>Security</td></tr><tr><td>SANER</td><td>03&#x2F;21&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>DCC</td><td>03&#x2F;21&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ASPLOS</td><td>03&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>VR</td><td>03&#x2F;25&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>IUI</td><td>03&#x2F;27&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICDT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>EDBT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICDE</td><td>04&#x2F;03&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>RECOMB</td><td>04&#x2F;16&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>DATE</td><td>04&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NSDI</td><td>04&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>DASFAA</td><td>04&#x2F;17&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ETAPS</td><td>04&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>EUROCRYPT</td><td>04&#x2F;23&#x2F;23</td><td>Security</td></tr><tr><td>CHI</td><td>04&#x2F;23&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SDM</td><td>04&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>WWW</td><td>04&#x2F;30&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>I3D</td><td>05&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PKC</td><td>05&#x2F;07&#x2F;23</td><td>Security</td></tr><tr><td>EG</td><td>05&#x2F;08&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>RTAS</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IPSN</td><td>05&#x2F;09&#x2F;23</td><td>Computer Networks</td></tr><tr><td>HSCC</td><td>05&#x2F;09&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>EuroSys</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICSE</td><td>05&#x2F;14&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IPDPS</td><td>05&#x2F;15&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICPC</td><td>05&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>INFOCOM</td><td>05&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MSST</td><td>05&#x2F;22&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>S&amp;P</td><td>05&#x2F;22&#x2F;23</td><td>Security</td></tr><tr><td>ICRA</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>AAMAS</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICASSP</td><td>06&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ECSCW</td><td>06&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>NOSSDAV</td><td>06&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CAiSE</td><td>06&#x2F;12&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SoCG</td><td>06&#x2F;12&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICMR</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>EuroVis</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SPAA</td><td>06&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISCA</td><td>06&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>PLDI</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LCTES</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiSys</td><td>06&#x2F;18&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SIGMOD</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>PODS</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CVPR</td><td>06&#x2F;18&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SIGMETRICS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IWQoS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PODC</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPDC</td><td>06&#x2F;20&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>STOC</td><td>06&#x2F;20&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICS</td><td>06&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HotOS</td><td>06&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LICS</td><td>06&#x2F;26&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>DSN</td><td>06&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>EGSR</td><td>06&#x2F;28&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CADE&#x2F;IJCAR</td><td>07&#x2F;01&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICWS</td><td>07&#x2F;02&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SGP</td><td>07&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SAT</td><td>07&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SPM</td><td>07&#x2F;05&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICAPS</td><td>07&#x2F;08&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>DAC</td><td>07&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CSFW</td><td>07&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>ACL</td><td>07&#x2F;09&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>USENIX ATC</td><td>07&#x2F;10&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>OSDI</td><td>07&#x2F;10&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICALP</td><td>07&#x2F;10&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICME</td><td>07&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>COLT</td><td>07&#x2F;12&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISSTA</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ECOOP</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CAV</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>CCC</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICCBR</td><td>07&#x2F;17&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICDCS</td><td>07&#x2F;18&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SIGIR</td><td>07&#x2F;23&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICML</td><td>07&#x2F;23&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISMB</td><td>07&#x2F;23&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>CogSci</td><td>07&#x2F;26&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>UAI</td><td>07&#x2F;31&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SCA</td><td>08&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SIGKDD</td><td>08&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>SIGGRAPH</td><td>08&#x2F;06&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICPP</td><td>08&#x2F;07&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>USENIX Security</td><td>08&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>CRYPTO</td><td>08&#x2F;19&#x2F;23</td><td>Security</td></tr><tr><td>IJCAI</td><td>08&#x2F;19&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>HOT CHIPS</td><td>08&#x2F;27&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CP</td><td>08&#x2F;27&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VLDB</td><td>08&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>KR</td><td>09&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>RE</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICFP</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ESA</td><td>09&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SIGCOMM</td><td>09&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CHES</td><td>09&#x2F;10&#x2F;23</td><td>Security</td></tr><tr><td>SECON</td><td>09&#x2F;11&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ASE</td><td>09&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CODES+ISSS</td><td>09&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>EMSOFT</td><td>09&#x2F;17&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>ECML-PKDD</td><td>09&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CONCUR</td><td>09&#x2F;19&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ESORICS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>SRDS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>MobileHCI</td><td>09&#x2F;26&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ECAI</td><td>09&#x2F;30&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>MoDELS</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICSME</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiCom</td><td>10&#x2F;02&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ICCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ECCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ITC</td><td>10&#x2F;08&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>UbiComp</td><td>10&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ESEM</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ISSRE</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICNP</td><td>10&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PG</td><td>10&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CSCW</td><td>10&#x2F;14&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>RAID</td><td>10&#x2F;16&#x2F;23</td><td>Security</td></tr><tr><td>ISMAR</td><td>10&#x2F;16&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PACT</td><td>10&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CIKM</td><td>10&#x2F;21&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>OOPSLA</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SAS</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IEEE VIS</td><td>10&#x2F;22&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>MobiHoc</td><td>10&#x2F;23&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SOSP</td><td>10&#x2F;23&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IMC</td><td>10&#x2F;24&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MICRO</td><td>10&#x2F;28&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICCAD</td><td>10&#x2F;29&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ACM MM</td><td>10&#x2F;29&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>UIST</td><td>10&#x2F;29&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SoCC</td><td>10&#x2F;30&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CLUSTER</td><td>10&#x2F;31&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISS</td><td>11&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICCD</td><td>11&#x2F;06&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISWC</td><td>11&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FOCS</td><td>11&#x2F;06&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SC</td><td>11&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SenSys</td><td>11&#x2F;12&#x2F;23</td><td>Computer Networks</td></tr><tr><td>Performance</td><td>11&#x2F;14&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CCS</td><td>11&#x2F;26&#x2F;23</td><td>Security</td></tr><tr><td>ICSOC</td><td>11&#x2F;28&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>TCC</td><td>11&#x2F;29&#x2F;23</td><td>Security</td></tr><tr><td>ICDM</td><td>12&#x2F;01&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FSE&#x2F;ESEC</td><td>12&#x2F;03&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ACSAC</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>ASIACRYPT</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>CoNEXT</td><td>12&#x2F;05&#x2F;23</td><td>Computer Networks</td></tr><tr><td>RTSS</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>BIBM</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>EMNLP</td><td>12&#x2F;06&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>NeurIPS</td><td>12&#x2F;10&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>Middleware</td><td>12&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;We have compiled a timetable of well-known conferences in different subdomains of computer science based on the &lt;em&gt;Class A&lt;/em&gt; and &lt;em&gt;</summary>
      
    
    
    
    <category term="Reference" scheme="https://abbaswu.github.io/categories/Reference/"/>
    
    
  </entry>
  
  <entry>
    <title>Our Motivation for Maintaining Our Blog</title>
    <link href="https://abbaswu.github.io/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/"/>
    <id>https://abbaswu.github.io/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/</id>
    <published>2023-08-16T07:00:00.000Z</published>
    <updated>2023-08-16T22:48:29.241Z</updated>
    
    <content type="html"><![CDATA[<p>今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。</p><p>This blog is a replica of our previous “problem books” used for junior and senior high school. In the past, we would record background knowledge, problem solving ideas, and efficient algorithms. Today, we would note down understandings and insights. These are all the result of the hard work of searching and exploring, and we record them down in order to gradually accumulate our knowledge and understanding. Only the direct purpose has been changed from “preparing for a test” to “doing scientific research”.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。&lt;/p&gt;
&lt;p&gt;This blog is a replica of our previous “probl</summary>
      
    
    
    
    <category term="Reflections" scheme="https://abbaswu.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>ISSTA/ECOOP 2023 Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/</id>
    <published>2023-07-22T04:00:00.000Z</published>
    <updated>2023-07-22T22:01:01.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mon-17-Jul"><a href="#Mon-17-Jul" class="headerlink" title="Mon 17 Jul"></a>Mon 17 Jul</h1><h2 id="Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20"><a href="#Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Session 1 FUZZING at Amazon Auditorium (Gates G20)"></a>Session 1 FUZZING at Amazon Auditorium (Gates G20)</h2><h3 id="Welcome-and-Introductions"><a href="#Welcome-and-Introductions" class="headerlink" title="Welcome and Introductions"></a>Welcome and Introductions</h3><p>The following reviewing criteria for workshop papers can serve as a guide for us in writing papers:</p><ul><li>Is the problem that is addressed significant for research or practice?</li><li>Are the contributions (technique, hypothesis, or evaluation) over existing work sufficient?</li><li>Is the methodology (experimental setup or protocol) specified to validate the claims or hypotheses reasonable?</li><li>Can an independent research group reproduce the results, given the proposed methodology (experimental setup)</li></ul><p>Establish significance, novelty, and soundness, even if results do not show a large performance gain. Inspect unexpected results, such as why results are negative.</p><h3 id="Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar"><a href="#Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar" class="headerlink" title="Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/fuzzing-2023/9/Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges">Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar</a></h3><p>Why does fuzzing keep finding bugs in production software? LOTS of code is added or modified without being tested. (Covrig: A framework for the analysis of code, test, and coverage evolution in real software)</p><p>Fuzzing is not automated enough. Fuzz targets (test drivers) need to be manually specified. There is much work on improving fuzzing heuristics, but more work is required for test driver generation.</p><p>An ideal test case should benefit quality assurance, debugging aid, and documentation. They should <em>target human users</em>, and be small, fast, readable, and well-documented. However, automatically generated test suites, such as those generated by fuzzers, need to be improved in these aspects. They achieve high code coverage, excel at finding generic&#x2F;crash bugs in general software that <em>may not be very realistic</em> (<a href="https://www.manuelrigger.at/preprints/NoREC.pdf">assertion faults, crashes, undefined behavior</a>) but do not achieve high feature coverage and are poor at detecting logical bugs in software for specific domains.</p><p>On the other hand, such fuzzing makes it appropriate for use cases outside of security and software testing that <em>require a novel search to find diverse failing inputs, corner cases, and loopholes</em>, such as ML models and even investigating legal documents (Rohan).</p><p>Developers tend to be <em>afraid</em> of using fuzzers as they don’t understand them or think of them as security tools, in contrast to a standard testing tool. Allowing fuzzing to operate at a higher declarative level and combining fuzzing with domain-specific specification languages would be beneficial.</p><p>Sound fuzzer evaluation is challenging.</p><ul><li>Well-designed experiment methodology.</li><li>Huge variance due to randomness, demanding substantial computation resources (e.g., repeat 20x, 24 hours, X fuzzers, Y programs)</li></ul><h1 id="Thu-20-Jul"><a href="#Thu-20-Jul" class="headerlink" title="Thu 20 Jul"></a>Thu 20 Jul</h1><h2 id="Keynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynotes at Amazon Auditorium (Gates G20)"></a>Keynotes at Amazon Auditorium (Gates G20)</h2><p>Paper Reviewing Statistics</p><ul><li>44&#x2F;97 papers accepted</li><li>Round 1: 40 submitted, 17 accepted, 9 rejected, 14 resubmit</li><li>Round 2: 57 submitted (11 resubmissions), 27 accepted, 18 rejected, 12 resubmit</li></ul><h3 id="Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou"><a href="#Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou" class="headerlink" title="Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/7/Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities">Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou</a></h3><ul><li>Think of an exciting question, such as various language features, and look into it as a research question (<a href="https://link.springer.com/chapter/10.1007/3-540-45332-6_3">An Abstract Model of Java Dynamic Linking and Loading</a>, <a href="https://spiral.imperial.ac.uk/bitstream/10044/1/705/1/A%20flexible%20model%20for%20dynamic.pdf">A Flexible Model for Dynamic Linking in Java and C#</a>).</li><li>The key for program verification is to <em>develop formal models for a (subset) of a language</em>, make it small and simple, and gradually expand (<a href="https://spiral.imperial.ac.uk/handle/10044/1/95175">Java is type safe – probably</a>).</li><li>Actively start collaborations (<a href="https://dl.acm.org/doi/10.1145/582419.582447">Ownership, encapsulation and the disjointness of type and effect</a>).</li></ul><h2 id="ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10"><a href="#ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10" class="headerlink" title="ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)"></a>ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)</h2><h3 id="June-A-Type-Testability-Transformation-for-Improved-ATG-Performance"><a href="#June-A-Type-Testability-Transformation-for-Improved-ATG-Performance" class="headerlink" title="June: A Type Testability Transformation for Improved ATG Performance"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/15/June-A-Type-Testability-Transformation-for-Improved-ATG-Performance">June: A Type Testability Transformation for Improved ATG Performance</a></h3><p>Automatically generating unit tests is a powerful approach to exercising complex software. However, existing methods frequently fail to deliver appropriate input values, like strings, capable of <em>bypassing domain-specific sanity checks</em>. For instance, Randoop commonly uses “hi!” as a value. (<a href="https://ieeexplore.ieee.org/abstract/document/8115617">Saying ‘Hi!’ is not enough: Mining inputs for effective test generation</a>)</p><h3 id="Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests"><a href="#Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests" class="headerlink" title="Pattern-Based Peephole Optimizations with Java JIT Tests"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/112/Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests">Pattern-Based Peephole Optimizations with Java JIT Tests</a></h3><p>To demonstrate the advantage of JOG over hand-written peephole optimizations in terms of <em>ease of writing</em>, existing hand-written peephole optimizations are compared, and <em>number of characters and number of lines</em> are used as metrics.</p><h3 id="GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper"><a href="#GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper" class="headerlink" title="GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/54/GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper-">GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)</a></h3><p>The tool has been implemented as <a href="https://tinyurl.com/issta-gpuharbor"><em>a Web app using WebGPU to access the GPU</em></a>, allowing the audience to <em>try it out during the talk</em>.</p><h2 id="Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)"></a>Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)</h2><h3 id="Machine-Learning-for-Software-Engineering"><a href="#Machine-Learning-for-Software-Engineering" class="headerlink" title="Machine Learning for Software Engineering"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/1/Machine-Learning-for-Software-Engineering">Machine Learning for Software Engineering</a></h3><p>What underlies the success of machine learning for software engineering?</p><ul><li><a href="https://people.inf.ethz.ch/suz/publications/natural.pdf">The naturalness of code</a>. <code>i++</code> is predictable given <code>for (i = 0; i &lt; 10; </code>, and <code>backward()</code> is predictable given <code>loss.</code></li><li><a href="https://dl.acm.org/doi/10.1145/3338906.3340458">The bimodality of code, or code contains natural language</a>. Q. How do I get a platform-dependent new line character? A. public static String get<em>Platform</em>LineSeparator() { return System.getProperty(“<em>line</em>.separator”); }</li><li><a href="http://janvitek.org/events/NEU/7580/papers/more-papers/oopsla16-dt.pdf">Code has predictable properties</a>. Given <code>... = x.weight * x.height</code>, what is the <code>???</code> in <code>... = y.weight * ???</code>?</li><li>Large amount of data (GitHub repos with code, version history, and commit logs, StackOverflow questions and answers, internal corpora in companies, etc.)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mon-17-Jul&quot;&gt;&lt;a href=&quot;#Mon-17-Jul&quot; class=&quot;headerlink&quot; title=&quot;Mon 17 Jul&quot;&gt;&lt;/a&gt;Mon 17 Jul&lt;/h1&gt;&lt;h2 id=&quot;Session-1-FUZZING-at-Amazon-Audit</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>Syncing a Local Directory With a Remote Directory via rsync</title>
    <link href="https://abbaswu.github.io/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/"/>
    <id>https://abbaswu.github.io/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/</id>
    <published>2023-07-11T07:00:00.000Z</published>
    <updated>2023-07-11T05:49:44.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync"><a href="#Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync" class="headerlink" title="Syncing a Local Directory With a Remote Directory via rsync"></a>Syncing a Local Directory With a Remote Directory via rsync</h1><p><code>rsync</code> is a powerful utility for efficiently synchronizing directories between a local computer and a remote server. It achieves this synchronization by comparing file modification times and sizes, utilizing delta encoding, and optionally employing data compression to minimize network usage.</p><p>To successfully synchronize directories between two systems using rsync, you need to have rsync installed on both the local and remote machines. Additionally, the remote machine should be accessible from the local machine via SSH, enabling the local machine to invoke the remote machine’s rsync and determine which parts of local files need to be transferred.</p><p>The rsync command-line syntax is similar to that of cp and scp. The following command-line options are commonly used:</p><ul><li><code>-e</code>: Specifies the command to establish an SSH connection before the <code>username@domain</code> section. This option allows you to <em>customize SSH behavior</em>, such as using specific ports or providing a PEM file (e.g., <code>ssh -i SSH-key.pem</code>).</li><li><code>-r</code> (recursive): Used for syncing directories, similar to <code>cp</code> and <code>scp</code>.</li><li><code>-v</code> (verbose): Lists files being transferred during synchronization.</li><li><code>-z</code>: Enables additional data compression for improved network usage.</li></ul><p>When specifying the source directory and the destination directory, <em>keep the following points in mind</em>:</p><ul><li>A local directory can be represented using either a relative or absolute path.</li><li>A remote directory is represented using the <code>username@domain:&lt;absolute path on the remote machine&gt;</code> notation, similar to <code>scp</code>.</li><li>A source directory <em>must</em> end with a trailing slash.</li><li>A destination directory <em>must not</em> end with a trailing slash.</li></ul><p>Here’s an example that illustrates how to sync the local directory <code>TypeWriter_dataset</code> to the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> with additional data compression. This assumes connecting to <code>ubuntu@104.171.203.254</code> via the command <code>ssh -i SSH-key.pem</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>TypeWriter_dataset/ \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>Conversely, to sync the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> to the local directory <code>TypeWriter_dataset</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset/ \<br>TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>References:</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories">https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories</a></li><li><a href="https://en.wikipedia.org/wiki/Rsync">https://en.wikipedia.org/wiki/Rsync</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync&quot;&gt;&lt;a href=&quot;#Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync&quot; </summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
  <entry>
    <title>Task Parallelism and Data Parallelism Thread Pools</title>
    <link href="https://abbaswu.github.io/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/"/>
    <id>https://abbaswu.github.io/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/</id>
    <published>2023-07-11T07:00:00.000Z</published>
    <updated>2023-07-11T16:29:59.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Task-Parallelism-and-Data-Parallelism-Thread-Pools"><a href="#Task-Parallelism-and-Data-Parallelism-Thread-Pools" class="headerlink" title="Task Parallelism and Data Parallelism Thread Pools"></a>Task Parallelism and Data Parallelism Thread Pools</h1><p>Parallel computing environments often involve distributing code across multiple processors for efficient execution. Two common paradigms of parallelization are task parallelism and data parallelism.</p><p>Task parallelism focuses on distributing encapsulated tasks that can execute the same or different code on the same or different data across different processors. On the other hand, data parallelism involves performing the same operations on different subsets of the same data on multiple processors.</p><p>Both task parallelism and data parallelism can be implemented using thread pools. This article explores simple implementations of thread pools for task parallelism and data parallelism scenarios.</p><h2 id="Task-Parallelism-Thread-Pool"><a href="#Task-Parallelism-Thread-Pool" class="headerlink" title="Task Parallelism Thread Pool"></a>Task Parallelism Thread Pool</h2><p>The following code demonstrates a simple thread pool for task parallelism. It utilizes a task queue to distribute <em>tasks</em>, which are represented as <code>Callable[[], None]</code> objects (callables accepting no parameters and returning None) across multiple threads. Each thread continuously fetches a task from the task queue and executes it. If an exception occurs during task execution, a traceback is printed, and a new task is obtained from the task queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = task_queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            task: <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span> = self.task_queue.get()<br><br>            <span class="hljs-keyword">if</span> task <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                task()<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_task_parallelism_thread_pool</span>(<span class="hljs-params">tasks: Iterable[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]], num_threads: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create task queue.</span><br>    task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share a task queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = TaskParallelismThreadPoolThread(task_queue)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all tasks.</span><br>    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>        task_queue.put(task)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once all tasks are finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        task_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To use this task parallelism thread pool, provide it with a collection of <em>tasks</em> (represented as <code>Callable[[], None]</code> objects) and the desired number of threads. The tasks will be executed in parallel by the thread pool until all tasks have finished.</p><h2 id="Data-Parallelism-Thread-Pool"><a href="#Data-Parallelism-Thread-Pool" class="headerlink" title="Data Parallelism Thread Pool"></a>Data Parallelism Thread Pool</h2><p>The following code showcases a simple thread pool for data parallelism. It distributes data as <em>argument tuples</em> across multiple threads using an <em>argument tuple queue</em>. Each thread is assigned an <em>operation</em> created using an <em>operation factory</em>. After <em>executing an operation on an argument tuple</em>, the resulting return value is passed to a return value callback.</p><p>As with the task parallelism thread pool, all threads in the thread pool are always busy by getting a new argument tuple whenever its operation finishes execution on a previous argument tuple. Should an exception be raised when executing an operation on an argument tuple, a traceback is printed, and a new argument tuple is taken from the shared argument tuple queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>], argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>], return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>] = operation<br>        self.argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = argument_tuple_queue<br>        self.return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = return_value_callback<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            argument_tuple: <span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span> = self.argument_tuple_queue.get()<br><br>            <span class="hljs-keyword">if</span> argument_tuple <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                self.return_value_callback(self.operation(*argument_tuple))<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_data_parallelism_thread_pool</span>(<span class="hljs-params"></span><br><span class="hljs-params">    operation_factory: <span class="hljs-type">Callable</span>[[], <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>]],</span><br><span class="hljs-params">    argument_tuples: Iterable[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...]],</span><br><span class="hljs-params">    return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = <span class="hljs-keyword">lambda</span> return_value: <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    num_threads: <span class="hljs-built_in">int</span> = multiprocessing.cpu_count(<span class="hljs-params"></span>)</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create argument tuple queue.</span><br>    argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share an argument tuple queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = DataParallelismThreadPoolThread(operation_factory(), argument_tuple_queue, return_value_callback)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all argument tuples.</span><br>    <span class="hljs-keyword">for</span> argument_tuple <span class="hljs-keyword">in</span> argument_tuples:<br>        argument_tuple_queue.put(argument_tuple)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once execution on all argument tuples have finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        argument_tuple_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To utilize the data parallelism thread pool, provide an <em>operation factory</em>, a collection of argument tuples, and a return value callback. The operation factory, when called, creates operations represented as <code>Callable[[...], Any]</code> objects, accepting arguments from an <em>argument tuple</em> and returning a value. Each thread in the thread pool will execute these operations on the provided argument tuples. Any return values will be passed to the return value callback, which can be customized according to your needs. The data parallelism thread pool will process the argument tuples in parallel until all tuples have been processed. </p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Say that we want to sleep for $0, 1, 2, \dots, N - 1$ seconds before printing the number of seconds slept in parallel, where $N$ is the number of threads in our thread pool.</p><p>We can adopt a task parallelism approach, where we <em>create tasks which encapsulate how long they sleep</em>, and add them to a task parallelism thread pool:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_task</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>        <span class="hljs-keyword">nonlocal</span> sleep_time<br>        time.sleep(sleep_time)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> task<br><br><br>run_simple_task_parallelism_thread_pool(<br>    (create_task(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    N<br>)<br></code></pre></td></tr></table></figure><p>As an alternative, we can also use a data parallelism approach, in which <em>operations</em> accept the number of seconds they sleep from <em>argument tuples</em>, sleep for those time durations, and return those time durations before <em>return value callbacks</em> operate on the return values and print those time durations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    time.sleep(sleep_time)<br>    <span class="hljs-keyword">return</span> sleep_time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation_factory</span>() -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-built_in">int</span>], <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> operation<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_value_callback</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br><br><br>run_simple_data_parallelism_thread_pool(<br>    operation_factory,<br>    ((i,) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    return_value_callback,<br>    N<br>)<br></code></pre></td></tr></table></figure><p>Running both thread pools takes the same time and produces the same output.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.m.wikipedia.org/wiki/Task_parallelism">https://en.m.wikipedia.org/wiki/Task_parallelism</a></li><li><a href="https://en.wikipedia.org/wiki/Data_parallelism">https://en.wikipedia.org/wiki/Data_parallelism</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Task-Parallelism-and-Data-Parallelism-Thread-Pools&quot;&gt;&lt;a href=&quot;#Task-Parallelism-and-Data-Parallelism-Thread-Pools&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Batch Killing Processes Looked up Through ps -aux | grep &lt;process_name&gt;</title>
    <link href="https://abbaswu.github.io/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/"/>
    <id>https://abbaswu.github.io/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/</id>
    <published>2023-06-10T04:00:00.000Z</published>
    <updated>2023-06-10T18:33:14.919Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we acidentally spawn a series of processes, and we want to kill them. We can look up their pid’s through <code>ps -aux | grep &lt;process_name&gt;</code> (as shown below) and manually run the <code>kill</code> command to kill each process by providing its pid, but <em>how can we automate this tedious task</em>?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.7  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.3  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br>jifengwu   59564  0.0  0.0  19612  2516 pts/2    S+   13:45   0:00 grep --color=auto pipreqs<br></code></pre></td></tr></table></figure><p>First, we can add <code>grep -v grep</code> to the pipe to <em>hide the grep processes from the output</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.6  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.2  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br></code></pre></td></tr></table></figure><p>Then, we can add <code>awk &#39;&#123;print $2&#125;&#39;</code> to the pipe to invoke <code>awk</code> to <em>trim the second space-delimited component</em> (which in this case is the pid). Now we have a list of the pid’s of the processes we want to kill:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>58180<br>58205<br>58224<br>58267<br>58272<br>58282<br>58295<br>58659<br></code></pre></td></tr></table></figure><p>Finally, we can iterate over the pid’s in a for-loop to kill them.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> $(ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>&gt; <span class="hljs-keyword">do</span><br>&gt; <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$pid</span><br>&gt; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>References</p><ul><li><a href="https://www.baeldung.com/linux/grep-exclude-ps-results">https://www.baeldung.com/linux/grep-exclude-ps-results</a></li><li><a href="https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command">https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes we acidentally spawn a series of processes, and we want to kill them. We can look up their pid’s through &lt;code&gt;ps -aux | grep &amp;</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>Parsing Command-line Options in Shell Scripts Using `getopts`</title>
    <link href="https://abbaswu.github.io/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/"/>
    <id>https://abbaswu.github.io/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/</id>
    <published>2023-06-09T04:00:00.000Z</published>
    <updated>2023-06-09T19:00:27.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-getopts"><a href="#What-is-getopts" class="headerlink" title="What is getopts"></a>What is <code>getopts</code></h1><p>getopts is a built-in Unix shell command for parsing command-line options. It is a wrapper around <code>getopt</code>, a POSIX C library function used to parse command-line options of the Unix&#x2F;POSIX style. Specifically:</p><ul><li>Options are <em>single-character alphanumerics</em> preceded by a - (hyphen-minus) character, i.e. <code>-a</code>. <code>-b</code>, <code>-c</code>.</li><li>Options can take an argument or none.</li><li>Multiple options can be chained together, as long as the non-last ones are not argument-taking. If <code>-a</code> and <code>-b</code> take no arguments while <code>-c</code> takes an argument, <code>-abc foo</code> is the same as <code>-a -c -e foo</code>, but <code>-bca</code> is not the same as <code>-b -c a</code> due to the preceding rule.</li><li>When an option takes an argument, this can be in the same token or in the next one. In other words, if <code>-c</code> takes an argument, <code>-cfoo</code> is the same as <code>-c foo</code>.</li></ul><h1 id="optstring‘s"><a href="#optstring‘s" class="headerlink" title="optstring‘s"></a><code>optstring</code>‘s</h1><p>Both getopt and getopts specifies specify options using a <em>optstring</em>. Specifically:</p><ul><li><em>Begin an optstring with <code>:</code>.</em></li><li>To specify an option that <em>does not take an argument</em>, append its name to the optstring.</li><li>To specify an option that <em>takes an argument</em>, append its name <em>and <code>:</code></em> to the optstring.</li></ul><p>For example, the optstring that specifies two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments is <code>:abc:d:</code>.</p><h1 id="Using-getopts-in-a-Shell-Script"><a href="#Using-getopts-in-a-Shell-Script" class="headerlink" title="Using getopts in a Shell Script"></a>Using <code>getopts</code> in a Shell Script</h1><p>In Shell scripts, <code>getopts</code> invoked with an <code>optstring</code> is used with a <code>while</code>-loop to parse command-line options.</p><p>Say that our Shell script <code>test_getopts.sh</code> accepts two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments. Our Shell script can look like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;:abc:d:&#x27;</span> name<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$name</span> <span class="hljs-keyword">in</span><br>        a)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -a&quot;</span><br>            ;;<br>        b)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -b&quot;</span><br>            ;;<br>        c)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -c with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        d)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -d with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        :)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument&quot;</span><br>            ;;<br>        ?)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided an invalid option -<span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>Here, <code>getopts</code> is invoked with the <code>optstring</code> for specifying our options, <code>:abc:d:</code>. In each iteration of the <code>while</code>-loop, the <em>next option</em> is parsed and the Shell variables <code>name</code> and <code>OPTARG</code> are set to different values based on different conditions we may encounter.</p><ul><li>If a <em>valid</em> option is detected and that option <em>does not take an argument</em>, the Shell variable <code>name</code> is set to the name of the option.</li><li>If a <em>valid</em> option is detected and that option <em>takes an argument</em>:<ul><li>If we have provided an argument, the Shell variable <code>name</code> is set to the name of the option, and the Shell variable <code>OPTARG</code> is set to the value of the argument.</li><li>If we <em>haven’t provided an argument</em>, <em>the Shell variable <code>name</code> is set to <code>:</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul></li><li>If an <em>invalid</em> option is detected, <em>the Shell variable <code>name</code> is set to <code>?</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul><p>We can see <code>getopts</code> at work by providing different command-line options when invoking our Shell script.</p><p>Providing no command-line options:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a -a<br>You provided option -a<br>You provided option -a<br>$ sh test_getopts.sh -aa<br>You provided option -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo<br>You provided option -c with argument foo<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code> <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo -c bar<br>You provided option -c with argument foo<br>You provided option -c with argument bar<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument without an argument:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c<br>Option -c requires an argument<br></code></pre></td></tr></table></figure><p>Providing an invalid argument <code>-e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -e<br>You provided an invalid option -e<br></code></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/Getopts">https://en.wikipedia.org/wiki/Getopts</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html">https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html</a></li><li><a href="https://en.wikipedia.org/wiki/Getopt">https://en.wikipedia.org/wiki/Getopt</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html">https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-getopts&quot;&gt;&lt;a href=&quot;#What-is-getopts&quot; class=&quot;headerlink&quot; title=&quot;What is getopts&quot;&gt;&lt;/a&gt;What is &lt;code&gt;getopts&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;getop</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>PNW PLSE Workshop 2023 Observations and Gained Insights</title>
    <link href="https://abbaswu.github.io/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/"/>
    <id>https://abbaswu.github.io/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/</id>
    <published>2023-05-10T04:00:00.000Z</published>
    <updated>2023-07-24T22:18:02.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-30-Talks"><a href="#10-30-Talks" class="headerlink" title="10:30 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.5ebiaujbjmrk">10:30 - Talks</a></h1><h2 id="Linear-Types-for-Systems-Verification"><a href="#Linear-Types-for-Systems-Verification" class="headerlink" title="Linear Types for Systems Verification"></a><a href="https://drive.google.com/file/d/1Bv4_PnXXZfx6egG4htZNfNYES_gFhfR7/view?usp=share_link">Linear Types for Systems Verification</a></h2><p>It is a good idea to embed verification information in type system of a programming language.</p><h2 id="Verified-Program-Construction"><a href="#Verified-Program-Construction" class="headerlink" title="Verified Program Construction"></a><a href="https://drive.google.com/file/d/14XdepAsHM1ts-tp21UXAqMOEbsB8mkHG/view?usp=share_link">Verified Program Construction</a></h2><ul><li>Program verification is hard per se.<ul><li>Proofs are brittle.</li><li>Existing techniques provide poor support for commonly-used datatypes such as vectors, sets, and maps.</li><li>Partial verification is important due to the complexity of programs.</li></ul></li><li>Program verification for general-purpose programming languages and frameworks for general-purpose programming languages is tedious compared to focusing on a DSL.</li><li>The direction for program verification should be <em>verified program construction</em>.</li><li>Be aware of the pain point you are trying to solve and the day-to-day engineering reality in real-world software development.</li></ul><h1 id="13-00-Keynote-Patrick-Lam"><a href="#13-00-Keynote-Patrick-Lam" class="headerlink" title="13:00 - Keynote: Patrick Lam"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.4alvulgrtjyi">13:00 - Keynote: Patrick Lam</a></h1><h2 id="Hot-Takes-on-Machine-Learning-for-Program-Analysis"><a href="#Hot-Takes-on-Machine-Learning-for-Program-Analysis" class="headerlink" title="Hot Takes on Machine Learning for Program Analysis"></a><a href="https://drive.google.com/file/d/1cfncXsqGw9kFHwi0BBE-VO7JkA1qY8eO/view?usp=share_link">Hot Takes on Machine Learning for Program Analysis</a></h2><ul><li>A crucial step in Machine Learning for Program Analysis is deciding what things could be used as features based on experience.</li><li>Generative AI can replace junior developers doing <em>raw coding</em> instead of <em>contextual work</em>.</li></ul><h1 id="13-30-Lightning-Talks"><a href="#13-30-Lightning-Talks" class="headerlink" title="13:30 - Lightning Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.m58uw7yzsis">13:30 - Lightning Talks</a></h1><h2 id="Lakeroad-Hardware-Compilation-via-Program-Synthesis"><a href="#Lakeroad-Hardware-Compilation-via-Program-Synthesis" class="headerlink" title="Lakeroad: Hardware Compilation via Program Synthesis"></a><a href="https://drive.google.com/file/d/165w2NcaRdSk_gy80TkHSQDb1z3yLnxyZ/view?usp=share_link">Lakeroad: Hardware Compilation via Program Synthesis</a></h2><p>If you don’t use DSLs, FPGAs bring crappy performance running programs in general-purpose programming languages.</p><h2 id="Checked-C"><a href="#Checked-C" class="headerlink" title="Checked C"></a><a href="https://drive.google.com/file/d/1e8T4sz96FRtYDzqdxMM2AFEf7Cfutn7z/view?usp=share_link">Checked C</a></h2><p>Retrofitting verification into non-verified languages is an arduous task.</p><h1 id="15-15-Talks"><a href="#15-15-Talks" class="headerlink" title="15:15 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.kl2qgin09esc">15:15 - Talks</a></h1><h2 id="An-Anti-Capitalist-Multicultural-Accessible-Programming-Language"><a href="#An-Anti-Capitalist-Multicultural-Accessible-Programming-Language" class="headerlink" title="An Anti-Capitalist, Multicultural, Accessible Programming Language"></a><a href="https://drive.google.com/file/d/1OD9XlNAPLXTtYFzFY2mpRA-gCoLWFCic/view?usp=share_link">An Anti-Capitalist, Multicultural, Accessible Programming Language</a></h2><p>An event-based language enabling time-traveling to all points in program execution history would greatly benefit debugging.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-30-Talks&quot;&gt;&lt;a href=&quot;#10-30-Talks&quot; class=&quot;headerlink&quot; title=&quot;10:30 - Talks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/cs.washington.edu</summary>
      
    
    
    
    <category term="Conferences" scheme="https://abbaswu.github.io/categories/Conferences/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Sized Types</title>
    <link href="https://abbaswu.github.io/2023/03/25/Paper-Review-Sized-Types/"/>
    <id>https://abbaswu.github.io/2023/03/25/Paper-Review-Sized-Types/</id>
    <published>2023-03-25T07:00:00.000Z</published>
    <updated>2023-04-11T22:20:17.304Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/237721.240882">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>You can check the presentation that I made for this paper <a href="https://github.com/abbaswu/sized-types-presentation">in this GitHub repository</a>.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Although I liked the idea of Sized Types proposed in the motivation, this paper was difficult for me to grasp, and after spending days reading it, there are still sections which I am confused about. I have summarized my understanding of this paper in the uploaded PDF, and I will discuss my thoughts here.</p><ol><li>I really like the idea of Sized Types that they can be used to prove data computations terminate and codata computations are productive using the same formalization.</li><li>Apparently, the requirement that size indexes in Sized Types be natural number size variables, the special index $\omega$, or linear functions of the size variables facilitates generating constraints in the type checking algorithm that can be solved by a constraint solver (e.g. an SMT solver). Although this may lead to overapproximation in certain scenarions (for example, representing the type of the factorial function), over all, I consider it to be a good balance point between expressiveness and usability.</li><li>3.2 Semantics of Expressions, 3.3 The Universe of Types, 3.4 Continuity and Ordinals, 3.5 Semantics of Types, and 3.7 $\omega$-Types used a lot of concepts before properly introducing them, and I couldn’t understand this part.</li><li>The example presented to demonstrate the type checking algorithm involves generating constraints. However, only the generated constraints are presented, while how the constraints are generated and what each symbol in the constraints stand for with regards to the aforementioned AST nodes is unknown.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Refinement Types</title>
    <link href="https://abbaswu.github.io/2023/03/19/Paper-Review-Refinement-Types/"/>
    <id>https://abbaswu.github.io/2023/03/19/Paper-Review-Refinement-Types/</id>
    <published>2023-03-19T07:00:00.000Z</published>
    <updated>2023-03-20T03:56:54.982Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://arxiv.org/abs/2010.07763">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This paper presents a clear and organized guide to refinement type systems by condensing the extensive literature on the topic and demonstrating the implementation of a refinement type checker. It first states the motivation for requirement types, a history of requirement types, and refinement logic, which is a logic system used in the proposed refinement type checker. The rest of the paper shows the implementation of a refinement type checker through a series of programming languages, beginning with simply-typed lambda calculus and incrementally adding additional features. This approach is influenced by the nanopass framework, which is used to teach compilation.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Honestly, I have found the section on implementing a refinement type checker through a series of programming languages challenging to understand. Still, I have understood much of the paper before that. Therefore, I will summarize my gained insights and state questions that I have in mind.</p><h2 id="Insights"><a href="#Insights" class="headerlink" title="Insights"></a>Insights</h2><h3 id="Refinement-Types-as-Subtypes"><a href="#Refinement-Types-as-Subtypes" class="headerlink" title="Refinement Types as Subtypes"></a>Refinement Types as Subtypes</h3><p>Type systems are the most commonly employed technique for ensuring the correct behavior of software. However, even well-typed programs can contain various bugs, such as buffer overflows, divisions by zero, logic bugs, and out-of-bounds array accesses. One approach to address this issue is to enhance a language’s types with <strong>subtypes that limit the range of valid values with predicates</strong>, such as ‘non-negative integer’ from ‘integer.’ These subtypes are known as ‘refinement types.’ They enable developers to write precise contracts for valid inputs and outputs of functions and specify the correctness properties. This brings formal verification into mainstream software development.</p><h3 id="Refinement-Logic-and-How-it-Maps-to-SMT-Expressions"><a href="#Refinement-Logic-and-How-it-Maps-to-SMT-Expressions" class="headerlink" title="Refinement Logic and How it Maps to SMT Expressions"></a>Refinement Logic and How it Maps to SMT Expressions</h3><p>I was partically impressed by refinement logic, the logic system used in the proposed refinement type checker, as it is both expressive and easy to be verified using an SMT solver.</p><p>Refinement logic consists of two parts: predicates and constraints. </p><p>Predicates are drawn from the quantifier-free fragment of linear arithmetic and uninterpreted functions (commonly used in SMT solvers), and may include boolean and integer literals, boolean and integer variables, arithmetic operators, boolean operators, comparisons, the ‘if-then-else’ expression, and uninterpreted functions (resembling those in <code>z3</code>).</p><p>Predicates are the building block of constraints, which are generated from refinement type checking. A constraint is either a predicate, an implication $\forall t: T : p \Rightarrow c$ which states that for each term $t$ of type $T$, if the predicate $p$ holds then another constraint $c$ must be true, or a conjunction of two other constraints.</p><p>Constraints can be verified by <strong>checking whether there is no satisfying assignment for the negated constraint</strong>. In this process, they can be converted into SMT expressions in a straightforward way. </p><p>For example, the constraint presented in the paper</p><p>$$c &#x3D; \forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x)$$</p><p>can be negated as follows:</p><p>$$\neg c$$</p><p>$$\neg (\forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \neg (\forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \neg (\forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land \neg (0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land (0 &gt; i \lor i \ge length(x))$$</p><p>We can verify the negated constraint using an SMT solver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> z3<br><br>In [<span class="hljs-number">2</span>]: L = z3.Int(<span class="hljs-string">&#x27;L&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: n = z3.Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>In [<span class="hljs-number">4</span>]: i = z3.Int(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br>In [<span class="hljs-number">5</span>]: solver = z3.Solver()<br><br>In [<span class="hljs-number">6</span>]: solver.add(<span class="hljs-number">0</span> &lt;= L)<br><br>In [<span class="hljs-number">7</span>]: solver.add(n == L)<br><br>In [<span class="hljs-number">8</span>]: solver.add(i == n - <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">9</span>]: solver.add(z3.Or(i &lt; <span class="hljs-number">0</span>, i &gt; L))<br><br>In [<span class="hljs-number">10</span>]: check_sat_result = solver.check()<br><br>In [<span class="hljs-number">11</span>]: check_sat_result<br>Out[<span class="hljs-number">11</span>]: sat<br><br>In [<span class="hljs-number">12</span>]: model_ref = solver.model()<br><br>In [<span class="hljs-number">13</span>]: model_ref<br>Out[<span class="hljs-number">13</span>]: [i = -<span class="hljs-number">1</span>, L = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>Note that <code>check_sat_result</code> is <code>sat</code> and we can find a satisfying assignment for $\neg c$: $i &#x3D; -1, length(x) &#x3D; 0, n &#x3D; 0$. This means that the original constraint $c$ is invalid.</p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>Although the concept of refinement types is neat, what is the burden on programmers of writing refinement types that describe legal inputs and outputs of functions? This is a critical aspect to determine whether refinement types can bring formal verification into mainstream software development.</p><p>Furthermore, constraints in the proposed refinement logic generated by the refinement type checker can be negated and converted into SMT expressions. However, what is the feasibility of doing such checking for large-scale programs? Would it become unscalable?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Rapidly Prototyping Presentations Using Markdown with Marp</title>
    <link href="https://abbaswu.github.io/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/"/>
    <id>https://abbaswu.github.io/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/</id>
    <published>2023-03-17T07:00:00.000Z</published>
    <updated>2023-04-11T22:24:04.224Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>In the need to create a <em>decent</em>, <em>academic</em> presentation <em>fast</em>?</li><li>LaTeX overly verbose?</li><li>No time to spend on adjusting style?</li><li>Have notes written in Markdown?</li></ul><p>The solution: create presentations with Markdown using Marp!</p><p>Source code and compiled PDF of the presentation for “Rapidly Prototyping Presentations Using Markdown with Marp” presented at the SPL Workshop 2023W2 is available <a href="https://github.com/abbaswu/rapidly-prototyping-presentations-using-markdown-with-marp">in this GitHub repository</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;In the need to create a &lt;em&gt;decent&lt;/em&gt;, &lt;em&gt;academic&lt;/em&gt; presentation &lt;em&gt;fast&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;LaTeX overly verbose?&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: How to make ad-hoc polymorphism less ad-hoc</title>
    <link href="https://abbaswu.github.io/2023/03/06/Paper-Review-How-to-make-ad-hoc-polymorphism-less-ad-hoc/"/>
    <id>https://abbaswu.github.io/2023/03/06/Paper-Review-How-to-make-ad-hoc-polymorphism-less-ad-hoc/</id>
    <published>2023-03-06T08:00:00.000Z</published>
    <updated>2023-03-06T18:35:38.150Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/75277.75283">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The paper first defines and compares <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">parametric and ad-hoc polymorphism</a> and points out the limitations of existing implementations of ad-hoc polymorphism. It then presents type classes that extend the Hindley&#x2F;Milner type system to support ad-hoc polymorphism as a remedy to these limitations and explains how to translate a program using type classes into an equivalent program without them at compile-time. Furthermore, it showcases the power of type classes and the translation mechanism using the example of a polymorphic equality operation. Finally, it explores subclassing of type classes.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>The paper is easy to follow as it is written in a lucid manner and gives an informal introduction to type classes and its translation rules. Furthermore, the motivation for type classes and how it connects to object-oriented programming languages is explicitly stated in the paper. I have further looked up some material following these lines. I will summarize them before presenting some questions and comments.</p><h2 id="My-Takeaways"><a href="#My-Takeaways" class="headerlink" title="My Takeaways"></a>My Takeaways</h2><h3 id="Different-Types-of-Polymorphism"><a href="#Different-Types-of-Polymorphism" class="headerlink" title="Different Types of Polymorphism"></a>Different Types of Polymorphism</h3><p>See <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">my Paper Review for “Types and Programming Languages” Chapter 15 and Chapter 16</a>.</p><h3 id="Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C"><a href="#Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C" class="headerlink" title="Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#"></a>Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#</h3><p>An interface is an abstract type used to provide a collection of methods compliant classes must implement in the Java (and C#) programming languages.</p><p>Java is mostly influenced by Objective-C, and Java’s interfaces are adaptations of the protocols in Objective-C and Smalltalk, which in turn is based on protocols in networking, notably the ARPANet.</p><p>Although Type Classes and Interfaces do not share a common lineage, it is straightforward to implement Type Classes with <em>Generic Interfaces</em> whose Generic Parameters should be Classes that comply with the Interface.</p><p>For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented in Java using the following Generic Interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eq</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(T other)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Type-Classes-and-Concepts-in-C"><a href="#Type-Classes-and-Concepts-in-C" class="headerlink" title="Type Classes and Concepts in C++"></a>Type Classes and Concepts in C++</h3><p>Although Java’s syntax resembles C++’s, its semantics of late-binding, single inheritance, class objects, and an extensive runtime system are in the lineage of Smalltalk and Objective-C, far away from that of C++’s. However, in C++’s Template Metaprogramming world, Concepts, added in C++20, resembles Type Classes.</p><p>Template Metaprogramming in C++ had been untyped, with template parameters being generic type variables substituted at template instantiation.</p><p>In C++20, a type system has been added to this untyped template language through concepts. They are Boolean predicates on template parameters evaluated at the point of, not after, template instantiation. The compiler will produce a clear error immediately if a programmer tries to use a template parameter that doesn’t meet the requirements of a concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported after an invalid type substitutes a generic type variable emanating from the implementation context rather than the template instantiation itself.</p><p>For instance, the first two arguments to <code>std::sort</code> must be random-access iterators. If an argument is not a random-access iterator, an error will occur when <code>std::sort</code> attempts to use it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of error information, starting with an equation that failed to compile when it tried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reported at template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances: </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;, which is satisfied by any type &#x27;T&#x27;</span><br><span class="hljs-comment">// such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles</span><br><span class="hljs-comment">// and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parameters are being introduced in a template definition, to indicate that the corresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities">https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</a></li><li><a href="https://cs.gmu.edu/~sean/stuff/java-objc.html">https://cs.gmu.edu/~sean/stuff/java-objc.html</a></li><li><a href="https://functionalcpp.wordpress.com/2013/08/16/type-classes/">https://functionalcpp.wordpress.com/2013/08/16/type-classes/</a></li><li><a href="https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses">https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</a></li><li><a href="https://wiki.haskell.org/OOP_vs_type_classes">https://wiki.haskell.org/OOP_vs_type_classes</a></li><li><a href="https://doi.org/10.1145/1411318.1411324">https://doi.org/10.1145/1411318.1411324</a></li><li><a href="https://www.foonathan.net/2021/07/concepts-structural-nominal/">https://www.foonathan.net/2021/07/concepts-structural-nominal/</a></li><li><a href="https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/">https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</a></li></ul><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><ul><li>The translation mechanism (pre-processor) proposed in this paper translates a program using type classes into an equivalent program without them at compile-time so that an existing Hindley&#x2F;Milner type system can be used afterward instead of having to develop a new, complex type system to support type classes. This is indeed a very clever mechanism. Can this be viewed as an example of <a href="https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/#Derived-Forms">desugaring</a>?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Understanding Lambda Calculus Through C++</title>
    <link href="https://abbaswu.github.io/2023/03/01/Understanding-Lambda-Calculus-Through-CXX/"/>
    <id>https://abbaswu.github.io/2023/03/01/Understanding-Lambda-Calculus-Through-CXX/</id>
    <published>2023-03-01T08:00:00.000Z</published>
    <updated>2023-03-22T20:14:45.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fixed-point-Combinators-and-Recursive-Lambda-Expressions"><a href="#Fixed-point-Combinators-and-Recursive-Lambda-Expressions" class="headerlink" title="Fixed-point Combinators and Recursive Lambda Expressions"></a>Fixed-point Combinators and Recursive Lambda Expressions</h1><p>In Lambda Calculus, we cannot refer to the Lambda Abstraction <em>itself</em> within a Lambda Abstraction. Thus, we cannot straightforwardly implement recursion. A workaround for this is <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed-point_combinators_in_lambda_calculus">Fixed-point Combinators</a>, in which we add <em>another parameter</em> to the Lambda Abstraction, which is passed the Lambda Abstraction <em>itself</em> when the Lambda Abstraction is being Applied.</p><p>Similarly, C++ does not allow defining a recursive lambda expression. A workaround is to add another parameter to the lambda expression, which would be used for recursive calling and is passed the value of the lambda expression <em>itself</em> when the lambda expression is being called. We can intuitively name this parameter “itself.”</p><p>The type of <code>itself</code> is the type of the lambda expression, which has to be inferred. Thus, we should use <code>auto</code> to represent its type. Using <code>auto</code> in a lambda expression’s parameter list requires C++14 or above.</p><p>For example, we can write the following lambda expression to calculate the <code>n</code>th Fibonacci Number recursively:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> fib = [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> itself, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>This lambda expression can be called like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib</span>(fib, input);<br></code></pre></td></tr></table></figure><p>C++ compilers can optimize for such usages. For example, the following program:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> fib = [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> itself, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> input;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;input);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib</span>(fib, input);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, result);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>compiles to the following LLVM IR with <code>clang++ -std=c++14 -O1 -S -emit-llvm</code>, where calling <code>fib</code> within <code>main</code> has been transformed to calling a recursive function <code>_ZNK3$_0clIS_EEmT_j</code>, with the first parameter <code>itself</code> optimized. </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%u<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%lu\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>)<br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: inlinehint nounwind readnone uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%0</span>) <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-variable">#3</span> <span class="hljs-keyword">align</span> <span class="hljs-number">2</span> &#123;<br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%3</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%9</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%2</span><br>  ]<br><br><span class="hljs-number">2</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">3</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-1</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>)<br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%6</span>)<br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%5</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">9</span>:                                                <span class="hljs-comment">; preds = %1, %3, %2</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">phi</span> <span class="hljs-type">i64</span> [ <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%2</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%3</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%1</span> ]<br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%10</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure><h1 id="Type-Abstractions-and-Template-Functions"><a href="#Type-Abstractions-and-Template-Functions" class="headerlink" title="Type Abstractions and Template Functions"></a>Type Abstractions and Template Functions</h1><p>Polymorphic Lambda Calculus (also known as Second Order Lambda Calculus or System F) introduces Type Abstractions and Type Applications.</p><ul><li>A Type Abstraction, written as <code>λ X . t</code>, represents a Term (often a Lambda Abstraction) <code>t</code> containing a Type Variable <code>X</code>.</li><li>A Type Application, written as <code>t [T]</code>, uses a Concrete Type <code>T</code> to replace all instances of the Type Variable in the Term of the Type Abstraction.</li></ul><p>This can be used to implement Polymorphic Lambda Abstractions.</p><p>For example, the following Type Abstraction representing a Polymorphic Identity Function:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">id</span> = λ X . λ x: X . x<br></code></pre></td></tr></table></figure><p>can be instantiated to yield any concrete identity function that may be required, such as <code>id [Nat]: Nat -&gt; Nat</code>.</p><p>Such Type Abstractions can be implemented in C++ using template functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">id</span><span class="hljs-params">(X x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>while Type Applications correspond to template instantiations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">id&lt;<span class="hljs-type">int</span>&gt;<br></code></pre></td></tr></table></figure><p>Should the template function be passed a callable, we usually want to use a template typename to support functions, function pointers, functors, and lambda expressions. Alternatively, we can also use <code>auto</code> to represent its type in the template function’s parameter list. Note that using <code>auto</code> in a (non-lambda expression) function’s parameter list requires C++20 or above.</p><p>For example, the following Type Abstraction:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">double = λ <span class="hljs-keyword">X</span> . λ f: <span class="hljs-keyword">X</span> -&gt; <span class="hljs-keyword">X</span> . λ a: <span class="hljs-keyword">X</span> . f(f a)<br></code></pre></td></tr></table></figure><p>can be represented using the following template function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> F&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> F f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>or in C++20 or above:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ compilers support aggressive inlining optimizations when lambda expressions are used. For example, the call to <code>const auto g = double_&lt;int&gt;([](int x) &#123; return 2 * x; &#125;);</code> in the following source code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> g = <span class="hljs-built_in">double_</span>&lt;<span class="hljs-type">int</span>&gt;([](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x; &#125;);<br>    <br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">g</span>(input));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>has been completely inlined to <code>%5 = shl i32 %4, 2</code> in the LLVM IR generated with <code>clang++ -std=c++20 -O2 -S -emit-llvm</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">shl</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure><h1 id="Type-Classes-and-Concepts-in-C"><a href="#Type-Classes-and-Concepts-in-C" class="headerlink" title="Type Classes and Concepts in C++"></a>Type Classes and Concepts in C++</h1><p>Template Metaprogramming in C++ had been untyped, with template parameters being generic type variables substituted at template instantiation.</p><p>In C++20, a type system has been added to this untyped template language through concepts. They are Boolean predicates on template parameters evaluated at the point of, not after, template instantiation. The compiler will produce a clear error immediately if a programmer tries to use a template parameter that doesn’t meet the requirements of a concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported after an invalid type substitutes a generic type variable emanating from the implementation context rather than the template instantiation itself.</p><p>For instance, the first two arguments to <code>std::sort</code> must be random-access iterators. If an argument is not a random-access iterator, an error will occur when <code>std::sort</code> attempts to use it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of error information, starting with an equation that failed to compile when it tried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reported at template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances: </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;,</span><br><span class="hljs-comment">// which is satisfied by any type &#x27;T&#x27; such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-comment">// This is represented using a &quot;requires expression&quot; which returns a bool</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parameters are being introduced in a template definition, to indicate that the corresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>or (using a “requires clause”):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">requires</span> Eq&lt;T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities">https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</a></li><li><a href="https://cs.gmu.edu/~sean/stuff/java-objc.html">https://cs.gmu.edu/~sean/stuff/java-objc.html</a></li><li><a href="https://functionalcpp.wordpress.com/2013/08/16/type-classes/">https://functionalcpp.wordpress.com/2013/08/16/type-classes/</a></li><li><a href="https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses">https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</a></li><li><a href="https://wiki.haskell.org/OOP_vs_type_classes">https://wiki.haskell.org/OOP_vs_type_classes</a></li><li><a href="https://doi.org/10.1145/1411318.1411324">https://doi.org/10.1145/1411318.1411324</a></li><li><a href="https://www.foonathan.net/2021/07/concepts-structural-nominal/">https://www.foonathan.net/2021/07/concepts-structural-nominal/</a></li><li><a href="https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/">https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fixed-point-Combinators-and-Recursive-Lambda-Expressions&quot;&gt;&lt;a href=&quot;#Fixed-point-Combinators-and-Recursive-Lambda-Expressions&quot; class=</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="C++" scheme="https://abbaswu.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 22</title>
    <link href="https://abbaswu.github.io/2023/02/26/Paper-Review-Types-and-Programming-Languages-Chapter-22/"/>
    <id>https://abbaswu.github.io/2023/02/26/Paper-Review-Types-and-Programming-Languages-Chapter-22/</id>
    <published>2023-02-26T08:00:00.000Z</published>
    <updated>2023-02-26T21:54:43.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 22 of “Types and Programming Languages” explores the problem of Type Reconstruction (Type Inference) or deriving Types for Unannotated Arguments of Lambda Abstractions. It first introduces Type Variables and Substitutions before formalizing the Type Reconstruction problem. Then, it points out that Type Reconstruction can be implemented using a Constraint Typing Algorithm or an Algorithm that calculates a Set of Constraints between Types involving Type Variables and records them for later consideration, and proves the Completeness and Soundness of Constraint Typing. Moreover, it introduces a Unification Algorithm to calculate Principle Solutions (most general solutions) to Constraint Sets. Finally, the Chapter presents how the Typing Rules for Let Expressions can be modified to support Let Polymorphism - allowing an Untyped Function to generate different Constraints, thus be able to be Reconstructed to Different Types when applied to Terms of different Types.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, Chapter 22 is clearly written, and several sections intrigued me (such as that Parametric Polymorphism and Type Reconstruction can result from two different interpretations of Dependent Types containing Type Variables). Moreover, this Chapter provides essential inspiration for my Class Project, “Inferring Feasible Types for the Parameters and Return Values of Python Functions.” However, the Chapter also used some Concepts without introducing them (such as the Unification Problem), and I had to look into them to understand parts of the Chapter.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><h3 id="Completeness-and-Soundness-of-a-Theory"><a href="#Completeness-and-Soundness-of-a-Theory" class="headerlink" title="Completeness and Soundness of a Theory"></a>Completeness and Soundness of a Theory</h3><p>Using $TRUE$ and $PROVABLE$ to represent the Set of Facts that are True and Provable under a Theory, respectively:</p><ul><li>Completeness: $TRUE \subseteq PROVABLE$ or every Fact that is True is also Provable (but there may be some Facts that are Provable but are not True).</li><li>Soundness: $PROVABLE \subseteq TRUE$ or every Fact that is Provable is also True (but there may be some True Facts that are not Provable).</li><li>Completeness and Soundness: $TRUE &#x3D; PROVABLE$.</li></ul><p>An ideal Theory should be both Complete and Sound.</p><h3 id="Unification-Problem"><a href="#Unification-Problem" class="headerlink" title="Unification Problem"></a>Unification Problem</h3><p>Given two Terms containing some Variables, find a Substitution (an Assignment of Terms to Variables) that makes the two Terms equal.</p><p>For example, given $f(x_1, h(x_1), x_2) &#x3D; f(g(x_3), x_4, x_3)$, a valid Substitution is $\sigma &#x3D; {g(x_3): x_1, x_3: x_2, h(g(x_3)): x_4}$.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="Parametric-Polymorphism-and-Type-Reconstruction"><a href="#Parametric-Polymorphism-and-Type-Reconstruction" class="headerlink" title="Parametric Polymorphism and Type Reconstruction"></a>Parametric Polymorphism and Type Reconstruction</h3><p>Given Dependent Types containing Type Variables (often the result of the Programmer leaving out Type Annotations in Source Code), we can make one of the following assumptions.</p><ul><li>All Substitution Instances are well-typed. Thus, it is possible for Type Variables to be held abstract during Type Checking and only be Substituted for Concrete Types later on. This is the basis of Parametric Polymorphism.</li><li>Not all Substitution Instances are well-typed. In this case, we want to look for <em>valid</em> Substitutions. This leads us to the problem of Type Reconstruction.</li></ul><h3 id="Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them"><a href="#Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them" class="headerlink" title="Deriving Constraint Sets and Calculating Solutions to Them"></a>Deriving Constraint Sets and Calculating Solutions to Them</h3><p>To explore valid ways that Concrete Types can substitute Type Variables, we can calculate a Set of Constraints between Types involving Type Variables. This is similar to an ordinary Type Checking Algorithm checking Requirements in the Premise but records these Requirements as Constraints for later consideration instead of checking them immediately.</p><p>After we have generated a Constraint Set, we can use a Unification Algorithm to calculate Solutions to it. The Unification Algorithm proposed in the Chapter removes a Constraint from the Constraint Set, processes it, and recursively processes the remaining Constraint Set.</p><p>There is a most general way to instantiate the Type Variables. This is known as a Principle Solution, which contains Principle Types, or the most general types, for Type Variables.</p><h2 id="Inspirations-From-This-Paper"><a href="#Inspirations-From-This-Paper" class="headerlink" title="Inspirations From This Paper"></a>Inspirations From This Paper</h2><p>This Paper points out a viable way to implement my Class Project “Inferring Feasible Types for the Parameters and Return Values of Python Functions.”</p><ul><li>Propose Typing Rules for Python Expressions.</li><li>Implement an Algorithm similar to an ordinary Type Checking Algorithm checking Requirements in the Premise, but which records these Requirements as Constraints for later consideration instead of checking them immediately.</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul><li>What are the specific types of Constraints that are recorded when deriving Constraint Sets? What do the derived Constraint Sets look like?</li><li>Implementing the Unification Algorithm proposed to calculate Solutions to the Constraint Set seems non-trivial. Are there any implementations of it for more “real-world” (imperative, non-ML Family) Programming Languages? What adjustments have to be made to accomplish such an implementation?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapter 22 of “Types and Programming Languages” ex</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Displaying Information for Thrown and Caught Exceptions to the User in Python</title>
    <link href="https://abbaswu.github.io/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/"/>
    <id>https://abbaswu.github.io/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/</id>
    <published>2023-02-20T08:00:00.000Z</published>
    <updated>2023-02-20T19:51:07.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exception-Semantics-in-Python"><a href="#Exception-Semantics-in-Python" class="headerlink" title="Exception Semantics in Python"></a>Exception Semantics in Python</h2><p>Exception handling refers to how a program reacts when unexpected events, known as exceptions, occur throughout the program’s execution.</p><p>Exception semantics varies considerably among programming languages. Based on this, we can divide programming languages into <a href="https://doi.org/10.1007%2F11818502_16">two groups</a>:</p><ul><li>Programming languages that only employ exceptions to address exceptional, unforeseen, or incorrect circumstances, such as C++, Java, and C#.</li><li>Programming languages that use exceptions as standard flow control structures, such as Ada, ML, OCaml, Python, and Ruby. For example, in Python, when an iterator has exhausted its output, and no more items can be generated, an exception of type StopIteration is thrown.</li></ul><p>As a result, exceptions are pervasive in Python, and exception catching and handling is a must for writing robust Python code.</p><h2 id="Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User"><a href="#Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User" class="headerlink" title="Displaying Information for Thrown and Caught Exceptions to the User"></a>Displaying Information for Thrown and Caught Exceptions to the User</h2><p>In many situations, it is beneficial to handle the exception and give a user a “loud and clear” message of what has happened as feedback. This is also particularly useful in investigating the root cause of the exception and whether it is the tip of the iceberg of a more significant latent bug.</p><p>This can be simplified by the fact that exceptions thrown by built-in functions, standard library functions, and functions in many well-tested third-party libraries all contain rich semantics in:</p><ul><li>The class of the exception. Given an exception <code>e</code>, it is accessible via <code>type(e)</code>, and <code>type(e).__name__</code> gives a <code>str</code> representation.</li><li>The message of the exception. Given an exception <code>e</code>, <code>str(e)</code> generates a representation of the argument(s) to the instance.</li></ul><p>In command-line programs, we can write both of them to <code>stderr</code>, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> stderr<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Do some potentially erroneous operation</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># Write the class of the exception and the message of the exception to stderr</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e), file=stderr)<br></code></pre></td></tr></table></figure><p>In GUI programs, we can display them in a message box, with the class of the exception being the title of the message box and the message of the exception being the message of the message box, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> Slot<br><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QDialog, QMessageBox<br><br><span class="hljs-keyword">from</span> .ui <span class="hljs-keyword">import</span> Ui_ConnectToServerDialog<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectToServerDialog</span>(<span class="hljs-title class_ inherited__">QDialog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(parent)<br><br>        self.ui=Ui_ConnectToServerDialog()<br>        self.ui.setupUi(self)<br>        self.ui.connectPushButton.clicked.connect(self.accept)<br>        <br>        self.server=<span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @Slot()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Do some operation that involves potentially erroneous user input</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># Display the exception thrown in a QMessageBox</span><br>            <span class="hljs-comment"># The type of the exception is the title of the QMessageBox</span><br>            <span class="hljs-comment"># The message of the exception is the message of the QMessageBox</span><br>            QMessageBox.about(self, <span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-built_in">super</span>().accept()<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages">https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages</a></li><li><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">https://docs.python.org/3/library/exceptions.html#bltin-exceptions</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exception-Semantics-in-Python&quot;&gt;&lt;a href=&quot;#Exception-Semantics-in-Python&quot; class=&quot;headerlink&quot; title=&quot;Exception Semantics in Python&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Using ffmpeg to Manipulate Video Files</title>
    <link href="https://abbaswu.github.io/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/"/>
    <id>https://abbaswu.github.io/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/</id>
    <published>2023-02-18T08:00:00.000Z</published>
    <updated>2023-02-18T22:56:52.940Z</updated>
    
    <content type="html"><![CDATA[<p>FFmpeg is a collection of libraries and tools for manipulating video, audio, and other multimedia files and streams. It is frequently used for basic editing (cutting and joining), video scaling, post-production video effects, and standard compliance (SMPTE, ITU). </p><p>The main component of FFmpeg is the command-line tool <code>ffmpeg</code>, which reads an input file, applies transformations, and writes to an output file.</p><p>The basic usage pattern of <code>ffmpeg</code> is <code>ffmpeg -i &lt;input file&gt; [options] &lt;output file&gt;</code>. <code>ffmpeg</code> automatically selects the decoder and encoder based on the extension of <code>&lt;input file&gt;</code> and <code>&lt;output file&gt;</code>, and we specify what transformations we apply to the original video file in <code>[options]</code>.</p><p>We now explain what to write in <code>[options]</code> to address typical video manipulation demands.</p><h1 id="Cut-a-Video"><a href="#Cut-a-Video" class="headerlink" title="Cut a Video"></a>Cut a Video</h1><p>Add the option <code>-ss &lt;start time in hours&gt;:&lt;start time in minutes&gt;:&lt;start time in seconds&gt; -to &lt;end time in hours&gt;:&lt;end time in minutes&gt;:&lt;end time in seconds&gt;</code>.</p><p>If there is no need to transcode the video format or apply other transformations, add <code>-c:v copy -c:a copy</code> for increased speed.</p><p>For example, <code>ffmpeg -i input.mp4 -ss 00:05:10 -to 00:15:30 -c:v copy -c:a copy output.mp4</code> saves <code>input.mp4</code> from 00:05:10 to 00:15:30 to <code>output.mp4</code> with no transcoding or other transformations, resulting in a 10 minutes and 20 seconds video.</p><h1 id="Change-Frame-Rate"><a href="#Change-Frame-Rate" class="headerlink" title="Change Frame Rate"></a>Change Frame Rate</h1><p>Add the option <code>-r &lt;frame rate&gt;</code>.</p><p>For example, <code>ffmpeg -i input.mp4 -r 12 output.gif</code> controls the frame rate of <code>output.gif</code> generated by transcoding to 12FPS.</p><h1 id="Change-Output-Resolution"><a href="#Change-Output-Resolution" class="headerlink" title="Change Output Resolution"></a>Change Output Resolution</h1><p>Add the option <code>-s &lt;length&gt; x &lt;width&gt;</code>. The units of <code>&lt;length&gt;</code> and <code>&lt;width&gt;</code> are in pixels.</p><p>It is usually required that the length and width be scaled equally from the original length and width to avoid distortion of the picture.</p><p>For example, <code>ffmpeg -i input.mp4 -s 320x180 output.gif</code> controls the resolution of the <code>output.gif</code> generated by transcoding to 320x180.</p><h1 id="Change-Playback-Speed"><a href="#Change-Playback-Speed" class="headerlink" title="Change Playback Speed"></a>Change Playback Speed</h1><ul><li>To speed up the output video to k times its original size: add the option <code>-filter:v &#39;setpts=PTS/&lt;k&gt;&#39;</code>.</li><li>To slow down the output video to k times the original: add the option <code>-filter:v &#39;setpts=&lt;k&gt;*PTS&#39;</code>.</li></ul><p>For example, <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=PTS/2&#39; output.gif</code> (or <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=0.5*PTS&#39; output.gif</code>) will transcode the resulting <code>output.gif</code> to speed up to 2 times the original.</p><h1 id="Extract-Audio"><a href="#Extract-Audio" class="headerlink" title="Extract Audio"></a>Extract Audio</h1><p>Before we extract audio, we need to first look up media information using <code>ffprobe</code>, a command-line tool installed with <code>ffmpeg</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ffprobe video.mkv<br>...<br>Input <span class="hljs-comment">#0, matroska,webm, from &#x27;video.mkv&#x27;:</span><br>  Metadata:<br>    encoder         : no_variable_data<br>    creation_time   : 1970-01-01T00:00:00.000000Z<br>  Duration: 00:23:30.07, start: 0.000000, bitrate: 1392 kb/s<br>    Stream <span class="hljs-comment">#0:0: Audio: aac (LC), 48000 Hz, stereo, fltp (default)</span><br>    Metadata:<br>...<br></code></pre></td></tr></table></figure><p>We can see that the format of the audio stream is aac. Now, we can add the option <code>-map 0:a -acodec copy</code> to copy the audio stream. Note that the extension of output file should correspond with the format of the audio stream.</p><p>For example, we run the following command to save the audio stream of <code>video.mkv</code> to <code>audio.mp4</code>: <code>ffmpeg -i video.mkv -map 0:a -acodec copy audio.mp4</code>. Note that <code>.mp4</code> is a valid extensions of aac audio streams.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/FFmpeg">https://en.wikipedia.org/wiki/FFmpeg</a></li><li><a href="https://shotstack.io/learn/use-ffmpeg-to-trim-video/">https://shotstack.io/learn/use-ffmpeg-to-trim-video/</a></li><li><a href="https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/">https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/</a></li><li><a href="https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681">https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681</a></li><li><a href="https://www.baeldung.com/linux/ffmpeg-audio-from-video">https://www.baeldung.com/linux/ffmpeg-audio-from-video</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;FFmpeg is a collection of libraries and tools for manipulating video, audio, and other multimedia files and streams. It is frequently use</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>Syncing a Local Directory With a Remote Directory via FTP</title>
    <link href="https://abbaswu.github.io/2023/02/16/Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/"/>
    <id>https://abbaswu.github.io/2023/02/16/Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/</id>
    <published>2023-02-16T08:00:00.000Z</published>
    <updated>2023-07-11T05:05:09.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP"><a href="#Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP" class="headerlink" title="Syncing a Local Directory With a Remote Directory via FTP"></a>Syncing a Local Directory With a Remote Directory via FTP</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>We can use the following Sequence Diagram to depict the process of modifying the Files within a Local Directory and a Remote Directory before syncing the two Directories via the <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">File Transfer Protocol (FTP)</a>, a standard communication protocol used on computer networks to send files between a Client and a Server.</p><pre><code class=" mermaid">sequenceDiagram    loop        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Start FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Start FTP Client        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Connect to FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Mirror Remote Directory -&gt; Local Directory        Machine With the FTP Server --&gt;&gt; Machine With the FTP Client: Update Local Directory With Changed Files in Remote Directory        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Reverse Mirror Local Directory -&gt; Remote Directory        Machine With the FTP Client --&gt;&gt; Machine With the FTP Server: Update Remote Directory With Changed Files in Local Directory    end</code></pre><h2 id="Setting-Up-the-Machine-With-the-FTP-Client"><a href="#Setting-Up-the-Machine-With-the-FTP-Client" class="headerlink" title="Setting Up the Machine With the FTP Client"></a>Setting Up the Machine With the FTP Client</h2><p>Obviously, we need to install an FTP Client on this Machine. Personally, I recommend installing <a href="https://lftp.yar.ru/"><code>lftp</code></a>, a “sophisticated” file transfer program. Unlike a standard FTP Client, which only enables you to upload or download files, <code>lftp</code> additionally enables you to maintain file synchronisation using its built-in <code>mirror</code> command.</p><h2 id="Setting-Up-the-Machine-With-the-FTP-Server"><a href="#Setting-Up-the-Machine-With-the-FTP-Server" class="headerlink" title="Setting Up the Machine With the FTP Server"></a>Setting Up the Machine With the FTP Server</h2><p>We would also need an FTP Server on the other Machine. Although there are many existing UNIX FTP servers, such as <code>proftpd</code> and <code>vsftpd</code>, they are usually tricky to compile, configure, and set up and require Root Privileges to run, which is tedious, if not impossible, in many situations.</p><p>As an alternative, we write our own FTP Server using <a href="https://github.com/giampaolo/pyftpdlib"><code>pyftpdlib</code></a>, a pure Python FTP server library written which offers a high-level interface to creating portable and efficient FTP servers. Such a solution requires us to have a Python environment running on the Machine With the FTP Server and install <code>pyftpdlib</code>, which is very simple in today’s world where the Python ecosystem is ubiquitous.</p><p>After setting up a Python environment and installing <code>pyftpdlib</code>, we can write a script for an FTP server. Below is the script that I am using. By default, it sets up a user <code>user</code> with password <code>12345</code> and listens on port <code>2121</code> of the Machine With the FTP Server’s Outbound IP Address, but these settings can all be tweaked by providing command-line arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<br><span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<br><span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_outbound_ip_address</span>():<br>    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># doesn&#x27;t even have to be reachable</span><br>        s.connect((<span class="hljs-string">&#x27;10.255.255.255&#x27;</span>, <span class="hljs-number">1</span>))<br>        IP = s.getsockname()[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">except</span> Exception:<br>        IP = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>    <span class="hljs-keyword">finally</span>:<br>        s.close()<br>    <span class="hljs-keyword">return</span> IP<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_command_line_arguments</span>():<br>    parser = argparse.ArgumentParser()<br><br>    parser.add_argument(<span class="hljs-string">&#x27;--user&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Define a user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;The password of the user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--anonymous&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Add read-only anonymous user&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--root&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=os.getcwd(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Root directory in FTP server&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--host&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=get_outbound_ip_address(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Host to listen on&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--port&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-number">2121</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Port to listen on&#x27;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">return</span> args.user, args.password, args.anonymous, args.root, args.host, args.port<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Parse command line arguments</span><br>    user, password, anonymous, root, host, port = parse_command_line_arguments()<br><br>    <span class="hljs-comment"># Instantiate a dummy authorizer for managing &#x27;virtual&#x27; users</span><br>    authorizer = DummyAuthorizer()<br><br>    <span class="hljs-comment"># Define a new user having full r/w permissions</span><br>    authorizer.add_user(user, password, root, perm=<span class="hljs-string">&#x27;elradfmwMT&#x27;</span>)<br><br>    <span class="hljs-comment"># Add anonymous user</span><br>    <span class="hljs-keyword">if</span> anonymous:<br>        authorizer.add_anonymous(root)<br><br>    <span class="hljs-comment"># Instantiate FTP handler class</span><br>    handler = FTPHandler<br>    handler.authorizer = authorizer<br><br>    <span class="hljs-comment"># Define a customized banner (string returned when client connects)</span><br>    handler.banner = <span class="hljs-string">&quot;pyftpdlib based ftpd ready.&quot;</span><br><br>    <span class="hljs-comment"># Instantiate FTP server class and listen on &lt;host&gt;:&lt;port&gt;</span><br>    server = FTPServer((host, port), handler)<br><br>    <span class="hljs-comment"># Start FTP server</span><br>    server.serve_forever()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>Save this to a file, and run <code>chmod +x</code> on the file to make it executable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd -h<br>usage: pyftpd [-h] [--user USER] [--password PASSWORD] [--anonymous] [--root ROOT] [--host HOST] [--port PORT]<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>           show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  --user USER          Define a user having full <span class="hljs-built_in">read</span>/write permissions<br>  --password PASSWORD  The password of the user having full <span class="hljs-built_in">read</span>/write permissions<br>  --anonymous          Add read-only anonymous user<br>  --root ROOT          Root directory <span class="hljs-keyword">in</span> FTP server<br>  --host HOST          Host to listen on<br>  --port PORT          Port to listen on<br>abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd <br>[I 2023-02-16 15:47:39] &gt;&gt;&gt; starting FTP server on 10.43.111.144:2121, pid=11969 &lt;&lt;&lt;<br>[I 2023-02-16 15:47:39] concurrency model: async<br>[I 2023-02-16 15:47:39] masquerade (NAT) address: None<br>[I 2023-02-16 15:47:39] passive ports: None<br></code></pre></td></tr></table></figure><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>Last but not least, we will present a demonstration of syncing a Local Directory With a Remote Directory via FTP.</p><p>Our Local Directory is a directory named <code>mirror_ubuntu</code> with two files <code>mirror_ubuntu_1.txt</code> and <code>mirror_ubuntu_2.txt</code> on the Machine With the FTP Client.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ubuntu_directory.png" alt="Local Directory"></p><p>Our Remote Directory is a directory named <code>mirror_ipad</code> with two files <code>mirror_ipad_1.txt</code> and <code>mirror_ipad_2.txt</code> on the Machine With the FTP Server, which is the <a href="https://ish.app/">iSH</a> app running within an iPad.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ipad_directory.png" alt="Remote Directory"></p><p>We start the FTP Server on the Machine With the FTP Server, and start the FTP Client on the Machine With the FTP Client.</p><p>As depicted in <a href="#Overview">Overview</a>, we first Mirror Remote Directory to Local Directory, which can be accomplished by running <code>mirror --continue --no-perms &lt;Remote Directory&gt; &lt;Local Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirroring_mirror_ipad_directory.png" alt="Mirroring Remote Directory to Local Directory"></p><p>The Local Directory will now contain Files that were modified the Remote Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ubuntu_directory_after_mirroring_mirror_ipad_directory.png" alt="Local Directory After Mirroring Remote Directory to Local Directory"></p><p>Afterwards, we Reverse Mirror Local Directory to Remote Directory, which can be accomplished by running <code>mirror --continue --no-perms --reverse &lt;Local Directory&gt; &lt;Remote Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/reverse_mirroring_mirror_ubuntu_directory.png" alt="Reverse Mirroring Local Directory to Remote Directory"></p><p>The Remote Directory will now contain Files that were modified the Local Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ipad_directory_after_reverse_mirroring_mirror_ubuntu_directory.png" alt="Remote Directory After Reverse Mirroring Local Directory to Remote Directory"></p><p>At this point, the Local Directory has been successfully synced with the Remote Directory.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/">https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/</a></li><li><a href="https://github.com/giampaolo/pyftpdlib">https://github.com/giampaolo/pyftpdlib</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP&quot;&gt;&lt;a href=&quot;#Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP&quot; clas</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 15 and Chapter 16</title>
    <link href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/"/>
    <id>https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/</id>
    <published>2023-02-10T08:00:00.000Z</published>
    <updated>2023-04-11T21:56:48.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 15, “Subtyping,” describes adding Subtyping with Functions and Records into Simply Typed Lambda Calculus. It formalizes the Subtype Relation as a collection of Inference Rules, verifies that verify that the Preservation and Progress Theorems of Simply Typed Lambda Calculus still apply, examines Ascription (or Casting) in the context of Subtyping, and proposes Subtyping Rules for Variants, Lists, References, and Arrays. Finally, it presents alternative Coercion Semantics for Subtyping. Chapter 16, “Metatheory of Subtyping,” observes that the Subtyping Rules presented in the previous chapter are not syntax-directed and have overlapping conclusions, which impedes implementing a Typechecking Algorithm, and develops the Algorithmic Subtype Relation and the Algorithmic Typing Relation to address these problems.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><h2 id="Acquired-Insights"><a href="#Acquired-Insights" class="headerlink" title="Acquired Insights"></a>Acquired Insights</h2><p>I will first summarize the insights that I gained while reading these Chapters.</p><p>An empty Bottom Type is useful, both as a way of expressing that a Function is not intended to return and telling the Typechecker that the Term can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial, especially for Downcasting. As blindly following Type Assertions may lead to potentially serious consequences, the Compiler would need to insert a Runtime Type Check, essentially adding the Machinery for Typechecking to the Runtime System. This might incur a significant performance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is a physical relationship between Types, Subtyping generally is more of a <em>logical relationship</em> between Types. For example, in the alternative Coercion Semantics for Subtyping, we can consider that <code>int</code> and <code>float</code>, two Types that do not inherit from one another, have a Subtyping Relation, as they can be converted to one another. In this case, the Subtyping Relation is compiled to Coercions at runtime (instructions physically converting an <code>int</code> to a <code>float</code>, or vice versa), which are much more efficient than virtual function calls frequently seen in an Inheritance Based Class Hierarchy.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><p>There is no doubt that the Chapters are written in great detail. However, I find some of the content, especially the terminology, a little difficult to understand, and I have looked into background knowledge concerning the topic. Below summarizes what I have read.</p><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism describes that a single Interface can work with Terms of Different Types in Programming Languages. There are different kinds of Polymorphism in the context of Programming Languages, including:</p><h4 id="Parametric-Polymorphism"><a href="#Parametric-Polymorphism" class="headerlink" title="Parametric Polymorphism"></a>Parametric Polymorphism</h4><p>Also known as “Generic Programming”. Using Abstract Symbols that can substitute for any Type instead of specifying Concrete Types in Interfaces. C++’s Template Metaprogramming comes close to Parametric Polymorphism (except for Template Specializations).</p><h4 id="Ad-Hoc-Polymorphism"><a href="#Ad-Hoc-Polymorphism" class="headerlink" title="Ad Hoc Polymorphism"></a>Ad Hoc Polymorphism</h4><p>Defining a Common Interface for a Set of Individually Specified Types. Includes Function Overloading, Operator Overloading, and C++’s Template Metaprogramming with Template Specializations.</p><h4 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h4><p>It is a form of Polymorphism in which the Terms of a Subtype <code>T</code>, which is related to another Type known as the Supertype <code>T&#39;</code> in some way, can be safely used in any Context where the Terms of <code>T&#39;</code> are used.</p><p>The Concept of Subtyping has gained visibility with the advent of Object Oriented Programming Languages, where it is frequently the case that an Inheritance Based Class Hierarchy forms the basis of Subtyping, and such Safe Substitution is known as the Liskov Substitution Principle.</p><p>However, stepping out of this specific and widely known context, there are several different Schemes of Subtyping. They can be broadly classified along two dimensions: Nominal Subtyping vs. Structural Subtyping and Inclusive Implementations vs. Coercive Implementations.</p><p>Nominal Subtyping requires the Subtyping Relation to be explicitly declared among the two Types. This is the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. In contrast, in Structural Subtyping, a Type <code>T</code> is <strong>implicitly</strong> the Subtype of another Type <code>T&#39;</code> if Terms of <code>T</code> has all the Properties of Terms of <code>T&#39;</code> and can handle all the Messages Terms of <code>T&#39;</code> can handle. This is closely related to Row Polymorphism or the so-called Duck Typing in Dynamically Typed Programming Languages.</p><p>On another dimension, Implementations of Subtyping can be divided into Inclusive Implementations and Coercive Implementations. In Inclusive Implementations, any Term of a Subtype, left unchanged, is <strong>automatically</strong> a Term of a Supertype. This is often the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. A Term can have multiple Types in this situation. In contrast, Coercive Implementations are defined by <strong>Type Conversion Functions</strong> from Subtype to Supertype and allow a Term of a Subtype to be <strong>converted</strong> to a Term of a Supertype, such as the case for <code>int</code>‘s, <code>float</code>‘s, and <code>str</code>‘s. It is also worth noticing that applying the Type Coercion Function from <code>A</code> to <code>B</code> and then from <code>B</code> to <code>C</code> might have a different result from directly applying the Type Coercion Function from <code>A</code> to <code>C</code>. For example, <code>str(float(2))</code> returns a value different from <code>str(2)</code>.</p><p>Based on the concept of Subtyping, the concept of Variance reference to how the Subtyping Relations between more complex Types relates to the Subtyping Relations between the simpler Types they include. For example, given that <code>Cat</code> is a Subtype of <code>Animal</code>, should a List of <code>Cat</code>‘s be a Subtype of a List of <code>Animal</code>‘s? What about a Function that takes a Term of Type <code>Cat</code> as an Arugument and a Function that takes a Term of Type <code>Animal</code> as an Arugument?</p><p>Different Programming Languages have different implementations, but most Programming Languages respect the following patterns.</p><ul><li>If the Complex Types are <strong>Read Only and&#x2F;or capable of returning Terms of the Simple Types</strong>, they should have the <strong>same</strong> Subtyping Relations as the Simple Types. This is known as <strong>Covariance</strong>. For example,<ul><li>A read-only List of <code>Cat</code>‘s can be used whenever a read-only List of <code>Animal</code>‘s is required, as each Term read from the read-only List of <code>Cat</code>‘s is of Type <code>Cat</code>, which is a Subtype of <code>Animal</code>. In other words, <code>const List&lt;Cat&gt;</code> <em>is</em> a Subtype of <code>const List&lt;Animal&gt;</code>.</li><li>It is not safe to use a <code>const List&lt;Animal&gt;</code> where a <code>const List&lt;Cat&gt;</code> is required, as a Term read from a <code>const List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. In other words, <code>const List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>const List&lt;Cat&gt;</code>.</li></ul></li><li>If the Complex Types are <strong>Write Only and&#x2F;or capable of accepting Terms of the Simple Types as Parameters</strong>, they should have the <strong>opposite</strong> Subtyping Relations as the Simple Types. This is known as <strong>Contravariance</strong>. For example,<ul><li>A Function that takes a Term of Type <code>Animal</code> as a Parameter may be used where a Function that takes a Term of Type <code>Cat</code> as a Parameter is used, as each Term of Type <code>Cat</code> can also be passed as a Parameter of Type <code>Animal</code>. In other words, <code>Animal -&gt; T</code> <em>is</em> a Subtype of <code>Cat -&gt; T</code>.</li><li>It is not safe to use a <code>Cat -&gt; T</code> where an <code>Animal -&gt; T</code> is required, as a Term of Type <code>Animal</code> may not be passed as a Parameter of Type <code>Cat</code>. In other words, <code>Cat -&gt; T</code> <em>is not</em> a Subtype of <code>Animal -&gt; T</code>.</li></ul></li><li>If the Complex Types are <strong>Read&#x2F;Write</strong>, they should have <strong>no</strong> Subtying Relations. This is known as <strong>Invariance</strong>. For example,<ul><li>A Term written into a <code>List&lt;Animal&gt;</code> need not be of Type <code>Cat</code>, but a Term written into a (non-constant) <code>List&lt;Cat&gt;</code> <em>must</em> be of Type <code>Cat</code>. Thus, it is not safe to use a <code>List&lt;Cat&gt;</code> where a <code>List&lt;Animal&gt;</code> is required. In other words, <code>List&lt;Cat&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Animal&gt;</code>.</li><li>A Term read from a (non-constant) <code>List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. Thus it is not safe to use a <code>List&lt;Animal&gt;</code> where a <code>List&lt;Cat&gt;</code>is required. In other words, <code>List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Cat&gt;</code>.</li></ul></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</a></li><li><a href="https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism">https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism</a></li><li><a href="https://en.wikipedia.org/wiki/Subtyping">https://en.wikipedia.org/wiki/Subtyping</a></li><li><a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a></li></ul><p>Having acquired such Background Knowledge, I will also summarize the insights that I gained while reading these Chapters.</p><h2 id="Acquired-Insights-1"><a href="#Acquired-Insights-1" class="headerlink" title="Acquired Insights"></a>Acquired Insights</h2><p>An empty Bottom Type is useful, both as a way of expressing that a Function is not intended to return and telling the Typechecker that the Term can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial, especially for Downcasting. As blindly following Type Assertions may lead to potentially serious consequences, the Compiler would need to insert a Runtime Type Check, essentially adding the Machinery for Typechecking to the Runtime System. This might incur a significant performance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is a physical relationship between Types, Subtyping generally is more of a <em>logical relationship</em> between Types. For example, in the alternative Coercion Semantics for Subtyping, we can consider that <code>int</code> and <code>float</code>, two Types that do not inherit from one another, have a Subtyping Relation, as they can be converted to one another. In this case, the Subtyping Relation is compiled to Coercions at runtime (instructions physically converting an <code>int</code> to a <code>float</code>, or vice versa), which are much more efficient than virtual function calls frequently seen in an Inheritance Based Class Hierarchy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapter 15, “Subtyping,” describes adding Subtypin</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 13 and Chapter 14</title>
    <link href="https://abbaswu.github.io/2023/02/05/Paper-Review-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/"/>
    <id>https://abbaswu.github.io/2023/02/05/Paper-Review-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/</id>
    <published>2023-02-05T08:00:00.000Z</published>
    <updated>2023-02-05T19:48:55.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapters 13 and 14 of “Types and Programming Languages” discuss adding Impure Features, also known as Computational Effects, into Simply Typed Lambda Calculus. Specifically, Chapter 13 discusses adding References to Mutable Cells that can be Allocated, Dereferenced, and Assigned and formalizes their Operational Behavior. Chapter 14 gradually adds Raising and Handling Exceptions, starting from a Term <code>error</code> of any Type that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, before supporting Exception Handling, as well as Raising a Value (potentially containing information about what unusual thing happened) as an Exception.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, I believe these two Chapters are written very well, as they progressively add realistic features to Simply Typed Lambda Calculus. I will summarize takeaways from this paper before presenting some questions and comments.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="References-to-Mutable-Cells"><a href="#References-to-Mutable-Cells" class="headerlink" title="References to Mutable Cells"></a>References to Mutable Cells</h3><p>The Formalization of the Operational Behavior of References to Mutable Cells encompasses Allocations (providing an initial value to a Mutable Cell), Dereferences (reading the current value of the referenced Cell), and Assignments (changing the value stored in the referenced Cell), but not Deallocations. Explicit Deallocations lead to the Dangling Reference Problem, which undermines Type Safety. Instead, References to Mutable Cells that are no longer needed should be Garbage Collected.</p><p>An interpretation of how Aliasing makes Program Analysis tricky is that Aliasing essentially sets up “Implicit Communication Channels in the form of Shared State” between different parts of a Program.</p><p>To formalize the Operational Behavior of References to Mutable Cells, we can consider a Reference $l \in L$, where $L$ is the set of Locations of the Program’s Store (a.k.a. Heap Memory) $\mu$.</p><p>As the result of Evaluating an Expression depends on the current contents of the Store and may cause Side Effects for the Store, Evaluation Rules should, in addition to Terms and Types, take the Store as an Argument and return a new Store as part of the result of Evaluating an Expression.</p><p>Furthermore, in a naive implementation of Typing Rules for References to Mutable Cells, the Type of the Reference depends on the Type of the Mutable Cell, e.g., $\frac{\Gamma \vdash \mu(l): T}{\Gamma \vdash l: \text{Ref} : T}$. However, this is inefficient where there are multiple levels of Indirection and is problematic where there are Cyclic References. To solve this problem, the Chapter proposes extending Typing Rules with a Store Typing $\Sigma$, which maps every Location $l \in L$ to a fixed, definite Type. In this case, the Typing Rule is written as $\frac{\Gamma | \Sigma \vdash \Sigma(l): T}{\Gamma | \Sigma \vdash l: \text{Ref} : T}$.</p><h3 id="Raising-and-Handling-Exceptions"><a href="#Raising-and-Handling-Exceptions" class="headerlink" title="Raising and Handling Exceptions"></a>Raising and Handling Exceptions</h3><p>The first (and most straightforward) Approach to Raising and Handling Exceptions, a Term <code>error</code> that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, effectively simulates Unwinding the Call Stack when it propagates <code>error</code> to the top level.</p><p>The final approach that supports both Exception Handling and Raising a Value as an Exception considers an Exception to be a Value $t_{exp}$ of Type $T_{exp}$ (instead of a Term <code>error</code>). It proposes a Term Constructor <code>raise t_&#123;exp&#125;</code> that describes Raising a Value as an Exception, and models Exception Handling with <code>try t_1 with t_2: T_1</code>, in which $t_1: T_1$ and $t_2: T_{exp} \rightarrow T_1$ (i.e., $t_2$ is a function, called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output). </p><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><p>After reading these two Chapters, the power of Functions as a Universal Abstraction has left a deep impression on me. For example:</p><ul><li>Arrays containing Terms of Type $T$ can be modeled as References to Functions of type $Nat \rightarrow T$. The Referenced Function looks up the Element given an Index.</li><li>Exception Handling is modeled with <code>try t_1 with t_2</code>, in which $t_2$ is a function called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output).</li></ul><p>This describes complex Side Effects in a realistic Programming Language in a Side Effect Free manner that is clean and easy to reason about while not sacrificing Expressiveness. Are there any other complex Side Effects that can be modeled like this using Functions?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapters 13 and 14 of “Types and Programming Langu</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
</feed>
