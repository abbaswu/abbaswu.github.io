<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jifeng Wu&#39;s Personal Website</title>
  
  <subtitle>Jifeng Wu&#39;s Personal Website</subtitle>
  <link href="https://abbaswu.github.io/atom.xml" rel="self"/>
  
  <link href="https://abbaswu.github.io/"/>
  <updated>2023-03-01T22:34:03.728Z</updated>
  <id>https://abbaswu.github.io/</id>
  
  <author>
    <name>Jifeng Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Understanding Lambda Calculus Through C++</title>
    <link href="https://abbaswu.github.io/2023/03/01/Understanding-Lambda-Calculus-Through-CXX/"/>
    <id>https://abbaswu.github.io/2023/03/01/Understanding-Lambda-Calculus-Through-CXX/</id>
    <published>2023-03-01T08:00:00.000Z</published>
    <updated>2023-03-01T22:34:03.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Y-Combinators-and-Recursive-Lambda-Expressions"><a href="#Y-Combinators-and-Recursive-Lambda-Expressions" class="headerlink" title="Y Combinators and Recursive Lambda Expressions"></a>Y Combinators and Recursive Lambda Expressions</h1><p>In Lambda Calculus, we cannot refer to the Lambda Abstraction <em>itself</em> within a Lambda Abstraction. Thus, we cannot straightforwardly implement recursion. A workaround for this is <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed-point_combinators_in_lambda_calculus">Y Combinators</a>, in which we add <em>another parameter</em> to the Lambda Abstraction, which is passed the Lambda Abstraction <em>itself</em> when the Lambda Abstraction is being Applied.</p><p>Similarly, C++ does not allow defining a recursive lambda expression. A workaround is to add another parameter to the lambda expression, which would be used for recursive calling and is passed the value of the lambda expression <em>itself</em> when the lambda expression is being called. We can intuitively name this parameter “itself.”</p><p>The type of <code>itself</code> is the type of the lambda expression, which has to be inferred. Thus, we should use <code>auto</code> to represent its type. Using <code>auto</code> in a lambda expression’s parameter list requires C++14 or above.</p><p>For example, we can write the following lambda expression to calculate the <code>n</code>th Fibonacci Number recursively:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> fib = [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> itself, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>This lambda expression can be called like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib</span>(fib, input);<br></code></pre></td></tr></table></figure><p>C++ compilers can optimize for such usages. For example, the following program:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> fib = [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> itself, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">itself</span>(itself, n - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> input;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;input);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib</span>(fib, input);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, result);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>compiles to the following LLVM IR with <code>clang++ -std=c++14 -O1 -S -emit-llvm</code>, where calling <code>fib</code> within <code>main</code> has been transformed to calling a recursive function <code>_ZNK3$_0clIS_EEmT_j</code>, with the first parameter <code>itself</code> optimized. </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%u<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%lu\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>)<br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: inlinehint nounwind readnone uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%0</span>) <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-variable">#3</span> <span class="hljs-keyword">align</span> <span class="hljs-number">2</span> &#123;<br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%3</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%9</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%2</span><br>  ]<br><br><span class="hljs-number">2</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">3</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-1</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>)<br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clIS_EEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%6</span>)<br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%5</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">9</span>:                                                <span class="hljs-comment">; preds = %1, %3, %2</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">phi</span> <span class="hljs-type">i64</span> [ <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%2</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%3</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%1</span> ]<br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%10</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure><h1 id="Type-Abstractions-and-Template-Functions"><a href="#Type-Abstractions-and-Template-Functions" class="headerlink" title="Type Abstractions and Template Functions"></a>Type Abstractions and Template Functions</h1><p>Polymorphic Lambda Calculus (also known as Second Order Lambda Calculus or System F) introduces Type Abstractions and Type Applications.</p><ul><li>A Type Abstraction, written as <code>λ X . t</code>, represents a Term (often a Lambda Abstraction) <code>t</code> containing a Type Variable <code>X</code>.</li><li>A Type Application, written as <code>t [T]</code>, uses a Concrete Type <code>T</code> to replace all instances of the Type Variable in the Term of the Type Abstraction.</li></ul><p>This can be used to implement Polymorphic Lambda Abstractions.</p><p>For example, the following Type Abstraction representing a Polymorphic Identity Function:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">id</span> = λ X . λ x: X . x<br></code></pre></td></tr></table></figure><p>can be instantiated to yield any concrete identity function that may be required, such as <code>id [Nat]: Nat -&gt; Nat</code>.</p><p>Such Type Abstractions can be implemented in C++ using template functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">id</span><span class="hljs-params">(X x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>while Type Applications correspond to template instantiations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">id&lt;<span class="hljs-type">int</span>&gt;<br></code></pre></td></tr></table></figure><p>Should the template function be passed a callable, we usually want to use a template typename to support functions, function pointers, functors, and lambda expressions. Alternatively, we can also use <code>auto</code> to represent its type in the template function’s parameter list. Note that using <code>auto</code> in a (non-lambda expression) function’s parameter list requires C++20 or above.</p><p>For example, the following Type Abstraction:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">double = λ <span class="hljs-keyword">X</span> . λ f: <span class="hljs-keyword">X</span> -&gt; <span class="hljs-keyword">X</span> . λ a: <span class="hljs-keyword">X</span> . f(f a)<br></code></pre></td></tr></table></figure><p>can be represented using the following template function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> F&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> F f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>or in C++20 or above:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ compilers support aggressive inlining optimizations when lambda expressions are used. For example, the call to <code>const auto g = double_&lt;int&gt;([](int x) &#123; return 2 * x; &#125;);</code> in the following source code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> g = <span class="hljs-built_in">double_</span>&lt;<span class="hljs-type">int</span>&gt;([](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x; &#125;);<br>    <br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">g</span>(input));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>has been completely inlined to <code>%5 = shl i32 %4, 2</code> in the LLVM IR generated with <code>clang++ -std=c++20 -O2 -S -emit-llvm</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">shl</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Y-Combinators-and-Recursive-Lambda-Expressions&quot;&gt;&lt;a href=&quot;#Y-Combinators-and-Recursive-Lambda-Expressions&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="C++" scheme="https://abbaswu.github.io/categories/Code/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 22</title>
    <link href="https://abbaswu.github.io/2023/02/26/Paper-Review-Types-and-Programming-Languages-Chapter-22/"/>
    <id>https://abbaswu.github.io/2023/02/26/Paper-Review-Types-and-Programming-Languages-Chapter-22/</id>
    <published>2023-02-26T08:00:00.000Z</published>
    <updated>2023-02-26T21:54:43.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 22 of “Types and Programming Languages” explores the problem of Type Reconstruction (Type Inference) or deriving Types for Unannotated Arguments of Lambda Abstractions. It first introduces Type Variables and Substitutions before formalizing the Type Reconstruction problem. Then, it points out that Type Reconstruction can be implemented using a Constraint Typing Algorithm or an Algorithm that calculates a Set of Constraints between Types involving Type Variables and records them for later consideration, and proves the Completeness and Soundness of Constraint Typing. Moreover, it introduces a Unification Algorithm to calculate Principle Solutions (most general solutions) to Constraint Sets. Finally, the Chapter presents how the Typing Rules for Let Expressions can be modified to support Let Polymorphism - allowing an Untyped Function to generate different Constraints, thus be able to be Reconstructed to Different Types when applied to Terms of different Types.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, Chapter 22 is clearly written, and several sections intrigued me (such as that Parametric Polymorphism and Type Reconstruction can result from two different interpretations of Dependent Types containing Type Variables). Moreover, this Chapter provides essential inspiration for my Class Project, “Inferring Feasible Types for the Parameters and Return Values of Python Functions.” However, the Chapter also used some Concepts without introducing them (such as the Unification Problem), and I had to look into them to understand parts of the Chapter.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><h3 id="Completeness-and-Soundness-of-a-Theory"><a href="#Completeness-and-Soundness-of-a-Theory" class="headerlink" title="Completeness and Soundness of a Theory"></a>Completeness and Soundness of a Theory</h3><p>Using $TRUE$ and $PROVABLE$ to represent the Set of Facts that are True and Provable under a Theory, respectively:</p><ul><li>Completeness: $TRUE \subseteq PROVABLE$ or every Fact that is True is also Provable (but there may be some Facts that are Provable but are not True).</li><li>Soundness: $PROVABLE \subseteq TRUE$ or every Fact that is Provable is also True (but there may be some True Facts that are not Provable).</li><li>Completeness and Soundness: $TRUE &#x3D; PROVABLE$.</li></ul><p>An ideal Theory should be both Complete and Sound.</p><h3 id="Unification-Problem"><a href="#Unification-Problem" class="headerlink" title="Unification Problem"></a>Unification Problem</h3><p>Given two Terms containing some Variables, find a Substitution (an Assignment of Terms to Variables) that makes the two Terms equal.</p><p>For example, given $f(x_1, h(x_1), x_2) &#x3D; f(g(x_3), x_4, x_3)$, a valid Substitution is $\sigma &#x3D; {g(x_3): x_1, x_3: x_2, h(g(x_3)): x_4}$.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="Parametric-Polymorphism-and-Type-Reconstruction"><a href="#Parametric-Polymorphism-and-Type-Reconstruction" class="headerlink" title="Parametric Polymorphism and Type Reconstruction"></a>Parametric Polymorphism and Type Reconstruction</h3><p>Given Dependent Types containing Type Variables (often the result of the Programmer leaving out Type Annotations in Source Code), we can make one of the following assumptions.</p><ul><li>All Substitution Instances are well-typed. Thus, it is possible for Type Variables to be held abstract during Type Checking and only be Substituted for Concrete Types later on. This is the basis of Parametric Polymorphism.</li><li>Not all Substitution Instances are well-typed. In this case, we want to look for <em>valid</em> Substitutions. This leads us to the problem of Type Reconstruction.</li></ul><h3 id="Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them"><a href="#Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them" class="headerlink" title="Deriving Constraint Sets and Calculating Solutions to Them"></a>Deriving Constraint Sets and Calculating Solutions to Them</h3><p>To explore valid ways that Concrete Types can substitute Type Variables, we can calculate a Set of Constraints between Types involving Type Variables. This is similar to an ordinary Type Checking Algorithm checking Requirements in the Premise but records these Requirements as Constraints for later consideration instead of checking them immediately.</p><p>After we have generated a Constraint Set, we can use a Unification Algorithm to calculate Solutions to it. The Unification Algorithm proposed in the Chapter removes a Constraint from the Constraint Set, processes it, and recursively processes the remaining Constraint Set.</p><p>There is a most general way to instantiate the Type Variables. This is known as a Principle Solution, which contains Principle Types, or the most general types, for Type Variables.</p><h2 id="Inspirations-From-This-Paper"><a href="#Inspirations-From-This-Paper" class="headerlink" title="Inspirations From This Paper"></a>Inspirations From This Paper</h2><p>This Paper points out a viable way to implement my Class Project “Inferring Feasible Types for the Parameters and Return Values of Python Functions.”</p><ul><li>Propose Typing Rules for Python Expressions.</li><li>Implement an Algorithm similar to an ordinary Type Checking Algorithm checking Requirements in the Premise, but which records these Requirements as Constraints for later consideration instead of checking them immediately.</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul><li>What are the specific types of Constraints that are recorded when deriving Constraint Sets? What do the derived Constraint Sets look like?</li><li>Implementing the Unification Algorithm proposed to calculate Solutions to the Constraint Set seems non-trivial. Are there any implementations of it for more “real-world” (imperative, non-ML Family) Programming Languages? What adjustments have to be made to accomplish such an implementation?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapter 22 of “Types and Programming Languages” ex</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Displaying Information for Thrown and Caught Exceptions to the User in Python</title>
    <link href="https://abbaswu.github.io/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/"/>
    <id>https://abbaswu.github.io/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/</id>
    <published>2023-02-20T08:00:00.000Z</published>
    <updated>2023-02-20T19:51:07.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exception-Semantics-in-Python"><a href="#Exception-Semantics-in-Python" class="headerlink" title="Exception Semantics in Python"></a>Exception Semantics in Python</h2><p>Exception handling refers to how a program reacts when unexpected events, known as exceptions, occur throughout the program’s execution.</p><p>Exception semantics varies considerably among programming languages. Based on this, we can divide programming languages into <a href="https://doi.org/10.1007%2F11818502_16">two groups</a>:</p><ul><li>Programming languages that only employ exceptions to address exceptional, unforeseen, or incorrect circumstances, such as C++, Java, and C#.</li><li>Programming languages that use exceptions as standard flow control structures, such as Ada, ML, OCaml, Python, and Ruby. For example, in Python, when an iterator has exhausted its output, and no more items can be generated, an exception of type StopIteration is thrown.</li></ul><p>As a result, exceptions are pervasive in Python, and exception catching and handling is a must for writing robust Python code.</p><h2 id="Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User"><a href="#Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User" class="headerlink" title="Displaying Information for Thrown and Caught Exceptions to the User"></a>Displaying Information for Thrown and Caught Exceptions to the User</h2><p>In many situations, it is beneficial to handle the exception and give a user a “loud and clear” message of what has happened as feedback. This is also particularly useful in investigating the root cause of the exception and whether it is the tip of the iceberg of a more significant latent bug.</p><p>This can be simplified by the fact that exceptions thrown by built-in functions, standard library functions, and functions in many well-tested third-party libraries all contain rich semantics in:</p><ul><li>The class of the exception. Given an exception <code>e</code>, it is accessible via <code>type(e)</code>, and <code>type(e).__name__</code> gives a <code>str</code> representation.</li><li>The message of the exception. Given an exception <code>e</code>, <code>str(e)</code> generates a representation of the argument(s) to the instance.</li></ul><p>In command-line programs, we can write both of them to <code>stderr</code>, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> stderr<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Do some potentially erroneous operation</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># Write the class of the exception and the message of the exception to stderr</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e), file=stderr)<br></code></pre></td></tr></table></figure><p>In GUI programs, we can display them in a message box, with the class of the exception being the title of the message box and the message of the exception being the message of the message box, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> Slot<br><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QDialog, QMessageBox<br><br><span class="hljs-keyword">from</span> .ui <span class="hljs-keyword">import</span> Ui_ConnectToServerDialog<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectToServerDialog</span>(<span class="hljs-title class_ inherited__">QDialog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(parent)<br><br>        self.ui=Ui_ConnectToServerDialog()<br>        self.ui.setupUi(self)<br>        self.ui.connectPushButton.clicked.connect(self.accept)<br>        <br>        self.server=<span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @Slot()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Do some operation that involves potentially erroneous user input</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># Display the exception thrown in a QMessageBox</span><br>            <span class="hljs-comment"># The type of the exception is the title of the QMessageBox</span><br>            <span class="hljs-comment"># The message of the exception is the message of the QMessageBox</span><br>            QMessageBox.about(self, <span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-built_in">super</span>().accept()<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages">https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages</a></li><li><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">https://docs.python.org/3/library/exceptions.html#bltin-exceptions</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exception-Semantics-in-Python&quot;&gt;&lt;a href=&quot;#Exception-Semantics-in-Python&quot; class=&quot;headerlink&quot; title=&quot;Exception Semantics in Python&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Using ffmpeg to Manipulate Video Files</title>
    <link href="https://abbaswu.github.io/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/"/>
    <id>https://abbaswu.github.io/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/</id>
    <published>2023-02-18T08:00:00.000Z</published>
    <updated>2023-02-18T22:56:52.940Z</updated>
    
    <content type="html"><![CDATA[<p>FFmpeg is a collection of libraries and tools for manipulating video, audio, and other multimedia files and streams. It is frequently used for basic editing (cutting and joining), video scaling, post-production video effects, and standard compliance (SMPTE, ITU). </p><p>The main component of FFmpeg is the command-line tool <code>ffmpeg</code>, which reads an input file, applies transformations, and writes to an output file.</p><p>The basic usage pattern of <code>ffmpeg</code> is <code>ffmpeg -i &lt;input file&gt; [options] &lt;output file&gt;</code>. <code>ffmpeg</code> automatically selects the decoder and encoder based on the extension of <code>&lt;input file&gt;</code> and <code>&lt;output file&gt;</code>, and we specify what transformations we apply to the original video file in <code>[options]</code>.</p><p>We now explain what to write in <code>[options]</code> to address typical video manipulation demands.</p><h1 id="Cut-a-Video"><a href="#Cut-a-Video" class="headerlink" title="Cut a Video"></a>Cut a Video</h1><p>Add the option <code>-ss &lt;start time in hours&gt;:&lt;start time in minutes&gt;:&lt;start time in seconds&gt; -to &lt;end time in hours&gt;:&lt;end time in minutes&gt;:&lt;end time in seconds&gt;</code>.</p><p>If there is no need to transcode the video format or apply other transformations, add <code>-c:v copy -c:a copy</code> for increased speed.</p><p>For example, <code>ffmpeg -i input.mp4 -ss 00:05:10 -to 00:15:30 -c:v copy -c:a copy output.mp4</code> saves <code>input.mp4</code> from 00:05:10 to 00:15:30 to <code>output.mp4</code> with no transcoding or other transformations, resulting in a 10 minutes and 20 seconds video.</p><h1 id="Change-Frame-Rate"><a href="#Change-Frame-Rate" class="headerlink" title="Change Frame Rate"></a>Change Frame Rate</h1><p>Add the option <code>-r &lt;frame rate&gt;</code>.</p><p>For example, <code>ffmpeg -i input.mp4 -r 12 output.gif</code> controls the frame rate of <code>output.gif</code> generated by transcoding to 12FPS.</p><h1 id="Change-Output-Resolution"><a href="#Change-Output-Resolution" class="headerlink" title="Change Output Resolution"></a>Change Output Resolution</h1><p>Add the option <code>-s &lt;length&gt; x &lt;width&gt;</code>. The units of <code>&lt;length&gt;</code> and <code>&lt;width&gt;</code> are in pixels.</p><p>It is usually required that the length and width be scaled equally from the original length and width to avoid distortion of the picture.</p><p>For example, <code>ffmpeg -i input.mp4 -s 320x180 output.gif</code> controls the resolution of the <code>output.gif</code> generated by transcoding to 320x180.</p><h1 id="Change-Playback-Speed"><a href="#Change-Playback-Speed" class="headerlink" title="Change Playback Speed"></a>Change Playback Speed</h1><ul><li>To speed up the output video to k times its original size: add the option <code>-filter:v &#39;setpts=PTS/&lt;k&gt;&#39;</code>.</li><li>To slow down the output video to k times the original: add the option <code>-filter:v &#39;setpts=&lt;k&gt;*PTS&#39;</code>.</li></ul><p>For example, <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=PTS/2&#39; output.gif</code> (or <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=0.5*PTS&#39; output.gif</code>) will transcode the resulting <code>output.gif</code> to speed up to 2 times the original.</p><h1 id="Extract-Audio"><a href="#Extract-Audio" class="headerlink" title="Extract Audio"></a>Extract Audio</h1><p>Before we extract audio, we need to first look up media information using <code>ffprobe</code>, a command-line tool installed with <code>ffmpeg</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ffprobe video.mkv<br>...<br>Input <span class="hljs-comment">#0, matroska,webm, from &#x27;video.mkv&#x27;:</span><br>  Metadata:<br>    encoder         : no_variable_data<br>    creation_time   : 1970-01-01T00:00:00.000000Z<br>  Duration: 00:23:30.07, start: 0.000000, bitrate: 1392 kb/s<br>    Stream <span class="hljs-comment">#0:0: Audio: aac (LC), 48000 Hz, stereo, fltp (default)</span><br>    Metadata:<br>...<br></code></pre></td></tr></table></figure><p>We can see that the format of the audio stream is aac. Now, we can add the option <code>-map 0:a -acodec copy</code> to copy the audio stream. Note that the extension of output file should correspond with the format of the audio stream.</p><p>For example, we run the following command to save the audio stream of <code>video.mkv</code> to <code>audio.mp4</code>: <code>ffmpeg -i video.mkv -map 0:a -acodec copy audio.mp4</code>. Note that <code>.mp4</code> is a valid extensions of aac audio streams.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/FFmpeg">https://en.wikipedia.org/wiki/FFmpeg</a></li><li><a href="https://shotstack.io/learn/use-ffmpeg-to-trim-video/">https://shotstack.io/learn/use-ffmpeg-to-trim-video/</a></li><li><a href="https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/">https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/</a></li><li><a href="https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681">https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681</a></li><li><a href="https://www.baeldung.com/linux/ffmpeg-audio-from-video">https://www.baeldung.com/linux/ffmpeg-audio-from-video</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;FFmpeg is a collection of libraries and tools for manipulating video, audio, and other multimedia files and streams. It is frequently use</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Unix" scheme="https://abbaswu.github.io/categories/Code/Unix/"/>
    
    
  </entry>
  
  <entry>
    <title>Easily Syncing a Local Directory With a Remote Directory via FTP</title>
    <link href="https://abbaswu.github.io/2023/02/16/Easily-Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/"/>
    <id>https://abbaswu.github.io/2023/02/16/Easily-Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/</id>
    <published>2023-02-16T08:00:00.000Z</published>
    <updated>2023-02-26T17:02:06.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Easily-Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP"><a href="#Easily-Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP" class="headerlink" title="Easily Syncing a Local Directory With a Remote Directory via FTP"></a>Easily Syncing a Local Directory With a Remote Directory via FTP</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>We can use the following Sequence Diagram to depict the process of modifying the Files within a Local Directory and a Remote Directory before syncing the two Directories via the <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">File Transfer Protocol (FTP)</a>, a standard communication protocol used on computer networks to send files between a Client and a Server.</p><pre><code class=" mermaid">sequenceDiagram    loop        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Start FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Start FTP Client        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Connect to FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Mirror Remote Directory -&gt; Local Directory        Machine With the FTP Server --&gt;&gt; Machine With the FTP Client: Update Local Directory With Changed Files in Remote Directory        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Reverse Mirror Local Directory -&gt; Remote Directory        Machine With the FTP Client --&gt;&gt; Machine With the FTP Server: Update Remote Directory With Changed Files in Local Directory    end</code></pre><h2 id="Setting-Up-the-Machine-With-the-FTP-Client"><a href="#Setting-Up-the-Machine-With-the-FTP-Client" class="headerlink" title="Setting Up the Machine With the FTP Client"></a>Setting Up the Machine With the FTP Client</h2><p>Obviously, we need to install an FTP Client on this Machine. Personally, I recommend installing <a href="https://lftp.yar.ru/"><code>lftp</code></a>, a “sophisticated” file transfer program. Unlike a standard FTP Client, which only enables you to upload or download files, <code>lftp</code> additionally enables you to maintain file synchronisation using its built-in <code>mirror</code> command.</p><h2 id="Setting-Up-the-Machine-With-the-FTP-Server"><a href="#Setting-Up-the-Machine-With-the-FTP-Server" class="headerlink" title="Setting Up the Machine With the FTP Server"></a>Setting Up the Machine With the FTP Server</h2><p>We would also need an FTP Server on the other Machine. Although there are many existing UNIX FTP servers, such as <code>proftpd</code> and <code>vsftpd</code>, they are usually tricky to compile, configure, and set up and require Root Privileges to run, which is tedious, if not impossible, in many situations.</p><p>As an alternative, we write our own FTP Server using <a href="https://github.com/giampaolo/pyftpdlib"><code>pyftpdlib</code></a>, a pure Python FTP server library written which offers a high-level interface to creating portable and efficient FTP servers. Such a solution requires us to have a Python environment running on the Machine With the FTP Server and install <code>pyftpdlib</code>, which is very simple in today’s world where the Python ecosystem is ubiquitous.</p><p>After setting up a Python environment and installing <code>pyftpdlib</code>, we can write a script for an FTP server. Below is the script that I am using. By default, it sets up a user <code>user</code> with password <code>12345</code> and listens on port <code>2121</code> of the Machine With the FTP Server’s Outbound IP Address, but these settings can all be tweaked by providing command-line arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<br><span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<br><span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_outbound_ip_address</span>():<br>    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># doesn&#x27;t even have to be reachable</span><br>        s.connect((<span class="hljs-string">&#x27;10.255.255.255&#x27;</span>, <span class="hljs-number">1</span>))<br>        IP = s.getsockname()[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">except</span> Exception:<br>        IP = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>    <span class="hljs-keyword">finally</span>:<br>        s.close()<br>    <span class="hljs-keyword">return</span> IP<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_command_line_arguments</span>():<br>    parser = argparse.ArgumentParser()<br><br>    parser.add_argument(<span class="hljs-string">&#x27;--user&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Define a user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;The password of the user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--anonymous&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Add read-only anonymous user&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--root&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=os.getcwd(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Root directory in FTP server&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--host&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=get_outbound_ip_address(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Host to listen on&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--port&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-number">2121</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Port to listen on&#x27;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">return</span> args.user, args.password, args.anonymous, args.root, args.host, args.port<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Parse command line arguments</span><br>    user, password, anonymous, root, host, port = parse_command_line_arguments()<br><br>    <span class="hljs-comment"># Instantiate a dummy authorizer for managing &#x27;virtual&#x27; users</span><br>    authorizer = DummyAuthorizer()<br><br>    <span class="hljs-comment"># Define a new user having full r/w permissions</span><br>    authorizer.add_user(user, password, root, perm=<span class="hljs-string">&#x27;elradfmwMT&#x27;</span>)<br><br>    <span class="hljs-comment"># Add anonymous user</span><br>    <span class="hljs-keyword">if</span> anonymous:<br>        authorizer.add_anonymous(root)<br><br>    <span class="hljs-comment"># Instantiate FTP handler class</span><br>    handler = FTPHandler<br>    handler.authorizer = authorizer<br><br>    <span class="hljs-comment"># Define a customized banner (string returned when client connects)</span><br>    handler.banner = <span class="hljs-string">&quot;pyftpdlib based ftpd ready.&quot;</span><br><br>    <span class="hljs-comment"># Instantiate FTP server class and listen on &lt;host&gt;:&lt;port&gt;</span><br>    server = FTPServer((host, port), handler)<br><br>    <span class="hljs-comment"># Start FTP server</span><br>    server.serve_forever()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>Save this to a file, and run <code>chmod +x</code> on the file to make it executable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd -h<br>usage: pyftpd [-h] [--user USER] [--password PASSWORD] [--anonymous] [--root ROOT] [--host HOST] [--port PORT]<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>           show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  --user USER          Define a user having full <span class="hljs-built_in">read</span>/write permissions<br>  --password PASSWORD  The password of the user having full <span class="hljs-built_in">read</span>/write permissions<br>  --anonymous          Add read-only anonymous user<br>  --root ROOT          Root directory <span class="hljs-keyword">in</span> FTP server<br>  --host HOST          Host to listen on<br>  --port PORT          Port to listen on<br>abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd <br>[I 2023-02-16 15:47:39] &gt;&gt;&gt; starting FTP server on 10.43.111.144:2121, pid=11969 &lt;&lt;&lt;<br>[I 2023-02-16 15:47:39] concurrency model: async<br>[I 2023-02-16 15:47:39] masquerade (NAT) address: None<br>[I 2023-02-16 15:47:39] passive ports: None<br></code></pre></td></tr></table></figure><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>Last but not least, we will present a demonstration of syncing a Local Directory With a Remote Directory via FTP.</p><p>Our Local Directory is a directory named <code>mirror_ubuntu</code> with two files <code>mirror_ubuntu_1.txt</code> and <code>mirror_ubuntu_2.txt</code> on the Machine With the FTP Client.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ubuntu_directory.png" alt="Local Directory"></p><p>Our Remote Directory is a directory named <code>mirror_ipad</code> with two files <code>mirror_ipad_1.txt</code> and <code>mirror_ipad_2.txt</code> on the Machine With the FTP Server, which is the <a href="https://ish.app/">iSH</a> app running within an iPad.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ipad_directory.png" alt="Remote Directory"></p><p>We start the FTP Server on the Machine With the FTP Server, and start the FTP Client on the Machine With the FTP Client.</p><p>As depicted in <a href="#Overview">Overview</a>, we first Mirror Remote Directory to Local Directory, which can be accomplished by running <code>mirror --continue --no-perms &lt;Remote Directory&gt; &lt;Local Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirroring_mirror_ipad_directory.png" alt="Mirroring Remote Directory to Local Directory"></p><p>The Local Directory will now contain Files that were modified the Remote Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ubuntu_directory_after_mirroring_mirror_ipad_directory.png" alt="Local Directory After Mirroring Remote Directory to Local Directory"></p><p>Afterwards, we Reverse Mirror Local Directory to Remote Directory, which can be accomplished by running <code>mirror --continue --no-perms --reverse &lt;Local Directory&gt; &lt;Remote Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/reverse_mirroring_mirror_ubuntu_directory.png" alt="Reverse Mirroring Local Directory to Remote Directory"></p><p>The Remote Directory will now contain Files that were modified the Local Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ipad_directory_after_reverse_mirroring_mirror_ubuntu_directory.png" alt="Remote Directory After Reverse Mirroring Local Directory to Remote Directory"></p><p>At this point, the Local Directory has been successfully synced with the Remote Directory.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/">https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/</a></li><li><a href="https://github.com/giampaolo/pyftpdlib">https://github.com/giampaolo/pyftpdlib</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Easily-Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP&quot;&gt;&lt;a href=&quot;#Easily-Syncing-a-Local-Directory-With-a-Remote-Directory</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 15 and Chapter 16</title>
    <link href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/"/>
    <id>https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/</id>
    <published>2023-02-10T08:00:00.000Z</published>
    <updated>2023-02-11T06:48:49.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 15, “Subtyping,” describes adding Subtyping with Functions and Records into Simply Typed Lambda Calculus. It formalizes the Subtype Relation as a collection of Inference Rules, verifies that verify that the Preservation and Progress Theorems of Simply Typed Lambda Calculus still apply, examines Ascription (or Casting) in the context of Subtyping, and proposes Subtyping Rules for Variants, Lists, References, and Arrays. Finally, it presents alternative Coercion Semantics for Subtyping. Chapter 16, “Metatheory of Subtyping,” observes that the Subtyping Rules presented in the previous chapter are not syntax-directed and have overlapping conclusions, which impedes implementing a Typechecking Algorithm, and develops the Algorithmic Subtype Relation and the Algorithmic Typing Relation to address these problems.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><h2 id="Acquired-Insights"><a href="#Acquired-Insights" class="headerlink" title="Acquired Insights"></a>Acquired Insights</h2><p>I will first summarize the insights that I gained while reading these Chapters.</p><p>An empty Bottom Type is useful, both as a way of expressing that a Function is not intended to return and telling the Typechecker that the Term can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial, especially for Downcasting. As blindly following Type Assertions may lead to potentially serious consequences, the Compiler would need to insert a Runtime Type Check, essentially adding the Machinery for Typechecking to the Runtime System. This might incur a significant performance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is a physical relationship between Types, Subtyping generally is more of a <em>logical relationship</em> between Types. For example, in the alternative Coercion Semantics for Subtyping, we can consider that <code>int</code> and <code>float</code>, two Types that do not inherit from one another, have a Subtyping Relation, as they can be converted to one another. In this case, the Subtyping Relation is compiled to Coercions at runtime (instructions physically converting an <code>int</code> to a <code>float</code>, or vice versa), which are much more efficient than virtual function calls frequently seen in an Inheritance Based Class Hierarchy.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><p>There is no doubt that the Chapters are written in great detail. However, I find some of the content, especially the terminology, a little difficult to understand, and I have looked into background knowledge concerning the topic. Below summarizes what I have read.</p><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism describes that a single Interface can work with Terms of Different Types in Programming Languages. There are different kinds of Polymorphism in the context of Programming Languages, including:</p><h4 id="Parametric-Polymorphism"><a href="#Parametric-Polymorphism" class="headerlink" title="Parametric Polymorphism"></a>Parametric Polymorphism</h4><p>Also known as “Generic Programming”. Using Abstract Symbols that can substitute for any Type instead of specifying Concrete Types in Interfaces. C++’s Template Metaprogramming comes close to Parametric Polymorphism (except for Template Specializations).</p><h4 id="Ad-Hoc-Polymorphism"><a href="#Ad-Hoc-Polymorphism" class="headerlink" title="Ad Hoc Polymorphism"></a>Ad Hoc Polymorphism</h4><p>Defining a Common Interface for a Set of Individually Specified Types. Includes Function Overloading, Operator Overloading, and C++’s Template Metaprogramming with Template Specializations.</p><h4 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h4><p>It is a form of Polymorphism in which the Terms of a Subtype <code>T</code>, which is related to another Type known as the Supertype <code>T&#39;</code> in some way, can be safely used in any Context where the Terms of <code>T&#39;</code> are used.</p><p>The Concept of Subtyping has gained visibility with the advent of Object Oriented Programming Languages, where it is frequently the case that an Inheritance Based Class Hierarchy forms the basis of Subtyping, and such Safe Substitution is known as the Liskov Substitution Principle.</p><p>However, stepping out of this specific and widely known context, there are several different Schemes of Subtyping. They can be broadly classified along two dimensions: Nominal Subtyping vs. Structural Subtyping and Inclusive Implementations vs. Coercive Implementations.</p><p>Nominal Subtyping requires the Subtyping Relation to be explicitly declared among the two Types. This is the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. In contrast, in Structural Subtyping, a Type <code>T</code> is <strong>implicitly</strong> the Subtype of another Type <code>T&#39;</code> if Terms of <code>T</code> has all the Properties of Terms of <code>T&#39;</code> and can handle all the Messages Terms of <code>T&#39;</code> can handle. This is closely related to Row Polymorphism or the so-called Duck Typing in Dynamically Typed Programming Languages.</p><p>On another dimension, Implementations of Subtyping can be divided into Inclusive Implementations and Coercive Implementations. In Inclusive Implementations, any Term of a Subtype, left unchanged, is <strong>automatically</strong> a Term of a Supertype. This is often the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. A Term can have multiple Types in this situation. In contrast, Coercive Implementations are defined by <strong>Type Conversion Functions</strong> from Subtype to Supertype and allow a Term of a Subtype to be <strong>converted</strong> to a Term of a Supertype, such as the case for <code>int</code>‘s, <code>float</code>‘s, and <code>str</code>‘s. It is also worth noticing that applying the Type Coercion Function from <code>A</code> to <code>B</code> and then from <code>B</code> to <code>C</code> might have a different result from directly applying the Type Coercion Function from <code>A</code> to <code>C</code>. For example, <code>str(float(2))</code> returns a value different from <code>str(2)</code>.</p><p>Based on the concept of Subtyping, the concept of Variance reference to how the Subtyping Relations between more complex Types relates to the Subtyping Relations between the simpler Types they include. For example, given that <code>Cat</code> is a Subtype of <code>Animal</code>, should a List of <code>Cat</code>‘s be a Subtype of a List of <code>Animal</code>‘s? What about a Function that takes a Term of Type <code>Cat</code> as an Arugument and a Function that takes a Term of Type <code>Animal</code> as an Arugument?</p><p>Different Programming Languages have different implementations, but most Programming Languages respect the following patterns.</p><ul><li>If the Complex Types are <strong>Read Only and&#x2F;or capable of returning Terms of the Simple Types</strong>, they should have the <strong>same</strong> Subtyping Relations as the Simple Types. This is known as <strong>Covariance</strong>. For example,<ul><li>A read-only List of <code>Cat</code>‘s can be used whenever a read-only List of <code>Animal</code>‘s is required, as each Term read from the read-only List of <code>Cat</code>‘s is of Type <code>Cat</code>, which is a Subtype of <code>Animal</code>. In other words, <code>const List&lt;Cat&gt;</code> <em>is</em> a Subtype of <code>const List&lt;Animal&gt;</code>.</li><li>It is not safe to use a <code>const List&lt;Animal&gt;</code> where a <code>const List&lt;Cat&gt;</code> is required, as a Term read from a <code>const List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. In other words, <code>const List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>const List&lt;Cat&gt;</code>.</li></ul></li><li>If the Complex Types are <strong>Write Only and&#x2F;or capable of accepting Terms of the Simple Types as Parameters</strong>, they should have the <strong>opposite</strong> Subtyping Relations as the Simple Types. This is known as <strong>Contravariance</strong>. For example,<ul><li>A Function that takes a Term of Type <code>Animal</code> as a Parameter may be used where a Function that takes a Term of Type <code>Cat</code> as a Parameter is used, as each Term of Type <code>Cat</code> can also be passed as a Parameter of Type <code>Animal</code>. In other words, <code>Animal -&gt; T</code> <em>is</em> a Subtype of <code>Cat -&gt; T</code>.</li><li>It is not safe to use a <code>Cat -&gt; T</code> where an <code>Animal -&gt; T</code> is required, as a Term of Type <code>Animal</code> may not be passed as a Parameter of Type <code>Cat</code>. In other words, <code>Cat -&gt; T</code> <em>is not</em> a Subtype of <code>Animal -&gt; T</code>.</li></ul></li><li>If the Complex Types are <strong>Read&#x2F;Write</strong>, they should have <strong>no</strong> Subtying Relations. This is known as <strong>Invariance</strong>. For example,<ul><li>A Term written into a <code>List&lt;Animal&gt;</code> need not be of Type <code>Cat</code>, but a Term written into a (non-constant) <code>List&lt;Cat&gt;</code> <em>must</em> be of Type <code>Cat</code>. Thus, it is not safe to use a <code>List&lt;Cat&gt;</code> where a <code>List&lt;Animal&gt;</code> is required. In other words, <code>List&lt;Cat&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Animal&gt;</code>.</li><li>A Term read from a (non-constant) <code>List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. Thus it is not safe to use a <code>List&lt;Animal&gt;</code> where a <code>List&lt;Cat&gt;</code>is required. In other words, <code>List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Cat&gt;</code>.</li></ul></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</a></li><li><a href="https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism">https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism</a></li><li><a href="https://en.wikipedia.org/wiki/Subtyping">https://en.wikipedia.org/wiki/Subtyping</a></li><li><a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapter 15, “Subtyping,” describes adding Subtypin</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 13 and Chapter 14</title>
    <link href="https://abbaswu.github.io/2023/02/05/Paper-Review-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/"/>
    <id>https://abbaswu.github.io/2023/02/05/Paper-Review-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/</id>
    <published>2023-02-05T08:00:00.000Z</published>
    <updated>2023-02-05T19:48:55.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapters 13 and 14 of “Types and Programming Languages” discuss adding Impure Features, also known as Computational Effects, into Simply Typed Lambda Calculus. Specifically, Chapter 13 discusses adding References to Mutable Cells that can be Allocated, Dereferenced, and Assigned and formalizes their Operational Behavior. Chapter 14 gradually adds Raising and Handling Exceptions, starting from a Term <code>error</code> of any Type that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, before supporting Exception Handling, as well as Raising a Value (potentially containing information about what unusual thing happened) as an Exception.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, I believe these two Chapters are written very well, as they progressively add realistic features to Simply Typed Lambda Calculus. I will summarize takeaways from this paper before presenting some questions and comments.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="References-to-Mutable-Cells"><a href="#References-to-Mutable-Cells" class="headerlink" title="References to Mutable Cells"></a>References to Mutable Cells</h3><p>The Formalization of the Operational Behavior of References to Mutable Cells encompasses Allocations (providing an initial value to a Mutable Cell), Dereferences (reading the current value of the referenced Cell), and Assignments (changing the value stored in the referenced Cell), but not Deallocations. Explicit Deallocations lead to the Dangling Reference Problem, which undermines Type Safety. Instead, References to Mutable Cells that are no longer needed should be Garbage Collected.</p><p>An interpretation of how Aliasing makes Program Analysis tricky is that Aliasing essentially sets up “Implicit Communication Channels in the form of Shared State” between different parts of a Program.</p><p>To formalize the Operational Behavior of References to Mutable Cells, we can consider a Reference $l \in L$, where $L$ is the set of Locations of the Program’s Store (a.k.a. Heap Memory) $\mu$.</p><p>As the result of Evaluating an Expression depends on the current contents of the Store and may cause Side Effects for the Store, Evaluation Rules should, in addition to Terms and Types, take the Store as an Argument and return a new Store as part of the result of Evaluating an Expression.</p><p>Furthermore, in a naive implementation of Typing Rules for References to Mutable Cells, the Type of the Reference depends on the Type of the Mutable Cell, e.g., $\frac{\Gamma \vdash \mu(l): T}{\Gamma \vdash l: \text{Ref} : T}$. However, this is inefficient where there are multiple levels of Indirection and is problematic where there are Cyclic References. To solve this problem, the Chapter proposes extending Typing Rules with a Store Typing $\Sigma$, which maps every Location $l \in L$ to a fixed, definite Type. In this case, the Typing Rule is written as $\frac{\Gamma | \Sigma \vdash \Sigma(l): T}{\Gamma | \Sigma \vdash l: \text{Ref} : T}$.</p><h3 id="Raising-and-Handling-Exceptions"><a href="#Raising-and-Handling-Exceptions" class="headerlink" title="Raising and Handling Exceptions"></a>Raising and Handling Exceptions</h3><p>The first (and most straightforward) Approach to Raising and Handling Exceptions, a Term <code>error</code> that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, effectively simulates Unwinding the Call Stack when it propagates <code>error</code> to the top level.</p><p>The final approach that supports both Exception Handling and Raising a Value as an Exception considers an Exception to be a Value $t_{exp}$ of Type $T_{exp}$ (instead of a Term <code>error</code>). It proposes a Term Constructor <code>raise t_&#123;exp&#125;</code> that describes Raising a Value as an Exception, and models Exception Handling with <code>try t_1 with t_2: T_1</code>, in which $t_1: T_1$ and $t_2: T_{exp} \rightarrow T_1$ (i.e., $t_2$ is a function, called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output). </p><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><p>After reading these two Chapters, the power of Functions as a Universal Abstraction has left a deep impression on me. For example:</p><ul><li>Arrays containing Terms of Type $T$ can be modeled as References to Functions of type $Nat \rightarrow T$. The Referenced Function looks up the Element given an Index.</li><li>Exception Handling is modeled with <code>try t_1 with t_2</code>, in which $t_2$ is a function called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output).</li></ul><p>This describes complex Side Effects in a realistic Programming Language in a Side Effect Free manner that is clean and easy to reason about while not sacrificing Expressiveness. Are there any other complex Side Effects that can be modeled like this using Functions?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapters 13 and 14 of “Types and Programming Langu</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Bi-directional type checking</title>
    <link href="https://abbaswu.github.io/2023/01/30/Paper-Review-Bi-directional-type-checking/"/>
    <id>https://abbaswu.github.io/2023/01/30/Paper-Review-Bi-directional-type-checking/</id>
    <published>2023-01-30T08:00:00.000Z</published>
    <updated>2023-02-01T20:51:56.304Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="http://www.davidchristiansen.dk/tutorials/bidirectional.pdf">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The paper first explains that except Syntax Directed Systems, Typing Rules cannot be directly translated into Algorithms for Type Checking and Type Inference. It presents a motivating example of this using a Simply Typed Lambda Calculus having Bool and Function as Types and Bool Constants, Variables, Function Abstractions, Function Applications, and Conditional Expressions as Terms, in which the Typing Rule for Function Abstractions cannot be directly translated into a Function for Type Inference.</p><p>It then presents Bidirectional Typing as a remedy to this problem. It explains what Bidirectional Typing is, discusses its advantage, and adds Bidirectional Typing into the previously presented Simply Typed Lambda Calculus, presenting how Bidirectional Typing works during the process.</p><p>Finally, it discusses the limitations of Bidirectional Typing and presents academic literature for further reading.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, I believe this paper is written very well, as I can grasp most of it after reading it. I will summarize my takeaways from this paper before presenting some questions and comments.</p><h2 id="My-Takeaways-From-This-Paper"><a href="#My-Takeaways-From-This-Paper" class="headerlink" title="My Takeaways From This Paper"></a>My Takeaways From This Paper</h2><h3 id="What-Bidirectional-Typing-Is"><a href="#What-Bidirectional-Typing-Is" class="headerlink" title="What Bidirectional Typing Is"></a>What Bidirectional Typing Is</h3><p>Bidirectional Typing splits each Typing Rule $\Gamma \vdash t: T$ into:</p><ul><li>An Inference Rule $\Gamma \vdash t \Rightarrow T$, which <em>infers</em> $t$’s type to be $T$ in Context $\Gamma$.</li><li>A Type Checking Rule $\Gamma \vdash t \Leftarrow T$, which <em>checks</em> $t$’s type to be $T$ in Context $\Gamma$.</li></ul><p>The Inference Rules and Type Checking Rules would work together and call each other.</p><h3 id="Advantages-of-Bidirectional-Typing"><a href="#Advantages-of-Bidirectional-Typing" class="headerlink" title="Advantages of Bidirectional Typing"></a>Advantages of Bidirectional Typing</h3><ul><li>Makes general Typing Rules more Syntax Directed, thus, simplifying implementing Algorithms for Type Checking and Type Inference.</li><li>Requires relatively few additional Type Annotations.</li><li>Produces good error messages that report where the error occurs.</li></ul><h3 id="Limitations-of-Bidirectional-Typing"><a href="#Limitations-of-Bidirectional-Typing" class="headerlink" title="Limitations of Bidirectional Typing"></a>Limitations of Bidirectional Typing</h3><ul><li>Variables in a Derivation can no longer be replaced by the Derivation for a Term of the same Type. This is because Bidirectional Typing uses Inference Mode to check Variables but uses Checking Mode to check many other Terms.</li><li>In some situations, explicit Type Annotations may need to be written within complex Terms, such as a direct Application of a Function Abstraction, like <code>(λ b . if b then false else true) true: Bool</code></li></ul><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><ul><li>Page 8 mentions, “remember that the derivation, like the bidirectional typing rules, should be read bottom-to-top and left-to-right.” However, Inference Rules have the form of $\frac{Premise}{Conclusion}$. So, why should the derivation be read from Conclusion to Premise?</li><li>What are the meanings of the small-step rule $\frac{}{t : T \rightarrow t}$ and the large-step rule $\frac{t \Downarrow t’}{t : T \Downarrow t’}$ on Page 8?</li><li>I believe explicit Type Annotations should be enforced for the Parameters within Function Abstractions, such as <code>(λ b: Bool . if b then false else true)</code> instead of <code>(λ b . if b then false else true)</code>.<ul><li>This aligns with real-world programming languages (C++, Java, Rust, Swift, Haskell, etc.)</li><li>This increases readability.</li><li>This simplifies both the Typing Rules and the Inference Rules and Type Checking Rules of Bidirectional Typing.</li></ul></li></ul><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>Small Step Semantics, represented using $\rightarrow$’s, depict <strong>one step in Evaluation</strong>. For example, if $e$ is $true$ itself, $\text{if}: e : \text{then} : e_1 : \text{else} : e_2$ can be Evaluated <strong>in one step</strong> to $e_1$. This can be represented using $\frac{e \rightarrow true}{\text{if}: e : \text{then} : e_1 : \text{else} : e_2 \rightarrow e_1}$</p><p>Big Step Semantics, represented using $\Downarrow$’s, depict <strong>Reducing a Subexpression to a Value through several Small Steps</strong>. For example, if $e$ is a Subexpression that can be Reduced to $true$ after several Small Steps, $\text{if}: e : \text{then} : e_1 : \text{else} : e_2$ can be Reduced to $e_1$ <strong>after several Small Steps</strong>. This can be represented using $\frac{e \Downarrow true}{\text{if}: e : \text{then} : e_1 : \text{else} : e_2 \Downarrow e_1}$.</p><p>Syntax Directed means a one-to-one correspondence between the Type of the Term and the Syntax (Derivation of the Grammar Rules) of the Term.</p><p>There is no precise definition for Bidirectional Typing. Instead, Bidirectional Typing points a direction toward implementing a Type Inference&#x2F;Type Checking Algorithm.</p><p>In Bidirectional Typing, we prefer to start from Inference Mode because if we can Infer the Type of a Term, we can Check the Type of the Term, while Checking falls back on Inference.</p><p>Why is there only a Checking Rule and no Inference Rule for <code>if t then t else t</code>?</p><ul><li>This gives better error messages.<ul><li>Should the Terms in the <code>then</code> branch and the <code>else</code> branch have different types, it is possible to give an error message directly stating this information.</li><li>If an Inference Rule had been proposed instead, it would blame one branch for having a wrong type, which may be confusing and go against programmer intent.</li></ul></li></ul><p>We can read Typing Rules either from top to bottom or from bottom to top, with slightly different interpretations.</p><ul><li>Reading from top to bottom describes how to use the information for Type Checking.</li><li>Reading from bottom to top describes how a Type Inference Algorithm works, e.g., what needs to be Checked to Infer the Type of a Term.</li></ul><p>From a historical perspective, there are two Design Philosophies for Type Systems.</p><ul><li>The first is to augment a Programming Language with more information, such as C which uses it to determine how much space a variable would take up in memory.</li><li>The second is to express programmer intent.</li></ul><p>Type Annotations (Ascriptions) for Parameters are required for Functions that are not immediately used, such as Top Level Functions. However, it is helpful to omit Type Annotations (Ascriptions) for Parameters for immediately used Lambda Terms within Higher Order Functions.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://williamjbowman.com/teaching/2022/w2/cpsc539b/&quot;&gt;Topics in Programming Languages: Type Sy</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: &quot;Types and Programming Languages&quot; Chapter 9 and Chapter 11</title>
    <link href="https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/"/>
    <id>https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/</id>
    <published>2023-01-25T08:00:00.000Z</published>
    <updated>2023-02-05T04:06:45.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 9 of “Types and Programming Languages” presents the simply typed lambda calculus, which constructs a type system for pure lambda calculus, explaining theoretical aspects such as the typing relation and the Curry-Howard Correspondence along the way.</p><p>Chapter 11 introduces simple extensions to the simply typed lambda calculus presented in Chapter 9, such as base types, derived forms, type ascriptions, let bindings, and some compound data structures (pairs, tuples, records, sums, variants, and lists), making it better resemble a real-world programming language.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>I have found the textbook hard to follow in many places. Thus, I have followed the textbook and looked into many online resources to grasp the content. Below summarizes my understanding after studying the material.</p><h2 id="Basic-Concepts-in-Type-Theory"><a href="#Basic-Concepts-in-Type-Theory" class="headerlink" title="Basic Concepts in Type Theory"></a>Basic Concepts in Type Theory</h2><h3 id="Terms-and-Types"><a href="#Terms-and-Types" class="headerlink" title="Terms and Types"></a>Terms and Types</h3><p>In Type Theory, every Term has a Type, often written together as <code>&lt;Term&gt;: &lt;Type&gt;</code>. Types include Natural Numbers (<code>nat</code>) and Boolean Logic Values (<code>bool</code>). For example (assuming <code>x: nat</code> and <code>y: nat</code>):</p><ul><li><code>0: nat</code></li><li><code>x: nat</code></li><li><code>1 + 1: nat</code></li><li><code>x + y: nat</code></li><li><code>true: bool</code></li><li><code>x + y: nat</code></li></ul><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>Functions are also Terms with Types, represented as Lambda Terms.</p><p>A Lambda Term looks like <code>(λ &lt;First Parameter Name&gt;: &lt;First Parameter Type&gt; &lt;Second Parameter Name&gt;: &lt;Second Parameter Type&gt; ... . &lt;Term to Return&gt;)</code>.</p><p>It has type <code>&lt;First Parameter Type&gt; → &lt;Second Parameter Type&gt; → ... → &lt;Type of Term to Return&gt;</code>. This indicates that the Lambda Term is a function that takes Parameters of <code>&lt;First Parameter Type&gt;</code>, <code>&lt;Second Parameter Type&gt;</code>, etc., and returns a Term of <code>&lt;Type of Term to Return&gt;</code>.</p><p>Examples of Lambda Terms:</p><ul><li><code>(λ x: nat . (x + x)): nat → nat</code>: a Function which takes in a Parameter <code>x</code> of Type <code>nat</code> and returns the doubled Parameter.</li><li><code>(λ x: nat y: nat . (x + y)): nat → nat → nat</code>: a Function which takes in two Parameters <code>x</code>, <code>y</code> all of Type <code>nat</code> and returns their sum.</li></ul><p>A Lambda Term is often called an Anonymous Function because it has no Name. We can use the notion to give a Name to a Lambda Term:</p><ul><li><code>add: nat → nat → nat ::= (λ x: nat y: nat . (x + y))</code></li></ul><h3 id="Function-Applications"><a href="#Function-Applications" class="headerlink" title="Function Applications"></a>Function Applications</h3><p>In Type Theory, a Function Call is called a Function Application, which “takes a Term of a Type and results in a Term of another Type.” Function Application is written as <code>&lt;Function&gt; &lt;Argument&gt; &lt;Argument&gt; ...</code> (akin to Function Calls in Haskell and Commands in Unix Shell) instead of the conventional <code>&lt;Function&gt;(&lt;Argument&gt;, &lt;Argument&gt;, ...)</code> in Programming Languages.</p><p>If we define a Function <code>add</code> that takes two <code>nat</code>‘s and returns a <code>nat</code>, the following are valid Terms:</p><ul><li><code>add 0 0: nat</code></li><li><code>add 2 3: nat</code></li><li><code>add 1 (add 1 (add 1 0)): nat</code></li></ul><h3 id="Dependent-Typing"><a href="#Dependent-Typing" class="headerlink" title="Dependent Typing"></a>Dependent Typing</h3><p>Sometimes, the Type returned by a Function depends on the Value of its Argument. This is known as Dependent Typing. </p><p>For example, a function <code>if</code> takes three arguments, with <code>if true b c</code> returning <code>b</code>, and  <code>if false b c</code> returning <code>c</code>. If <code>b</code> and <code>c</code> have different Types, then the type of <code>if</code> depends on the value of <code>a</code>.</p><p>Dependent Typing is a reasonably complicated subject that is an active domain of research.</p><h3 id="Zero-Type-Unit-Type-and-Universal-Type"><a href="#Zero-Type-Unit-Type-and-Universal-Type" class="headerlink" title="Zero Type, Unit Type, and Universal Type"></a>Zero Type, Unit Type, and Universal Type</h3><h4 id="Zero-Type"><a href="#Zero-Type" class="headerlink" title="Zero Type"></a>Zero Type</h4><p>In some programming languages, there is a <strong>Zero Type</strong> or <strong>Bottom Type</strong> - a Type whose Set of Terms is the empty set and a Subtype of all other Types.</p><p>In these programming languages, denoting the Zero Type as a Function’s Return Type frequently indicates that <strong>the Function never returns (never completes computation) - instead, it may loop forever, throw an exception, or terminate the process</strong>.</p><p>As a real-world example, in Rust, the Zero Type is called the Never Type and is denoted by !. It is the kind of calculation that never returns any result. For example, the exit function <code>fn exit(code: i32) -&gt; !</code> terminates the process without returning.</p><h4 id="Unit-Type"><a href="#Unit-Type" class="headerlink" title="Unit Type"></a>Unit Type</h4><p>In some programming languages, the <strong>Unit Type</strong> is a Type whose Set of Terms is a singleton set, i.e., the type allows only one value. <strong>It is typically used to describe the Argument Type of a Function that doesn’t need arguments or the Return Type of a Function whose only goal is to have a side effect.</strong> For example:</p><ul><li>In Haskell, Rust, and Elm, the Unit Type is the Type of the 0-tuple <code>()</code>.</li><li>In Python, the Unit Type is <code>NoneType</code>, which only has a single instance <code>None</code>.</li><li>In JavaScript, both <code>Null</code> (which only has a single instance <code>null</code>) and <code>Undefined</code> (which only has a single instance <code>undefined</code>) are Unit Types.</li></ul><p>In languages such as C, C++, Java, and C#, <code>void</code>, which designates that a Function accepts no Arguments or does not return anything, plays a similar role to the Unit Type. However, there are also key differences:</p><ul><li>There are no Terms (Instances) of <code>void</code>.</li><li>A proper Unit Type may always be the Type of an Argument to a Function, but <code>void</code> cannot be the Type of an Argument.</li></ul><h4 id="Universal-Type"><a href="#Universal-Type" class="headerlink" title="Universal Type"></a>Universal Type</h4><p>Most object-oriented programming languages include a universal base class. In Type Theory, this is known as a <strong>Universal Type</strong> or a <strong>Top Type</strong>. Its Set of Terms encompasses any valid Term in the programming language, and all other types in the programming language are subtypes. For example:</p><ul><li><code>Object</code> in Smalltalk and JavaScript</li><li><code>java.lang.Object</code> in Java</li><li><code>System.Object</code> in C#, Visual Basic .NET, and other .NET Framework languages</li><li><code>object</code> in Python (can also be type-annotated as <code>typing.Any</code>)</li><li><code>Any</code> in Scala and Julia</li></ul><p>Some object-oriented programming languages, such as C++, Objective-C, and Swift, do not have a universal base class. In these languages, some constructs function similarly to the Universal Type.</p><ul><li>In C++, <code>void *</code> can accept any non-function pointer (even though <code>void</code> itself is more akin to the Unit Type).</li><li>In Objective-C, <code>id</code> can accept pointers to any object.</li><li>In Swift, the protocol <code>Any</code> can accept any type.</li></ul><p>Languages that are not object-oriented usually do not have a Universal Type.</p><h3 id="Typing-Context"><a href="#Typing-Context" class="headerlink" title="Typing Context"></a>Typing Context</h3><p>A Typing Context (or Typing Environment) $\Gamma$ is a Mapping from Terms to Types (or a collection of Term - Type Pairs). The judgement $\Gamma \vdash e: \tau$ is read as “$e$ has type $\tau$ in Context $\Gamma$”.</p><p>In Statically Typed Programming Languages, these Typing Contexts are used and maintained by Typing Rules to Type Check a given Program or Expression.</p><h3 id="Type-Inhabitation"><a href="#Type-Inhabitation" class="headerlink" title="Type Inhabitation"></a>Type Inhabitation</h3><p>Given a Typing Environment, a Type is <strong>inhabitated</strong> if an existing Term of the Type is available or a Term of the Type can be readily obtained (i.e., via Function Application).</p><h3 id="Derived-Forms"><a href="#Derived-Forms" class="headerlink" title="Derived Forms"></a>Derived Forms</h3><p>In Type Theory, Syntactic Sugar is known as <strong>Derived Forms</strong>, while replacing a Derived Form with its lower-level definition (usually during compile time) is known as <strong>desugaring</strong>. For example:</p><ul><li>In C, <code>a[i]</code> and <code>*(a + 1)</code>, <code>a-&gt;x</code> and <code>(*a).x</code>.</li><li>In the tidyverse collection of R packages, <code>x %&gt;% f(y)</code> is equivalent to <code>f(x, y)</code>.</li></ul><p>A programming language is typically divided into a compact core language, <strong>a rich set of syntax defined in terms of that core (Derived Forms)</strong>, and a comprehensive standard library. This makes the language maintainable for engineers while making it convenient for users.</p><h3 id="Type-Ascription"><a href="#Type-Ascription" class="headerlink" title="Type Ascription"></a>Type Ascription</h3><p><strong>Type Ascription</strong> is an assertion within source code that a term has a particular type. This can lead to cleaner, easier-to-understand code documentation. </p><h2 id="Important-Derived-Forms"><a href="#Important-Derived-Forms" class="headerlink" title="Important Derived Forms"></a>Important Derived Forms</h2><ul><li>Tuple</li><li>Record (Struct, Rows in a Database) - a collection of Fields, possibly of different Types</li><li>Variant (Datatype, Tagged Union, Discriminated Union, Disjoint Union)<ul><li>A data structure to hold a Term that could take on “several different, but fixed Types.”</li><li>Contains a Value field and a Tag field</li><li>Widely used for defining recursive data structures (e.g. Trees containing Leaves and Internal Nodes)</li></ul></li><li>List</li></ul><h2 id="Curry-Howard-Correspondence"><a href="#Curry-Howard-Correspondence" class="headerlink" title="Curry-Howard Correspondence"></a>Curry-Howard Correspondence</h2><p>The Curry-Howard Correspondence, independently discovered by logicians Haskell Curry in 1958 and William Howard in 1969, states that “proofs in a given subset of mathematics are exactly programs from a particular programming language”. Specifically,</p><ul><li>Types correspond to logical formulas.<ul><li>A Term having a Type can be understood as evidence that the Type is inhabited. For example, <code>3110: int</code> is evidence that <code>int</code> is inhabited.</li><li>Logical Atoms $a$, $b$ correspond to whether Types <code>A</code>, <code>B</code> are inhabited.<ul><li><code>true</code> corresponds to a Type that is always inhabited. The simplest of them all is the Unit Type.</li><li><code>false</code> corresponds to a Type that is never inhabited - the Zero Type.</li></ul></li><li>Conjunction $a \land b$ corresponds to a Type inhabited when both Types <code>A</code> and <code>B</code> are inhabited - <code>Tuple[A, B]</code>.</li><li>Disjunction $a \lor b$ with the added condition that <strong>you know which one of $a$, $b$ is true when $a \lor b$ is true</strong> corresponds to a Type that is inhabited when one of <code>A</code>, <code>B</code> is inhabited, and you know which one is inhabited - <code>Variant[A, B]</code>.</li><li>Implication $a \rightarrow b$ corresponds to a Type that, when inhibited, ensures <code>B</code> must be inhabited when <code>A</code> is inhabited - a Function Type, <code>A -&gt; B</code>.</li></ul></li><li>Programs correspond to proofs.</li><li>Analyzing the types of expressions evaluated during the execution of a program corresponds to simplifying a proof.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Type_theory">https://en.wikipedia.org/wiki/Type_theory</a></li><li><a href="https://en.wikipedia.org/wiki/Bottom_type">https://en.wikipedia.org/wiki/Bottom_type</a></li><li><a href="https://en.wikipedia.org/wiki/Typing_environment">https://en.wikipedia.org/wiki/Typing_environment</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/277197/is-there-a-reason-to-have-a-bottom-type-in-a-programming-language">https://softwareengineering.stackexchange.com/questions/277197/is-there-a-reason-to-have-a-bottom-type-in-a-programming-language</a></li><li><a href="https://stackoverflow.com/questions/32505911/what-is-the-role-of-bottom-%E2%8A%A5-in-haskell-function-definitions">https://stackoverflow.com/questions/32505911/what-is-the-role-of-bottom-%E2%8A%A5-in-haskell-function-definitions</a></li><li><a href="https://doc.rust-lang.org/std/primitive.never.html">https://doc.rust-lang.org/std/primitive.never.html</a></li><li><a href="https://en.wikipedia.org/wiki/Unit_type">https://en.wikipedia.org/wiki/Unit_type</a></li><li><a href="https://en.wikipedia.org/wiki/Top_type">https://en.wikipedia.org/wiki/Top_type</a></li><li><a href="https://cs3110.github.io/textbook/chapters/adv/curry-howard.html#types-correspond-to-propositions">https://cs3110.github.io/textbook/chapters/adv/curry-howard.html#types-correspond-to-propositions</a></li><li><a href="https://wiki.haskell.org/Curry-Howard-Lambek_correspondence">https://wiki.haskell.org/Curry-Howard-Lambek_correspondence</a></li><li><a href="https://www.pédrot.fr/slides/inria-junior-02-15.pdf">https://www.pédrot.fr/slides/inria-junior-02-15.pdf</a></li><li><a href="https://math.stackexchange.com/questions/2686280/what-do-logicians-mean-by-type">https://math.stackexchange.com/questions/2686280/what-do-logicians-mean-by-type</a></li><li><a href="https://homepages.inf.ed.ac.uk/stg/NOTES/node35.html">https://homepages.inf.ed.ac.uk/stg/NOTES/node35.html</a></li><li><a href="https://cs.wellesley.edu/~cs251/s02/scheme-intro.pdf">https://cs.wellesley.edu/~cs251/s02/scheme-intro.pdf</a></li><li><a href="https://cs.brown.edu/~sk/Publications/Papers/Published/pk-resuarging-types/paper.pdf">https://cs.brown.edu/~sk/Publications/Papers/Published/pk-resuarging-types/paper.pdf</a></li><li><a href="https://en.wikipedia.org/wiki/Syntactic_sugar">https://en.wikipedia.org/wiki/Syntactic_sugar</a></li><li><a href="https://www.wikidata.org/wiki/Q73072308">https://www.wikidata.org/wiki/Q73072308</a></li><li><a href="https://stackoverflow.com/questions/36389974/what-is-type-ascription">https://stackoverflow.com/questions/36389974/what-is-type-ascription</a></li><li><a href="https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md">https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md</a></li><li><a href="https://medium.com/@andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427">https://medium.com/@andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427</a></li><li><a href="https://docs.scala-lang.org/style/types.html">https://docs.scala-lang.org/style/types.html</a></li><li><a href="https://futhark-lang.org/examples/type-ascriptions.html">https://futhark-lang.org/examples/type-ascriptions.html</a></li><li><a href="https://en.wikipedia.org/wiki/Record_(computer_science)">https://en.wikipedia.org/wiki/Record_(computer_science)</a></li><li><a href="https://en.m.wikipedia.org/wiki/List_(abstract_data_type)">https://en.m.wikipedia.org/wiki/List_(abstract_data_type)</a></li></ul><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>An Introduction Rule describes how Elements of the Type can be Created, and is akin to a description of a Constructor. Similarly, an Elimination Rule describes how Elements of the Type can be used in an Expression, and is akin to a description of an Overloaded Operator.</p><p>A lot of papers propose Typing Rules that don’t make much sense in isolation, but can be plugged into other Type Systems to add a Feature (i.e., allow the non-intrusive addition of other Typing Rules).</p><p>Well-designed Type Systems provide guarantees on a program’s behavior (i.e., guarantee predictable runtime behavior).</p><p>C introduced types, not for verification, but to determine how much space a variable would take up in memory.</p><p>Uniqueness of Typing (i.e., a Term can only have one Type) doesn’t hold when there is Subtyping.</p><p>Curry Style allows representing errors explicitly and describing the type of errors, which is suitable for languages where things can go wrong. In comparision, Church Style does not allow errors</p><p>The Erasure Property is built upon the assumption that the Execution of the Program doesn’t rely on Types.</p><p>Type Ascription woule be beneficial for giving hints to the Type Inference&#x2F;Type Checking Algorithm.</p><p>Usually, Desugaring happens before Type Checking, as the Type System does not directly handle the Syntactic Sugar. </p><p>Tuples are also called Sum Types, and Variants are also called Product Types. This is based on how many possible values the Tuple or Variant Type has. For example, <code>std::pair&lt;char, bool&gt;</code> has <code>256 * 2 = 512</code> values, <code>std::variant&lt;char, bool&gt;</code> has <code>256 + 2 = 258</code> values, and <code>std::optional&lt;char&gt;</code> has <code>256 + 1 = 257</code> values.</p><p>Enums can be seen as Variants where each value is associated with the Unit Type.</p><p>Tuples and Records are distinct Types because Compilers implement them differently</p><p>Programming in Dynamically Typed Programming is akin to programming with variables which are Variants of all possible types.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Chapter 9 of “Types and Programming Languages” pre</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Type Systems" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Type-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>Modules Within PySide6 for Cross-platform GUI Building and System API Calling</title>
    <link href="https://abbaswu.github.io/2023/01/02/Modules-Within-PySide6-for-Cross-platform-GUI-Building-and-System-API-Calling/"/>
    <id>https://abbaswu.github.io/2023/01/02/Modules-Within-PySide6-for-Cross-platform-GUI-Building-and-System-API-Calling/</id>
    <published>2023-01-02T08:00:00.000Z</published>
    <updated>2023-01-03T04:53:45.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Brief-Introduction-to-Qt"><a href="#A-Brief-Introduction-to-Qt" class="headerlink" title="A Brief Introduction to Qt"></a>A Brief Introduction to Qt</h1><p>Qt is a C++ library with <a href="https://www.qt.io/qt-for-python">official Python bindings</a> that allows creating GUIs and cross-platform applications targeting different software and hardware platforms, such as Linux, Windows, macOS, Android, or embedded systems, with little to no change to the underlying codebase, while still having native capabilities, speed, and “look and feel”.</p><p>There are several advantages of using Qt, including:</p><ul><li>Well-designed object-oriented framework.</li><li>Excellent documentation.</li><li>Large user base.</li><li>Widely endorsed. Many industrial-grade cross-platform software use Qt, including Autodesk Maya, Autodesk 3ds Max, Google Earth, Mathematica, OBS Studio, QGIS, Sibelius, Teamviewer, VirtualBox, VLC media player, Wireshark, and WPS Office.</li></ul><h1 id="Modules-Within-PySide6"><a href="#Modules-Within-PySide6" class="headerlink" title="Modules Within PySide6"></a>Modules Within PySide6</h1><p>To aid use, we have summarized the relevant modules of <a href="https://www.qt.io/qt-for-python">PySide6</a>, Qt’s official Python bindings.</p><ul><li><code>PySide6.QtCore</code>: Qt’s essential classes, including platform-independent command-line parsing, multithreading, date and time utilities, object serialization, etc. <strong>Most of these features have already been introduced into the C++ and Python standard libraries.</strong> However, we should pay attention to <strong>Qt’s event handling mechanism</strong> - a mechanism for emitting events in the form of objects across threads (known as signals), and handling these events in designated functions (known as slots).</li></ul><h2 id="Modules-Related-to-Building-GUIs"><a href="#Modules-Related-to-Building-GUIs" class="headerlink" title="Modules Related to Building GUIs"></a>Modules Related to Building GUIs</h2><p>The modules of PySide6 directly related to building GUIs are as follows:</p><ul><li><code>PySide6.QtGui</code>: Classes used internally by Qt’s user interface technologies, including classes for windowing system integration, event handling, OpenGL and OpenGL ES integration, 2D graphics, basic imaging, fonts, and text.</li><li><code>PySide6.QtWidgets</code>: <strong>Provides a set of UI elements to create classic desktop-style user interfaces. All UI elements, including user-defined ones, inherit from <code>PySide6.QtWidgets.QtWidget</code>.</strong></li><li><code>PySide6.QtMultimediaWidgets</code>: Provides multimedia-related widgets and controls.</li><li><code>PySide6.QtOpenGL</code>, <code>PySide6.QtOpenGLWidgets</code>: Used to support the OpenGL widget class, which operates similarly to other Qt widgets with the exception that it opens an OpenGL display buffer whose contents can be rendered using the OpenGL API.</li><li><code>PySide6.QtPdf</code>, <code>PySide6.QtPdfWidgets</code>: Classes for rendering pages from PDF documents.</li><li><code>PySide6.QtWebEngineCore</code>, <code>PySide6.QtWebEngineWidgets</code>: Provides a Chromium web browser engine as well as C++ classes to render web content and interact with it.</li></ul><h2 id="Modules-Related-to-System-API-Calling"><a href="#Modules-Related-to-System-API-Calling" class="headerlink" title="Modules Related to System API Calling"></a>Modules Related to System API Calling</h2><p>Qt is more than a GUI framework. It also provides a cross-platform way of doing a lot of stuff that desktop applications often need to do - calling into system APIs, especially platform-specific multimedia APIs not covered by the POSIX standard and&#x2F;or the C++ and Python standard libraries.</p><p><img src="https://cdn.vectorstock.com/i/1000x1000/31/10/multimedia-design-vector-4393110.webp" alt="Stock Image: Multimedia"></p><p>To better document this crucial yet often overlooked use case, we have summarized the relevant modules of PySide6.</p><ul><li><code>PySide6.QtBluetooth</code>: Enables connectivity between Bluetooth enabled devices. Currently the API is supported to different degrees on Android, iOS, macOS, Linux, and Windows.</li><li><code>PySide6.QtMultimedia</code>: Provides APIs for rendering audio and video files on screen and playing them back, as well as a thorough API for recording audio and video via system cameras and microphones.</li><li><code>PySide6.QtNfc</code>: Provides APIs for dealing with NFC Forum Tags and NFC Forum Devices, including target identification and loss, the registration of NDEF message handlers, the reading and writing of NDEF messages on NFC Forum Tags, and the sending of tag-specific commands.</li><li><code>PySide6.QtPositioning</code>: Allows developers to locate themselves using a variety of sources, such as satellite, wifi, text files, and so on. The position on a map, for instance, can be determined using that information. Additionally, it is possible to retrieve satellite data and carry out area-based monitoring. Currently the API is supported on Android, iOS, macOS, Linux, and Windows (with GPS receivers exposed as a serial port providing NMEA sentences or using Windows.Devices.Geolocation).</li><li><code>PySide6.QtPrintSupport</code>: Offers broad cross-platform printing capability, including printing to attached printers, printing to remote printers over networks, and creating PDF files.</li><li><code>PySide6.QtSensors</code>: Provides access to sensor hardware. Currently the API is supported on Android, iOS, and Windows (MSVC).</li></ul><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Qt_(software)">https://en.wikipedia.org/wiki/Qt_(software)</a></li><li><a href="https://www.quora.com/What-are-the-Pros-and-Cons-of-using-QT-framework-for-cross-platform-programming-Win-Mac">https://www.quora.com/What-are-the-Pros-and-Cons-of-using-QT-framework-for-cross-platform-programming-Win-Mac</a></li><li><a href="https://wiki.qt.io/Qt_for_Python">https://wiki.qt.io/Qt_for_Python</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-Brief-Introduction-to-Qt&quot;&gt;&lt;a href=&quot;#A-Brief-Introduction-to-Qt&quot; class=&quot;headerlink&quot; title=&quot;A Brief Introduction to Qt&quot;&gt;&lt;/a&gt;A Brief </summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    <category term="PySide6" scheme="https://abbaswu.github.io/categories/Code/Python/PySide6/"/>
    
    
  </entry>
  
  <entry>
    <title>Date and Time Types in Python</title>
    <link href="https://abbaswu.github.io/2022/12/31/Date-and-Time-Types-in-Python/"/>
    <id>https://abbaswu.github.io/2022/12/31/Date-and-Time-Types-in-Python/</id>
    <published>2022-12-31T08:00:00.000Z</published>
    <updated>2022-12-31T16:32:37.116Z</updated>
    
    <content type="html"><![CDATA[<p>There are many types in Python which can store date and time information. These types can be broadly divided into two categories:</p><h1 id="JSON-Serializable-Formats"><a href="#JSON-Serializable-Formats" class="headerlink" title="JSON Serializable Formats"></a>JSON Serializable Formats</h1><ul><li>UNIX Timestamp (e.g. <code>0</code>)</li><li>ISO 8601 String (e.g. <code>&#39;1970-01-01T00:00:00&#39;</code>)</li></ul><p>UNIX Timestamp has its roots in the system time of Unix operating systems. It is now widely used in databases, programming languages, file systems, and other computer operating systems. It counts the number of seconds that have passed since the Unix epoch began on January 1, 1970 at 00:00:00 UTC, minus any modifications made for leap seconds.</p><p>ISO 8601 is an international standard for the transmission and interchange of time- and date-related information on a global scale. Dates in the Gregorian calendar, hours based on the 24-hour timekeeping system, with an optional UTC offset, time intervals, and combinations of these are covered by ISO 8601. The standard offers a clear, unambiguous manner of expressing calendar dates and times in international communications, notably to prevent numeric dates and times from being misinterpreted when such data is sent between nations.</p><p>As the categorization suggests, these formats can be used in JSON serialization, and are widely adopted in data exchange formats and APIs. For example, Stripe APIs use UNIX Timestamps, while Twitter and Dropbox APIs use ISO 8601 Strings. UNIX Timestamps are easier and more efficient to handle, while ISO 8601 Strings have the virtue of being human-readable.</p><h1 id="Widely-Used-In-Memory-Data-Structures"><a href="#Widely-Used-In-Memory-Data-Structures" class="headerlink" title="Widely Used In Memory Data Structures"></a>Widely Used In Memory Data Structures</h1><ul><li><code>datetime.datetime</code> (e.g. <code>datetime.datetime(1970, 1, 1, 0, 0)</code>)</li><li><code>datetime.date</code> (e.g. <code>datetime.date(1970, 1, 1)</code>)</li><li><code>pandas.Timestamp</code> (e.g. <code>Timestamp(&#39;1970-01-01 00:00:00&#39;)</code>)</li></ul><p>As the categorization suggests, these formats are in-memory, structured representations of date and time information.</p><p><code>datetime.datetime</code> and <code>datetime.date</code> are types implemented (and widely used) in the Python Standard Library. <code>datetime.date</code> represents a date (year, month, day) in an idealized calendar, which is the existing Gregorian calendar infinitely stretched in both directions, while <code>datetime.datetime</code> also combines the data from a time object (hour, minute, second, microsecond).</p><p><code>pandas.Timestamp</code> is implemented in <code>pandas</code>. It is the <code>pandas</code> replacement for <code>datetime.datetime</code>, and is the type used for the entries that make up a <code>pandas.DatetimeIndex</code>, and other time series-oriented data structures in <code>pandas</code>. Furthermore, it is also widely used across the Python Ecosystem for Data Science, such as being used by <code>matplotlib</code> as the <code>xticks</code> for plotting a <code>pandas.Series</code> with a <code>pandas.DatetimeIndex</code>, as shown below.</p><p><img src="https://i.stack.imgur.com/gLpr4.png" alt="`pandas.Timestamp` is the type used for the entries that make up a `pandas.DatetimeIndex`, and is used by `matplotlib` as the `xticks` for plotting a `pandas.Series` with a `pandas.DatetimeIndex`"></p><h1 id="Converting-Between-These-Types"><a href="#Converting-Between-These-Types" class="headerlink" title="Converting Between These Types"></a>Converting Between These Types</h1><p>With so many types in Python which can store date and time information, it is important to know how to convert between them. The following State Diagram depicts how we should perform the conversions.</p><pre><code class=" mermaid">stateDiagram    state &quot;UNIX Timestamp&quot; as UNIXTimestamp: 0    state &quot;ISO 8601 String&quot; as ISO8601String: &#x27;1970-01-01T00:00:00&#x27;    state &quot;datetime.datetime&quot; as DatetimeDatetime: datetime.datetime(1970, 1, 1, 0, 0)    state &quot;datetime.date&quot; as DatetimeDate: datetime.date(1970, 1, 1)    state &quot;pandas.Timestamp&quot; as PandasTimestamp: Timestamp(&#x27;1970-01-01 00:00:00&#x27;)      UNIXTimestamp --&gt; DatetimeDatetime: datetime.datetime.fromtimestamp function    UNIXTimestamp --&gt; PandasTimestamp: constructor    ISO8601String --&gt; DatetimeDatetime: isoformat method    ISO8601String --&gt; PandasTimestamp: constructor    DatetimeDatetime --&gt; UNIXTimestamp: datetime.datetime.timestamp function    DatetimeDatetime --&gt; ISO8601String: datetime.datetime.fromiso function    DatetimeDatetime --&gt; DatetimeDate: date method    DatetimeDatetime --&gt; PandasTimestamp: constructor    DatetimeDate --&gt; PandasTimestamp: pandas.Timestamp constructor    PandasTimestamp --&gt; UNIXTimestamp: timestamp method    PandasTimestamp --&gt; ISO8601String: isoformat method    PandasTimestamp --&gt; DatetimeDatetime: to_pydatetime method</code></pre><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a></li><li><a href="https://en.wikipedia.org/wiki/ISO_8601">https://en.wikipedia.org/wiki/ISO_8601</a></li><li><a href="https://dev.to/xngwng/do-you-prefer-unix-epoch-a-number-or-iso-8601-a-string-for-timestamps--28ll">https://dev.to/xngwng/do-you-prefer-unix-epoch-a-number-or-iso-8601-a-string-for-timestamps--28ll</a></li><li><a href="https://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp">https://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp</a></li><li><a href="https://www.dataquest.io/blog/tutorial-time-series-analysis-with-pandas/">https://www.dataquest.io/blog/tutorial-time-series-analysis-with-pandas/</a></li><li><a href="https://www.programiz.com/python-programming/datetime/timestamp-datetime">https://www.programiz.com/python-programming/datetime/timestamp-datetime</a></li><li><a href="https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date">https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date</a></li><li><a href="https://stackoverflow.com/questions/969285/how-do-i-translate-an-iso-8601-datetime-string-into-a-python-datetime-object">https://stackoverflow.com/questions/969285/how-do-i-translate-an-iso-8601-datetime-string-into-a-python-datetime-object</a></li><li><a href="https://www.programiz.com/python-programming/datetime/timestamp-datetime">https://www.programiz.com/python-programming/datetime/timestamp-datetime</a></li><li><a href="https://pynative.com/python-iso-8601-datetime/">https://pynative.com/python-iso-8601-datetime/</a></li><li><a href="https://docs.python.org/3/library/datetime.html">https://docs.python.org/3/library/datetime.html</a></li><li><a href="https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python">https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html">https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html</a></li><li><a href="https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python">https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python</a></li><li><a href="https://stackoverflow.com/questions/41046630/set-time-formatting-on-a-datetime-index-when-plotting-pandas-series">https://stackoverflow.com/questions/41046630/set-time-formatting-on-a-datetime-index-when-plotting-pandas-series</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There are many types in Python which can store date and time information. These types can be broadly divided into two categories:&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Python" scheme="https://abbaswu.github.io/categories/Code/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Social Media Strategy (tentative)</title>
    <link href="https://abbaswu.github.io/2022/12/31/Social-Media-Strategy-tentative/"/>
    <id>https://abbaswu.github.io/2022/12/31/Social-Media-Strategy-tentative/</id>
    <published>2022-12-31T08:00:00.000Z</published>
    <updated>2022-12-31T19:34:02.650Z</updated>
    
    <content type="html"><![CDATA[<p>Social media accounts are windows that exhibit our image to the public, and we must pay attention to them. However, on the one hand, the use of social media should complement, and not negatively affect, our routine work, study, and life patterns; on the other hand, different social media platforms generally differ in terms of appropriate content to display. After a period of observation and reflection, we have developed the following social media strategy to address these issues, as depicted in the Bipartite Graph below.</p><pre><code class=" mermaid">stateDiagramstate &quot;Life Moments&quot; as LifeMomentsstate &quot;Reflections on Life&quot; as ReflectionsOnLifestate &quot;Work Moments&quot; as WorkMomentsstate &quot;Reflections on Work&quot; as ReflectionsOnWorkstate &quot;Reflections on Development&quot; as ReflectionsOnDevelopmentstate &quot;Detailed Explanations&quot; as DetailedExplanationsstate &quot;Planning&quot; as Planningstate &quot;Instagram&quot; as Instagramstate &quot;小红书&quot; as XiaoHongShustate &quot;WeChat&quot; as WeChatstate &quot;QQ&quot; as QQstate &quot;LinkedIn&quot; as LinkedInstate &quot;Blog&quot; as Blog    LifeMoments --&gt; Instagram    LifeMoments --&gt; XiaoHongShu    LifeMoments --&gt; WeChat    LifeMoments --&gt; QQ        ReflectionsOnLife --&gt; XiaoHongShu    ReflectionsOnLife --&gt; Twitter    ReflectionsOnLife --&gt; WeChat    ReflectionsOnLife --&gt; QQ    WorkMoments --&gt; Twitter    WorkMoments --&gt; WeChat    WorkMoments --&gt; QQ    ReflectionsOnWork --&gt; Twitter    ReflectionsOnWork --&gt; WeChat    ReflectionsOnWork --&gt; QQ    ReflectionsOnDevelopment --&gt; LinkedIn        DetailedExplanations --&gt; Blog        Planning --&gt; Blog</code></pre><p>In addition, a pain point we will encounter is that we will post some content to both Chinese and English social media platforms. To overcome this problem, we can first write a Chinese (or English) version and use automated tools such as Google Translate and DeepL before manually touching up the machine-translated version.</p><p>Furthermore, to boost the following of our social media accounts, when we need to share the content posted on social media with others via private chat, we can share the link of the content posted to social media instead of copying and pasting the content itself.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Social media accounts are windows that exhibit our image to the public, and we must pay attention to them. However, on the one hand, the </summary>
      
    
    
    
    <category term="Planning" scheme="https://abbaswu.github.io/categories/Planning/"/>
    
    
  </entry>
  
  <entry>
    <title>Command-line HTTP Servers for Rapid File Sharing</title>
    <link href="https://abbaswu.github.io/2022/12/26/Command-line-HTTP-Servers-for-Rapid-File-Sharing/"/>
    <id>https://abbaswu.github.io/2022/12/26/Command-line-HTTP-Servers-for-Rapid-File-Sharing/</id>
    <published>2022-12-26T08:00:00.000Z</published>
    <updated>2023-02-18T22:55:42.597Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes, we need an ad-hoc, quick-and-dirty way of sharing files with others while maintaining complete control of the data transmission.</p><ul><li>We should not store our data on any third-party servers.</li><li>The connections established through the network should be point-to-point.</li></ul><p>Being supported by virtually every Internet-capable device and from both command-line tools (such as wget and curl) and graphical Web browsers, the HTTP protocol is one of our best bets. Thus, we have compiled a list of command-line HTTP servers that enable rapid file sharing and compare their features.</p><h1 id="python3-m-http-server"><a href="#python3-m-http-server" class="headerlink" title="python3 -m http.server"></a><a href="https://docs.python.org/dev/library/http.server.html">python3 -m http.server</a></h1><p>The Python standard library has a barebones built-in HTTP server. Not recommended for production.</p><ul><li>Language: Python</li></ul><h1 id="mjpclab-x2F-go-http-file-server"><a href="#mjpclab-x2F-go-http-file-server" class="headerlink" title="mjpclab&#x2F;go-http-file-server"></a><a href="https://github.com/mjpclab/go-http-file-server">mjpclab&#x2F;go-http-file-server</a></h1><p>Simple command line based HTTP file server to share local file system.</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>Frontend Features:<ul><li>File Upload</li><li>File Delete</li><li>Create Subdirectory</li><li>Download the Current Directory as an Archive</li></ul></li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTP Strict Transport Security (HSTS)</li><li>HTTPS</li></ul></li><li>GitHub Stars: 175</li><li>Language: Go</li></ul><h1 id="mar10-x2F-wsgidav"><a href="#mar10-x2F-wsgidav" class="headerlink" title="mar10&#x2F;wsgidav"></a><a href="https://github.com/mar10/wsgidav">mar10&#x2F;wsgidav</a></h1><p>A generic and extendable WebDAV server written in Python and based on WSGI.</p><ul><li>Features:<ul><li>HTTP Range Requests</li></ul></li><li>GitHub Stars: 640</li><li>Language: Python</li><li>Multithreaded</li><li>WebDAV Server</li></ul><h1 id="TheWaWaR-x2F-simple-http-server"><a href="#TheWaWaR-x2F-simple-http-server" class="headerlink" title="TheWaWaR&#x2F;simple-http-server"></a><a href="https://github.com/TheWaWaR/simple-http-server">TheWaWaR&#x2F;simple-http-server</a></h1><p><img src="https://github.com/TheWaWaR/simple-http-server/raw/master/screenshot.png" alt="Screenshot"></p><ul><li>Features:<ul><li>Cross-Origin-Embedder-Policy (COEP)</li><li>Cross-Origin Resource Sharing (CORS) </li><li>Cross-Origin-Opener-Policy (COOP)</li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTPS</li><li>Frontend Features:<ul><li>File Upload</li></ul></li></ul></li><li>GitHub Stars: 785</li><li>Language: Rust</li><li>Multithreaded</li></ul><h1 id="http-party-x2F-http-server"><a href="#http-party-x2F-http-server" class="headerlink" title="http-party&#x2F;http-server"></a><a href="https://github.com/http-party/http-server">http-party&#x2F;http-server</a></h1><p><code>http-server</code> is a simple, zero-configuration command-line static HTTP server. It is powerful enough for production usage, but it’s simple and hackable enough to be used for testing, local development and learning.</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTPS</li></ul></li><li>GitHub Stars: 12.4k</li><li>Language: node.js</li></ul><h1 id="EstebanBorai-x2F-http-server"><a href="#EstebanBorai-x2F-http-server" class="headerlink" title="EstebanBorai&#x2F;http-server"></a><a href="https://github.com/EstebanBorai/http-server">EstebanBorai&#x2F;http-server</a></h1><p>Simple and configurable command-line HTTP server</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>HTTP Basic Authentication</li><li>HTTPS</li><li>GZip Compression</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes, we need an ad-hoc, quick-and-dirty way of sharing files with others while maintaining complete control of the data transmissio</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Efficient scalable thread-safety-violation detection: finding thousands of concurrency bugs during testing</title>
    <link href="https://abbaswu.github.io/2022/11/27/Paper-Review-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/"/>
    <id>https://abbaswu.github.io/2022/11/27/Paper-Review-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/</id>
    <published>2022-11-27T08:00:00.000Z</published>
    <updated>2022-12-19T18:38:47.736Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://dl.acm.org/doi/10.1145/3341301.3359638">here</a>.</p><p>This paper presents Thread Safety Violation Detection (TSVD), a tool that dynamically detects thread safety violations with low runtime overhead, and which is compatible with real-world, distributed-developed code employing different synchronization mechanisms. The tool frames thread safety violations as two methods, with one of them being a write operation, occurring concurrently. It infers thread safety violations using a very creative approach. First, it instruments the program and detects method calls that access objects behind thread-safety contracts. Later on, during the execution of the program, TSVD injects delays into threads with method calls accessing those objects and monitors whether another thread also accesses the same objects during the delay. As this may incur significant overhead, the tool uses two strategies to determine when to inject delays - keeping track of “near misses”, where the two method calls of two threads occur within a time threshold apart from each other, and inferring “happens before” relations, to rule out two accesses which are causally related.</p><p>The tool was tested on 43000 .NET programs in Microsoft teams, and its bug-finding capability outperformed both existing tools and configuring TSVD to emulate the strategies of existing tools, which shows the feasibility of TSVD.</p><p>There are two questions that come to mind after reading this paper:</p><ul><li>How does the tool acquire the information on which methods are thread-unsafe?</li><li>The approach the tool uses to infer thread safely - injecting delays and monitoring the behavior of other threads - sounds very interesting to me. Have there been any other applications of such an approach?</li><li>What is the sensitivity of the relevant parameters used in TSVD to its effectiveness and efficiency? Is there any guide on how to properly adjust these parameters?</li></ul><hr><p>Feedback from the Class Discussion</p><p>The proposed approach can handle different concurrency models, such as:</p><ul><li>async</li><li>task-based</li><li>thread-based</li></ul><p>But can it handle unstructured concurrency?</p><p>The approach generalizes data race for objects and data structures at the method-level (e.g. there cannot be two simultaneous calls to add() for a <code>List</code> class).</p><p>Using delays can handle many more cases than reasoning about thread scheduling. It is a “simple thing” which works for many cases (akin to fuzzing).</p><p>The approach requires manually specifying read and write APIs. Is it possible to create a semi-automatic approach starting from contracts labeled for standard library APIs?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Hybrid dynamic data race detection</title>
    <link href="https://abbaswu.github.io/2022/11/23/Paper-Review-Hybrid-dynamic-data-race-detection/"/>
    <id>https://abbaswu.github.io/2022/11/23/Paper-Review-Hybrid-dynamic-data-race-detection/</id>
    <published>2022-11-23T08:00:00.000Z</published>
    <updated>2022-12-19T18:29:37.066Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/781498.781528">here</a>.</p><p>The paper proposes a hybrid approach to dynamically (at runtime) data races in multithreaded Java programs. It first proposes two specific detection approaches, each with its strengths and weaknesses. The first is lockset-based detection, which identifies a data race when multiple threads use a shared memory location without holding a shared lock object. Such an approach is fast but may lead to false positives. As a result, the paper proposes another approach, happens-before detection, which uses several heuristics to reason about relations between events and infer whether a potential race has occurred at a particular memory location. In comparison, this approach is more computationally expensive and may lead to false negatives. Considering that neither approach is sound, they combine the two approaches by first using lockset-based detection to identify potential data races before using happens-before detection to reason whether these are probable. The paper then conducts an experimental study of their hybrid approach on various Java programs, demonstrating its effectiveness and efficiency.</p><p>I like this paper’s idea of combining a pessimistic and optimistic approach when doing program analysis. Are there any other works that use such an idea?</p><p>However, I have a question concerning the applicability of the hybrid approach in real life. Although pessimistic, shouldn’t lockset-based detection be enough to stamp out all potential data races by providing programmers with feedback to add relevant locks to prevent such possible data races? This is relevant to the requirements for defensive programming. Or are there design patterns where multiple threads can safely use a shared memory location without holding a common lock and not lead to data races?</p><hr><p>Feedback from the Class Discussion</p><p>Difference Between Race Condition and Data Race:</p><ul><li>Race Condition: There are multiple threads, and the behavior of program depends on thread scheduling.</li><li>Data Race: Different from race condition. This frequently happens when you parallelize a program that shouldn’t be parallelized. Data race can be solved by using locks, but there may still be race coditions.</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-1</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span> &#123;<br>    x = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-2</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    x = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Modelling in the Paper:</p><ul><li>Lamport Timestamps&#x2F;Vector Clocks</li><li>Thread events: statement executions in threads. A thread event is dependent on previous thread events. This is captured used using the happens-before formal definition in the paper, but leads to false negatives.</li><li>Thread communications: signals (enforce order) and locks (mutually exclusive).</li><li>Message send&#x2F;receive: enqueue and dequeue.</li></ul><p>Architecure-dependednt atomic operations can also be a lock-free solution (e.g. C++’s atomic).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Lightweight Verification of Array Indexing</title>
    <link href="https://abbaswu.github.io/2022/11/16/Paper-Review-Lightweight-Verification-of-Array-Indexing/"/>
    <id>https://abbaswu.github.io/2022/11/16/Paper-Review-Lightweight-Verification-of-Array-Indexing/</id>
    <published>2022-11-16T08:00:00.000Z</published>
    <updated>2022-12-19T18:52:48.788Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/3213846.3213849">here</a>.</p><h1 id="Summary-of-the-Paper"><a href="#Summary-of-the-Paper" class="headerlink" title="Summary of the Paper"></a>Summary of the Paper</h1><p>The authors propose a methodology to detect out-of-bound array accesses statically. They first define that criteria that ideal techniques for detecting out-of-bound array accesses should satisfy, before analyzing the insufficiency of existing academic and industrial approaches, and presenting their own approach, Index Checker, implemented for Java.</p><p>Index Checker reduces checking array bonds to identifying 7 kinds of knowledge, which concern array index and array length, and form a hierarchy. It models such hierarchical knowledge as a Type System, requires the user to write “Type” Annotations at procedure boundaries, and verifies that values have the given “Type” at runtime. This is implemented using Checker Framework, an “industrial-strength, open-source tool for building Java type systems”.</p><p>The authors evaluate Index Checker on 3 large-scale, well-tested Java projects (Google Guava, JFreeChart, Plume-lib), and compare Index Checker with 3 other approaches (FindBugs, KeY, and Clousot), proving the effectiveness of Index Checker (scalability, finding bugs in well-tested programs, and low false positive rate). They also assess the burden of writing type annotations for Index Checker.</p><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul><li>What is the rationale behind the 7 kinds of knowledge concerning array index and array length proposed in the paper?</li><li>I am not very familiar with Type Theory, which may have impeded my understanding of the value of the paper. What are the benefits of using Type Systems and Type Inference, and using Type Annotations to capture known constraints? Is it just to leverage the power of Checker Framework, an “industrial-strength, open-source tool for building Java type systems”, for sound inference? Or are there any further benefits?</li><li>No matter what the benefits are, from this paper, modeling hierarchical knowledge as a Type System, using Type Annotations to capture known constraints, and using Type Inference to verify such constraints sounds like a very innovative technique with many potential use cases. Have there been any other applications of such a technique?</li></ul><hr><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>The hierarchy of knowledge is derived from Exploratory Data Analysis (trying stuff until it works, see Section 2.8).</p><p>“Subtype” is a kind of Comparable Partial Ordering (‘&lt;’). The Types in the Bottom have more information, while the Types in the Top have less information.</p><p>In Java, aside from Inheritance, another form of Subtyping is Function Subtyping. e.g. Comparator (to compare two Dog’s we can pass a function that compares two Animal’s) the inputs can be more general types.</p><p>Rules define what to do when a Pattern is encountered; however, it takes a (nontrivial) search to determine the order to apply the rules.</p><p>Fixed Point: Convergence of Information.</p><p>Reach a Fixed Point: Iterate until Convergence.</p><p>The Paper uses Subtyping to implement Widening.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Modular Checking for Buffer Overflows in the Large</title>
    <link href="https://abbaswu.github.io/2022/11/13/Paper-Review-Modular-Checking-for-Buffer-Overflows-in-the-Large/"/>
    <id>https://abbaswu.github.io/2022/11/13/Paper-Review-Modular-Checking-for-Buffer-Overflows-in-the-Large/</id>
    <published>2022-11-13T08:00:00.000Z</published>
    <updated>2022-12-18T22:20:14.437Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/1134285.1134319">here</a>.</p><h1 id="Background-Information"><a href="#Background-Information" class="headerlink" title="Background Information"></a>Background Information</h1><h2 id="Datalog"><a href="#Datalog" class="headerlink" title="Datalog"></a>Datalog</h2><ul><li>Declarative Programming Language which began as a Query Language for Relational Databases, and is now used in Data Integration, Information Extraction, Program Analysis, Cloud Computing, Machine Learning, etc.</li><li>Akin to SQL in many aspects.<ul><li>Not Turing Complete.</li><li>Used as a Domain Specific Language.</li><li>No Canonical Implementation, many different Implementations exist for different Applications (c.f. SQLite, MySQL, PostgreSQL, etc. for SQL).</li></ul></li><li>Follows the ‘Logic Programming’ Paradigm.<ul><li>A Program consists of Constants, Variables, Facts, and Rules (based on First Order Logic, in a form similar to “a new Fact A is true if B, C, and D are already known to be true”).</li><li>The Execution of a Program is <em>iteratively inferring new Facts given the Rules</em>.</li><li>Maps very nicely to many problems encountered during Program Analysis.</li></ul></li></ul><h1 id="Summary-of-the-Paper"><a href="#Summary-of-the-Paper" class="headerlink" title="Summary of the Paper"></a>Summary of the Paper</h1><p>The authors proposed a Methodology for detecting possible Buffer Overflow-based Security Exploits in C code and providing developers with instant feedback during the build process. The Methodology prefers usability over accuracy, and should be used alongside other tools in a Swiss Cheese Model against Security Exploits.</p><p>First, the authors proposed a Simple Annotations Language for annotating Pointers passed as parameters to and returned from Functions, to denote Preconditions and Postconditions of Function Execution. The authors propose that for new code, annotation should be inserted manually, and code should be fully annotated before being checked in to Version Control.</p><p>For legacy codebases and&#x2F;or third-party code without such Annotations, the authors propose an Inference Engline, SALInfer, which tries to infer such Annotations, preferring Coverage over Accuracy. SALInfer supports specifying Inference Algorithms using Datalog.</p><p>Finally, the authors propose a modular checker, ESPX, which tries to infer if a program is potentially vulnerable to Buffer Overflow-based Security Exploits by statically analyzing the annotations within the program’s code. The confidence of the inference results vary based on the extent and quality of the annotations.</p><h1 id="Questions-Regarding-the-Paper"><a href="#Questions-Regarding-the-Paper" class="headerlink" title="Questions Regarding the Paper"></a>Questions Regarding the Paper</h1><ul><li>What is the relevance of such a technique to “safe” programming languages that do not allow using overflowable buffers?</li><li>The authors state that “control over annotation insertion is given to individual developers”. However, developers might be reluctant to insert Annotations, and inserting Annotations can negatively affect developer productivity. Furthermore, the quality of the inserted Annotations is not guaranteed. Last but not least, inferring Annotations for legacy codebases and&#x2F;or third-party code without such Annotations prefers Coverage over Accuracy, which may not lead to sound results. Considering all these real concerns, the practical usability of this tool is seriously compromised.</li><li>The authors did an evaluation on an unnamed Microsoft product. With little information regarding the product being disclosed, such an evaluation is far from convincing, and I suspect that there might be manipulation of some kind within the evaluation.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Precise Interprocedural Dataflow Analysis via Graph Reachability</title>
    <link href="https://abbaswu.github.io/2022/11/07/Paper-Review-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/"/>
    <id>https://abbaswu.github.io/2022/11/07/Paper-Review-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/</id>
    <published>2022-11-07T08:00:00.000Z</published>
    <updated>2022-12-19T17:03:40.947Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/199448.199462">here</a>.</p><p>To be honest, I found the paper to be almost unreadable due to it being full of unfamiliar concepts and abstract formalizations. I tried my best to do some studying into the topic so that I can understand the problem that they are trying to solve, and important aspects of their algorithm, better.</p><h1 id="Graph-Reachability"><a href="#Graph-Reachability" class="headerlink" title="Graph Reachability"></a>Graph Reachability</h1><p>Graph Reachability means whether it is possible to get from one vertex to another vertex within a graph.</p><p>In an Undirected Graph $G(V, E)$, Graph Reachability between <em>one pair of nodes</em> can be calculated using Breadth-First Search, while Graph Reachability between <em>all pair of nodes</em> can be reduced to calculating the Connected Components of the Undirected Graph, which is an efficient algorithm with $O(|V| + |E|)$ time complexity.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/38/Equivalentie.svg" alt="Connected Components within an Undirected Graph"></p><p>In a Directed Graph, Graph Reachability between <em>one pair of nodes</em> can also be calculated using Breadth-First Search. <strong>However, there is no efficient algorithm that can calculate Graph Reachability between <em>all pair of nodes</em> for all Directed Graphs.</strong></p><p>For <em>any</em> Directed Graph, calculating Graph Reachability between <em>all pair of nodes</em> can be reduced to calculating <strong>All Pairs Shortest Distance</strong> using the Floyd-Warshall Algorithm, which has an $O({|V|}^3)$ time complexity.</p><p>More efficient algorithms are only applicable to Planar Directed Graphs.</p><h1 id="Data-Flow-Analysis"><a href="#Data-Flow-Analysis" class="headerlink" title="Data Flow Analysis"></a>Data Flow Analysis</h1><p>Constant Propogation (determining whether variables at a given point in the program are guaranteed to have constant values) and Live Variable Analysis (determining at a given point in the program, which variables might be used before being overwritten) are two commonly encountered examples of Data Flow Analysis.</p><p>Given a program’s Control Flow Graph, Data Flow Analysis:</p><ul><li>Associates each Node of the Control Flow Graph with Information concerning the Variables within that Node (known as <em>Dataflow Fact</em>‘s, usually a Mapping between Variables and their Values or Properties)</li><li>Models the effect of executing a Node with a <em>Dataflow Function</em>.</li></ul><p>In most Data Flow Analysis problems, we take one of the following approaches to obtain the Dataflow Facts for each Node:</p><ul><li>Summarizing paths entering the Node from the Start, such as in Constant Propogation. Known as “Forward Problem”‘s.</li><li>Summarizing paths exiting the Node from the Exit, such as in Live Variable Analysis. Known as “Backward Problem”‘s.</li></ul><p>How we summarize paths is known as the <em>Confluence Operator</em>.</p><p>Data Flow Analysis problems can also be divided into “may” problems and “must” problems.</p><ul><li>In “may” problems, the Dataflow Facts for each Node include information about what may be true. An example is Live Variable Analysis, where we determine whether a variable <em>may</em> be used before being overwritten in a given point in the program.</li><li>In “must” problems, the Dataflow Facts for each Node include information about what must be true. An example is Constant Propogation, where we determine whether a variable <em>must</em> have a given value in a given point in the program.</li></ul><p>Many interesting Data Flow Analysis problems, such as Live Variable Analysis, can be modeled as GEN&#x2F;KILL problems, or bit-vector problems, in which:</p><ul><li>A set of variables, $KILL[n]$, is defined at Node $n$.</li><li>A set of variables, $GEN[n]$, is used at Node $n$.</li><li>We use Union or Intersection to summarize paths entering a Node to obtain the Dataflow Facts for the Node.</li></ul><h1 id="Interprocedural-Dataflow-Analysis"><a href="#Interprocedural-Dataflow-Analysis" class="headerlink" title="Interprocedural Dataflow Analysis"></a>Interprocedural Dataflow Analysis</h1><p>The goal of Interprocedural Dataflow Analysis is to capture an Abstraction of the Effect of calling a Procedure in Dataflow Analysis.</p><p>A naive approach to Interprocedural Dataflow Analysis is to reduce it to Intraprocedural Dataflow Analysis in some way.</p><ul><li>Procedure Inlining<ul><li>Exponentially increases the Control Flow Graph</li><li>Cannot handle recursion</li></ul></li><li>Context Sensitive Procedure Inlining<ul><li>Uses Context Information (often an Approximation of the Call Stack) to distinguish between different Calls of the same Procedure, and reduce the number of inlined Procedures.</li></ul></li></ul><hr><p>However, even after research, I have failed to understand the more complicated approaches (as well as the approaches proposed in this Paper).</p><p>I can only get the point that the author shows that many Interprocedural Dataflow Analysis problems, in which:</p><ul><li>A finite set of Dataflow Facts</li><li>Dataflow Functions distribute over the Confluence Operator (which I don’t fully understand)</li></ul><p>including GEN&#x2F;KILL problems, or bit-vector problems, can be reduced to a Graph Reachability Problem on a Directed Graph.</p><p>Furthermore, I believe the main contribution of this paper is theoretical, but what is its value in real-world Dataflow Analysis problems, especially considering that the Time Complexity of Graph Reachability Problems on Directed Graphs are high?</p><p>I honestly hope that I can get some insight into these approaches during our class on Monday. Thank you!</p><hr><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>Some of the paper’s idea comes from Abstract Interpretation. It is nice theoretically, but it is far from implementation.</p><p>Graph Reachability in the context of Interprocedure Analysis is also known as Context-Free Language Reachability and Dyck Reachability.</p><p><strong>In the context of this paper, there are multiple Dataflow Functions, one for each Node in the Control Flow Graph. Given a Node in the Control Flow Graph, we use Pattern Matching to determine what its Dataflow Function is.</strong> Lambdas are used to represent these Dataflow Functions. Explanation for the notations: $\lambda <parameters>.&lt;return_value&gt;$ means <code>def f(&lt;parameters&gt;): return &lt;return_value&gt;</code>.</p><p>In the context of this paper, we require all Dataflow Functions to be distributive over the Meet Function (Confluence Function). This means that, given the Meet Function $\Pi$ and a Dataflow Function $f$, $f(X<del>\Pi</del>Y) &#x3D; f(X)<del>\Pi</del>f(Y)$ for any two Dataflow Facts $X, Y$. </p><p>Each Dataflow Function can be visualized using a Graph Representation. The Edges represent Dependencies between Facts of the Variables in the Old Dataflow Facts and Facts of the Variables in the New Dataflow Facts.</p><p><img src="https://picx1.zhimg.com/v2-f2b6351350543806f3a1b5f709071f78_1440w.jpg?source=172ae18b" alt="Graph Representation of Dataflow Functions, `x` is Shorthand for the Facts of `x`"></p><p>Worklist Algorithm: an Algorithm which takes Objects from a Worklist (a Queue of some sort) one at a time, processes it in some way, and perhaps further adds new Objects to the Worklist, until some Target is reached. Example: Breadth First Search.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Review: Mining Input Grammars from Dynamic Taints</title>
    <link href="https://abbaswu.github.io/2022/11/02/Paper-Review-Mining-Input-Grammars-from-Dynamic-Taints/"/>
    <id>https://abbaswu.github.io/2022/11/02/Paper-Review-Mining-Input-Grammars-from-Dynamic-Taints/</id>
    <published>2022-11-02T07:00:00.000Z</published>
    <updated>2022-12-19T07:56:21.312Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Review for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/2970276.2970321">here</a>.</p><p>A program usually accepts a formal language as input. Inferring the grammar of this formal language is an important task with many use cases.</p><ul><li>Helps humans understand the structure of the formal language.<ul><li>Manually writing valid inputs</li><li>Reverse Engineering</li></ul></li><li>Generate inputs for testing and fuzzing</li></ul><p>The authors propose Autogram, a method that infers a Context Free Grammar given a set of sample inputs and a Java program that accepts that set of inputs and uses it in some way. Autogram adapts a Dynamic Taining-based approach: </p><ul><li>It monitors the data flow of each character within the input, with “the Input Fragment it came from” as the taint.</li><li>It traces method entries, method exits, field accesses, and array accesses within the execution of the program.</li><li>From such a trace, the Dynamic Call Tree is reconstructed, and the sets of Intervals (Input Fragments) processed by functions, stored in variables, and returned by functions is derived.</li><li>This is used to build an Interval Tree, and the Interval Tree is refined into a Pure Input Tree free of conflicting overlaps (resulting from parsers using lookaheads).</li><li>The pure input tree is assumed to be a Parse Tree, and Production Rules are derived from it. The leaf nodes are considered to be Terminals, and Regular Expressions matching them are learned.</li></ul><p>The authors then conduct an experimental study concerning the accuracy and completeness of the inferred Context Free Grammars using “parts of the Java Standard API that are used to process URLs and property files”, and “open source projects that implement support for CSV, INI, and JSON formats”.</p><hr><p>However, I had more questions than answers after reading this paper.</p><ul><li>One of the use cases that the authors mentioned is “the grammar vastly simplifies the creation of parsing programs that decompose existing inputs into their constituents”. Why don’t we directly extract the parsing logic out of the program Autogram runs on?</li><li>The type of Context Free Grammar inferred by Autogram seems to be an LL(1) Grammar. This type of Grammar is only able to represent simple Grammars, and does not support for Left Recursion, which is pervasive in real-world Grammars. Why don’t they infer an LALR(1) Grammar, which is both simple and expressive (it supports representing may real-world Programming Languages). Perhaps, a Hidden Markov Model could be trained to infer the Transitions between the States within the LALR(1) Parse Table should an LALR(1) Grammar be inferred?</li><li>In the current implementation of Autogram, tracing is efficient, as the authors have mentioned: “millions of calls result in traces of a few Megabytes”. However, the current implementation incurs a ~100x performance overhead, and there is a lot of room for performance optimization. Maybe ideas that we have discussed for TaintCheck and Qsym (direct Binary Analysis, preinstrumenting Bytecode, JIT compilation etc.) could be used here?</li><li>The specific process of refining an Interval Tree into a Pure Interval Tree free of conflicting overlaps is not described clearly in the paper. Why don’t the author present an example with figures showing the manipulation of nodes within the Interval Tree during this process? The author also mentions applying “a simple heuristic that assumes left to right processing of the input” to resolve possible ambiguities associated with parsers using lookaheads. However, what is the rationale behind this “simple heuristic”?</li><li>The specific process of deriving Production Rules from the Pure Interval Tree is also unclear. What do the authors mean by “We can thus check if nodes are compatible and can be used to derive productions for for the same nonterminal symbol”? What is the meaning of “compatible” in this context?</li><li>The programs used in the experimental study are all open-source programs of very high code quality (containing accurately named variables and functions). However, how well does Autogram work with closed-source programs, and&#x2F;or programs with low code quality, containing obscure variable and function names? This is frequently the situation we encounter when we try to reverse engineer the (often closed-source and&#x2F;or obscure) structure of a program’s input, one of the major use cases of Autogram.</li></ul><p>Also some inspiration and ideas I got from the paper:</p><ul><li>The author mentions that “dynamic tainting allows us to precisely identify which parts of a programs input are read, stored and processed at any point in time”. Could this technique be used in a Fuzzing context to identify which bits generated by a Coverage-Guided Fuzzer are used in which sections of a fuzzed program?</li><li>The logic of building an Interval Tree is very interesting, and it reads like the “Subset Tree” mentioned in the KLEE paper. I conject that both these Tree Structures could be generalized and used in a much wider range of contexts.</li></ul><hr><p>Feedback from the Class Discussion</p><ul><li>A Context Free Grammar may not capture the structure of binary files.</li><li>How does the approach compare to unsupervised parsing in NLP or fine-tuning language models, especially with a lot of input?</li><li>Is it possible to use feedback to improve the mined grammar?</li><li>From one tree, we infer one set of grammar rules; from 1000 trees, we infer 1000 sets of grammar rules. They are merged together to derive the final Context Free Grammar.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Review for &lt;a href=&quot;https://www.carolemieux.com/teaching/CPSC539L_2022w1.html&quot;&gt;Topics in Programming Languages: Aut</summary>
      
    
    
    
    <category term="Paper Review" scheme="https://abbaswu.github.io/categories/Paper-Review/"/>
    
    <category term="Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis" scheme="https://abbaswu.github.io/categories/Paper-Review/Topics-in-Programming-Languages-Automated-Testing-Bug-Detection-and-Program-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>Various Solutions for Different Types of Reverse Proxying</title>
    <link href="https://abbaswu.github.io/2022/10/30/Various-Solutions-for-Different-Types-of-Reverse-Proxying/"/>
    <id>https://abbaswu.github.io/2022/10/30/Various-Solutions-for-Different-Types-of-Reverse-Proxying/</id>
    <published>2022-10-30T07:00:00.000Z</published>
    <updated>2022-12-18T19:57:43.647Z</updated>
    
    <content type="html"><![CDATA[<p>There are some situations in which we have to expose a locally running web service to the Internet. This is know as Reverse Proxying. Depending on the situation in hand, there are multiple ways to do this:</p><h1 id="Server-with-Public-IP-Available"><a href="#Server-with-Public-IP-Available" class="headerlink" title="Server with Public IP Available"></a>Server with Public IP Available</h1><p>In this case, the Server is also known as a Jump Server.</p><h2 id="Client-Accessible-from-Server"><a href="#Client-Accessible-from-Server" class="headerlink" title="Client Accessible from Server"></a>Client Accessible from Server</h2><p>Run a port-forwarding tool such as <code>socat</code> on the Server.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat TCP-LISTEN:&lt;Port the Server listens on&gt;,fork,reuseaddr TCP:&lt;IP address of the Client&gt;:&lt;Port of the Service on the Client&gt;<br></code></pre></td></tr></table></figure><h2 id="Client-Inaccessible-from-Server"><a href="#Client-Inaccessible-from-Server" class="headerlink" title="Client Inaccessible from Server"></a>Client Inaccessible from Server</h2><p>Use <a href="https://github.com/rofl0r/nat-tunnel">nat-tunnel</a> on both the Server and the Client.</p><p>Or, use <a href="https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/">Reverse SSH Tunneling</a> on the Client.</p><h3 id="Reverse-SSH-Tunneling"><a href="#Reverse-SSH-Tunneling" class="headerlink" title="Reverse SSH Tunneling"></a>Reverse SSH Tunneling</h3><h3 id="Before-Tunneling"><a href="#Before-Tunneling" class="headerlink" title="Before Tunneling"></a>Before Tunneling</h3><p>On the Server:</p><ul><li>Update the sshd config file (<code>/etc/ssh/sshd_config</code>). Set <code>GatewayPorts</code> to <code>yes</code>.</li><li>Restart the SSH Service.</li><li>Make sure the Port the Server listens on allows Inbound Traffic.</li></ul><h3 id="To-Tunnel"><a href="#To-Tunnel" class="headerlink" title="To Tunnel"></a>To Tunnel</h3><p>On the Client:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh [-f] [-N] [-T] -R &lt;Port the Server listens on&gt;:localhost:&lt;Port of the Service on the Client&gt; [How you connect to the Server (e.g. `-i key-pair.pem &lt;username&gt;@&lt;domain&gt;`)]<br></code></pre></td></tr></table></figure><ul><li><code>-f</code> tells the SSH to background itself after it authenticates, saving you time by not having to run something on the remote server for the tunnel to remain alive.</li><li><code>-N</code> if all you need is to create a tunnel without running any remote commands then include this option to save resources.</li><li><code>-T</code> useful to disable pseudo-tty allocation, which is fitting if you are not trying to create an interactive shell.</li><li><code>-R</code> tells the tunnel to answer on the remote side.</li></ul><h1 id="Server-with-Public-IP-Unavailable"><a href="#Server-with-Public-IP-Unavailable" class="headerlink" title="Server with Public IP Unavailable"></a>Server with Public IP Unavailable</h1><p>Use a commercial service such as <code>ngrok</code> on the Client.</p><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Reverse_proxy">https://en.wikipedia.org/wiki/Reverse_proxy</a></li><li><a href="https://www.kvm.la/1328.html">https://www.kvm.la/1328.html</a></li><li><a href="https://blog.csdn.net/weixin_35867652/article/details/104362302">https://blog.csdn.net/weixin_35867652/article/details/104362302</a></li><li><a href="https://www.hostinger.com/tutorials/how-to-set-up-nginx-reverse-proxy/">https://www.hostinger.com/tutorials/how-to-set-up-nginx-reverse-proxy/</a></li><li><a href="https://stevessmarthomeguide.com/understanding-port-forwarding/">https://stevessmarthomeguide.com/understanding-port-forwarding/</a></li><li><a href="https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/">https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/</a></li><li><a href="https://linuxhint.com/ssh-port-forwarding-linux/">https://linuxhint.com/ssh-port-forwarding-linux/</a></li><li><a href="https://www.ssh.com/academy/ssh/tunneling-example">https://www.ssh.com/academy/ssh/tunneling-example</a></li><li><a href="https://superuser.com/questions/1408427/remote-port-forwarding-through-a-jump-server">https://superuser.com/questions/1408427/remote-port-forwarding-through-a-jump-server</a></li><li><a href="https://unix.stackexchange.com/questions/436290/single-step-ssh-port-forwarding-not-working-but-only-works-when-ssh-port-forward?rq=1&amp;newreg=def5dfc9fb43466d8685fd7639eb17cc">https://unix.stackexchange.com/questions/436290/single-step-ssh-port-forwarding-not-working-but-only-works-when-ssh-port-forward?rq=1&amp;newreg=def5dfc9fb43466d8685fd7639eb17cc</a></li><li><a href="https://www.opensourceforu.com/2021/09/how-to-do-reverse-tunnelling-with-the-amazon-ec2-instance/">https://www.opensourceforu.com/2021/09/how-to-do-reverse-tunnelling-with-the-amazon-ec2-instance/</a></li><li><a href="https://superuser.com/questions/1194105/ssh-troubleshooting-remote-port-forwarding-failed-for-listen-port-errors">https://superuser.com/questions/1194105/ssh-troubleshooting-remote-port-forwarding-failed-for-listen-port-errors</a></li><li><a href="https://docs.hevodata.com/getting-started/connection-options/connecting-through-reverse-ssh/">https://docs.hevodata.com/getting-started/connection-options/connecting-through-reverse-ssh/</a></li><li><a href="https://www.youtube.com/watch?v=TZ6W9Hi9YJw">https://www.youtube.com/watch?v=TZ6W9Hi9YJw</a></li><li><a href="https://blog.devolutions.net/2017/03/what-is-reverse-ssh-port-forwarding/">https://blog.devolutions.net/2017/03/what-is-reverse-ssh-port-forwarding/</a></li><li><a href="https://chenhuijing.com/blog/tunnelling-services-for-exposing-localhost-to-the-web/">https://chenhuijing.com/blog/tunnelling-services-for-exposing-localhost-to-the-web/</a></li><li><a href="https://johackim.com/how-to-expose-local-server-behind-firewall">https://johackim.com/how-to-expose-local-server-behind-firewall</a></li><li><a href="https://gabrieltanner.org/blog/port-forwarding-frp/">https://gabrieltanner.org/blog/port-forwarding-frp/</a></li><li><a href="https://www.techiediaries.com/public-localhost/">https://www.techiediaries.com/public-localhost/</a></li><li><a href="https://superuser.com/questions/121435/is-it-possible-to-host-a-web-server-from-behind-a-nat/1360660">https://superuser.com/questions/121435/is-it-possible-to-host-a-web-server-from-behind-a-nat/1360660</a></li><li><a href="https://medium.com/tech-learnings/how-to-expose-a-local-server-to-the-internet-without-any-additional-tools-ae49e6b8fe93">https://medium.com/tech-learnings/how-to-expose-a-local-server-to-the-internet-without-any-additional-tools-ae49e6b8fe93</a></li><li><a href="https://serverfault.com/questions/282959/how-do-i-reach-my-internal-server-on-the-external-ip">https://serverfault.com/questions/282959/how-do-i-reach-my-internal-server-on-the-external-ip</a></li><li><a href="https://superuser.com/questions/624925/how-to-access-internal-valid-ip-through-internet">https://superuser.com/questions/624925/how-to-access-internal-valid-ip-through-internet</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There are some situations in which we have to expose a locally running web service to the Internet. This is know as Reverse Proxying. Dep</summary>
      
    
    
    
    <category term="Code" scheme="https://abbaswu.github.io/categories/Code/"/>
    
    <category term="Computer Networking" scheme="https://abbaswu.github.io/categories/Code/Computer-Networking/"/>
    
    
  </entry>
  
</feed>
