<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sarah Chasins&#39; Works on PL and HCI</title>
    <link href="/2023/11/05/Sarah-Chasins-Works-on-PL-and-HCI/"/>
    <url>/2023/11/05/Sarah-Chasins-Works-on-PL-and-HCI/</url>
    
    <content type="html"><![CDATA[<h1 id="Co-Designing-for-Transparency-Lessons-from-Building-a-Document-Organization-Tool-in-the-Criminal-Justice-Domain"><a href="#Co-Designing-for-Transparency-Lessons-from-Building-a-Document-Organization-Tool-in-the-Criminal-Justice-Domain" class="headerlink" title="Co-Designing for Transparency: Lessons from Building a Document Organization Tool in the Criminal Justice Domain"></a><a href="https://dl.acm.org/doi/10.1145/3593013.3594093">Co-Designing for Transparency: Lessons from Building a Document Organization Tool in the Criminal Justice Domain</a></h1><p>Investigative journalists and public defenders are crucial in scrutinizing and litigating significant matters concerning police violence and misconduct. However, they often need help navigating through vast, unordered heaps of data, which adds strain to their resource-constrained teams.</p><p>In partnership with U.S. public defenders and investigative journalists, we developed an AI-enhanced tool through a joint design effort to aid in working with such data. This process offered us valuable insights into the requirements of resource-constrained teams dealing with large data sets, including how some experts became self-taught programmers to streamline their workflows.</p><p>We pinpointed three primary data needs throughout our collaborative design journey and established five design objectives.</p><h2 id="Three-Primary-Data-Needs"><a href="#Three-Primary-Data-Needs" class="headerlink" title="Three Primary Data Needs"></a>Three Primary Data Needs</h2><p>Data Cleaning, particularly the process of de-duplication. That involves identifying identical (images of pages are pixel-for-pixel copies of each other) or nearly identical data (images are not pixel-for-pixel identical but capture the same physical document) within a dataset.</p><p>Data Extraction. The professionals also struggled in extracting relevant information such as names, dates, locations, and case numbers from case files due to their disparate formats and layouts, necessitating extensive, hands-on work.</p><p>Data Organization. There was a need to systematically organize PDF documents by specific cases, complicated by the fact that cases may be spread across numerous documents and folders, or conversely, several cases might be compiled into one extensive PDF.</p><h2 id="Five-Fundamental-Design-Principles"><a href="#Five-Fundamental-Design-Principles" class="headerlink" title="Five Fundamental Design Principles"></a>Five Fundamental Design Principles</h2><p>Human Control and Intervention. The design must prioritize aiding users over complete automation of the process.</p><p>Non-Interference with Existing Practices. The design should integrate seamlessly with existing workflows and practices.</p><p>Adaptability to Data Diversity.</p><p>High-level Abstractions. General-purpose languages like Python or R demand extensive technical expertise. Pre-built software, on the other hand, offers limited flexibility.</p><p>Cost-Sensitive Solutions.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>Participants in our sessions became adept in all three programming paradigms (visual, PBE, and text-based interfaces).</p><ul><li>This contradicts the common misconception that non-technical experts need formal coding training to handle text-based programming; if the tools are appropriately supportive, they can.</li><li>Rather than creating new code, participants preferred to modify what was already there. Particularly with text-based coding, almost all chose to adapt sample code instead of originating their own, aligning with previous research on the blank-page syndrome.</li></ul><hr><h1 id="A-Need-Finding-Study-with-Users-of-Geospatial-Data"><a href="#A-Need-Finding-Study-with-Users-of-Geospatial-Data" class="headerlink" title="A Need-Finding Study with Users of Geospatial Data"></a><a href="https://dl.acm.org/doi/abs/10.1145/3544548.3581370">A Need-Finding Study with Users of Geospatial Data</a></h1><p>Current geospatial analysis and visualization tools present significant learning curves and usability challenges.</p><ul><li>Finding and transforming geospatial data to specific spatiotemporal constraints.</li><li>Grasping the behavior of geospatial operators.</li><li>Tracking the provenance of geospatial data, including cross-system provenance.</li><li>Exploring the cartographic design space.</li></ul><h2 id="Grasping-the-behavior-of-geospatial-operators"><a href="#Grasping-the-behavior-of-geospatial-operators" class="headerlink" title="Grasping the behavior of geospatial operators"></a>Grasping the behavior of geospatial operators</h2><p>Users had to run operators and manually check outputs to understand operator semantics.</p><p>Live programming, which offers users immediate visual feedback on program behavior using concrete inputs, could align with users’ existing debugging patterns of using small collections of geographic features or pixels as test cases to infer operator behavior.</p><h2 id="Tracking-the-provenance-of-geospatial-data-including-cross-system-provenance"><a href="#Tracking-the-provenance-of-geospatial-data-including-cross-system-provenance" class="headerlink" title="Tracking the provenance of geospatial data, including cross-system provenance"></a>Tracking the provenance of geospatial data, including cross-system provenance</h2><p>The GIS tools used by participants did not track the steps leading to final outputs, complicating the replication of previous analyses. </p><p>Modifying maps or adapting them to new datasets often meant laboriously reverse engineering the initial analysis steps.</p><p>Creating repeatable and communicable geospatial workflows was a struggle for GIS users. Limitations in current history features made it difficult to recover information on the current analysis state or revisit past analysis decisions.</p><p>The problem of tracking provenance across different systems was also prominent.</p><p>Users often kept informal records of the steps taken in data acquisition, cleaning, analysis, and visualization, which spanned several applications. For instance, one user used macOS Notes to detail a process involving data transfer between Sentinel Hub, QGIS, Illustrator, and Photoshop, documenting everything from selecting a Sentinel-2 image to reassembling raster segments in Illustrator. This kind of multi-tool orchestration was typical among our subjects, yet none had automated systems to log data lineage across these platforms.</p><h2 id="Exploring-the-cartographic-design-space"><a href="#Exploring-the-cartographic-design-space" class="headerlink" title="Exploring the cartographic design space"></a>Exploring the cartographic design space</h2><p>Many participants used direct manipulation tools for geospatial data visualization, which discarded all geographical metadata, posing challenges to revising the analysis after starting the visualization. This uncovers a potential for development in tools that (1) unify geospatial analysis with cartographic design and (2) preserve the geospatial data aspects of visual elements while supporting direct manipulation.</p><p>Existing research suggests that combining scripting with direct manipulation for visually oriented tasks is feasible. The Sketch-n-sketch application is a testament to the successful merger of these methods for SVG graphics.</p><p>Such a combined approach could also remedy the fundamental issue participants faced when using direct manipulation tools for cartography: the need to recreate map designs in code after finishing a design.</p><hr><h1 id="How-Statically-Typed-Functional-Programmers-Write-Code"><a href="#How-Statically-Typed-Functional-Programmers-Write-Code" class="headerlink" title="How Statically-Typed Functional Programmers Write Code"></a><a href="https://dl.acm.org/doi/10.1145/3485532">How Statically-Typed Functional Programmers Write Code</a></h1><p>A deeper comprehension of the coding methods of statically-typed functional programmers could lead to the creation of more practical tools, more user-friendly programming languages, and better gateways into programming communities.</p><p>These programmers utilize their compilers for more than just producing an executable; they also use compilers as corrective and directive aids.</p><ul><li>Compilers as corrective tools. Compiler error messages were useful not just to fix their programs but also to correct their mental models of the problem domain.</li><li>Compilers as directive tools. Many developers treat compiler errors as to-do lists, guiding their subsequent coding actions. A typical process includes beginning a program change with a minor alteration and compiling to receive error-driven sub-tasks - essentially turning error messages into a step-by-step guide for coding.</li></ul><p>It’s not uncommon for programmers to compile their code with the expectation of errors, using the compiler to validate the direction of their development.</p><p>Statically-typed functional programmers often seek feedback from automated tools even when their code isn’t yet operational, suggesting that such tools should strive to extract as much information as possible from non-compilable code.</p><p>When comparing pattern matching with combinators, statically-typed functional programmers report less cognitive and time pressure with the former. This could be due to pattern matching’s explicit textual representation of tasks, explicit handling of recursion, or consistent interface across various data structures. Nonetheless, some programmers prefer to rewrite their code using combinators eventually. Ideally, a tool would assist in this process, starting with a data type and guiding the programmer through case completion, subsequently offering a series of combinators as a refined alternative.</p><p>It is beneficial to recognize which language constructs allow for low-workload or opportunistic construction and how these constructs are valued within the programming community.</p><p>There’s a demand for tools that minimize the difficulty of altering types during development. Furthermore, these tools should facilitate the natural cyclic changes of a developer’s focus between modifying types and modifying expressions, possibly by employing program repair techniques to predict how changes in one will affect the other.</p><p>Program sketches provide a wealth of information about undefined functions, like inferred types and potential uses. Since statically-typed functional programmers regularly employ this method of drafting and refining code, there’s a clear opportunity for tools that could enhance or even automate parts of this practice.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Research Programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Giving Talks on Research: Whats and Hows</title>
    <link href="/2023/10/27/Giving-Talks-on-Research-Whats-and-Hows/"/>
    <url>/2023/10/27/Giving-Talks-on-Research-Whats-and-Hows/</url>
    
    <content type="html"><![CDATA[<hr><p>As researchers, we often need to give talks on our research, either as part of presenting our results, or as a means of pitching our aspirations for the future. In this talk, inspired by ideas presented by Derek Dreyer at CMMRS 2023, Simon Peyton Jones at ICFP PLSE 2023, Finn Hacket and Robert Xiao at “Workshop on Presentation Skills”, and my personal experiences, I will present the high-level “whats” an ideal talk should be like, and the low-level “hows” along the path of actually preparing and giving such talks.</p><p>Source code and compiled PDF of the presentation for “Giving Talks on Research: Whats and Hows” presented at the Systopia Reading Group Oct 27, 2023 is available <a href="https://github.com/abbaswu/Giving-Talks-on-Research-Whats-and-Hows/tree/main">in this GitHub repository</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Talks</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Conversation with Prof. Robert Xiao</title>
    <link href="/2023/10/23/Conversation-with-Prof-Robert-Xiao/"/>
    <url>/2023/10/23/Conversation-with-Prof-Robert-Xiao/</url>
    
    <content type="html"><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>The following is a polished version of a conversation with <a href="https://www.robertxiao.ca/">Prof. Robert Xiao</a> on the confluence of Programming Languages, Software Engineering, and Human-Computer Interaction (HCI) for research programming. The main points mentioned by Prof. Robert Xiao are as follows.</p><ul><li>Determining which aspects of research programming are amenable to systematization is a challenge.</li><li>Advancements in code tracing, like PyTorch 2’s bytecode analysis, which, while not addressing verifiability directly, allows for in-depth program behavior analysis.</li><li>Understanding the influence of input data on outputs is central to the challenge of explainable AI (XAI). However, pinpointing specific model features or layers leading to an output is perhaps more accessible and useful for debugging.</li><li>The concept of ‘radioactively’ tagging data to trace its influence through a model is an intriguing one, akin to tracking the uptake of a tagged substance in a biological system.</li><li>There are many scenarios with extensive object interactions in programming. Game programming provides a more structured context to study these complexities, with ample open-source resources for research. The difficulty in game programming arises from the myriad interactions between diverse object systems - like physics, collision, and interaction logic. Coding these interactions is a lot of work. It would be enlightening to study how game developers handle this complexity and whether there are ways to simplify it. Game studios, being the behemoths they are, would undoubtedly embrace methods to alleviate the strenuous nature of their programming efforts.</li></ul><h1 id="Polished-Transcript"><a href="#Polished-Transcript" class="headerlink" title="Polished Transcript"></a>Polished Transcript</h1><p>Robert Xiao: [00:00] Could you share the focus of your research and how it’s pertinent to this project? Also, what do you aim to achieve with it? There seem to be several components you’ve touched upon, such as visualization, pipeline development, and programming processes. These represent different approaches you could potentially adopt or consider integrating into a comprehensive pipeline. I believe the ultimate goal here is to aid research programmers in accelerating system development while minimizing errors, correct?</p><p>Jifeng Wu: [00:43] Yes, precisely.</p><p>Robert Xiao: [00:45] Let’s delve into your research focus. How does your current work align with this?</p><p>Jifeng Wu: [00:52] My ongoing research isn’t directly related, as this is a path I’m contemplating for a future Ph.D. project, which I still need to commit to. I’m currently working on my master’s thesis titled ‘Type Inference for Python.’ It aims to infer types in Python code, which often lacks annotations. This lack can lead to IDEs providing less accurate suggestions. With type information, predictions become more reliable, enhancing the coding and code interaction experience.</p><p>Robert Xiao: [01:54] So, to clarify, your project is about developing a system for automatic type inference that assists IDEs, not just creating a type annotation database. Existing tools do offer preliminary type extraction, but I’m interested in the novel contribution your research makes.</p><p>Jifeng Wu: [02:31] Exactly. I’m not just extracting types; I’m inferring them in unannotated code bases to enhance IDE functionality.</p><p>Robert Xiao: [02:45] Understood. There are incremental typing tools available, but we can explore that later. For now, it’s great that you’re well-versed in Python, especially since it’s prevalent in LLM research. An interesting aspect of your direction could be mitigating bugs, which often derail projects. Implementing automated checks could be invaluable. However, the challenge lies in determining which aspects of research programming are amenable to systematization.</p><p>Jifeng Wu: [06:17] My vision is to support researchers engaged in data analysis or custom model design in an environment akin to Jupyter notebooks. And touching on debugging, I see a potential to harness functional programming due to its purity and ease of debugging.</p><p>Robert Xiao: [07:22] The question, however, is the application of functional programming to research code, which often depends on pre-existing libraries. While functional design has its merits, the practicality of integrating it into the current ecosystem is worth discussing.</p><p>Jifeng Wu: [07:55] I concede the point; many codebases are indeed messy. I’m contemplating a clean slate design, potentially developing a new language or library to demonstrate the concept.</p><p>Robert Xiao: [08:21] It’s noteworthy that there have been advancements in code tracing, like PyTorch 2’s bytecode analysis, which, while not addressing verifiability directly, allows for in-depth program behavior analysis.</p><p>Jifeng Wu: [11:09]<br>Certainly. There are facets of current notebook technologies that pique my interest, primarily due to their inadequate support, with debugging being a prime example. Debugging encompasses two key aspects: the logic of the program, as previously mentioned, and data provenance. Sometimes, despite the sound logic, I need to delve into the origins of an unexpected output data point by tracing the implicit calculations that led to it.</p><p>[11:58]<br>This necessity for data provenance tracking is something I find critically important in my daily research, and I understand it’s known as the data provenance problem.</p><p>Robert Xiao: [12:09]<br>Indeed, if you’ve ever discussed this with Margo, you’re likely well-versed in the topic, given her research focuses precisely on provenance. Many of her colleagues are exploring this area, which is complex, particularly in the context of outputs from extensive machine learning models. While it would be beneficial to trace data points back to their origins, integrating such a mechanism into a model is a formidable challenge.</p><p>[12:55]<br>As a developer, I’m keen on understanding the influence of input data on outputs, which is central to the challenge of explainable AI (XAI). Resolving this would mark a significant milestone. However, pinpointing specific model features or layers leading to an output is perhaps more accessible and useful for debugging.</p><p>[13:53]<br>For instance, identifying a misconfigured layer responsible for input-related issues would be invaluable. Although considering the interconnected nature of model layers, this remains a complex task.</p><p>[14:57]<br>The concept of ‘radioactively’ tagging data to trace its influence through a model is an intriguing one, akin to tracking the uptake of a tagged substance in a biological system. Yet, translating this to a machine learning environment presents a unique set of challenges.</p><p>[16:57]<br>While I’m not deeply familiar with the latest advancements in this field, it’s clear that XAI could significantly benefit HCI applications. The goal is to incrementally address these challenges by developing models that acknowledge tagged inputs throughout the data processing pipeline.</p><p>[17:58]<br>These are some thoughts on the subject. I’d like to know which aspects you find most relevant or valuable for your future endeavors.</p><p>Jifeng Wu: [18:15]<br>The examples and pointers you’ve provided are insightful. As someone with a software engineering background, I believe that adapting certain constructs, like functional programming and traditional program analysis, could offer potential solutions. These are directions I’m considering for my Ph.D. research.</p><p>Robert Xiao: [18:58]<br>Exploring program tracing for optimization could prove fruitful, given the untapped potential in that area. The philosophy I subscribe to favors solutions that minimize user effort, exemplified by the tracing compiler feature in PyTorch 2.0. Unlike TensorFlow model, which requires upfront operation declarations, PyTorch’s immediate mode operation presents a more straightforward approach for users, facilitating a clearer understanding of variable flow during execution.</p><p>Jifeng Wu: [ 24:12 ]<br>Incidentally, as a researcher in HCI, have you ever engaged in work that marries aspects of software engineering, specifically functional programming, with HCI?</p><p>Robert Xiao: [ 24:28 ]<br>My experience with functional programming in a research capacity is virtually nonexistent. My computer science education covered the basics of functional programming - I dabbled in Scheme and Racket - but in terms of research, functional programming hasn’t been part of my repertoire. Our work typically involves Python, C#, and various visual programming tools, none of which adhere to a functional programming paradigm.</p><p>[ 24:56 ]<br>Game programming, which encompasses many of our VR&#x2F;AR programming, is about as far removed from functional programming as possible. It’s heavily state-driven, with an ever-changing state environment. A functional approach could be applied to VR&#x2F;AR development. It could offer advantages over current methods. I’m aware of actor model programming being used for VR&#x2F;AR experiences, though it’s not functional programming per se, and I have yet to adopt it in my work personally. Conversely, when it comes to software engineering, we do integrate its methodologies into our software creation process. This includes best practices like code structuring for reusability, modularization, refactoring, and especially source control, which I find is grossly underutilized in research programming, among other things.</p><p>Jifeng Wu: [ 26:33 ]<br>Understood, yes.</p><p>My vision, when I speak of integrating functional programming, isn’t confined to conventional languages like Scheme or Racket that you mentioned earlier.</p><p>My thoughts were more aligned with programming paradigms like the actor model you described, as well as visual programming. I’m interested in approaches that are more formalized, easier to reason about, and offer a clearer path to verifying properties and facilitating debugging.</p><p>Robert Xiao: [ 27:18 ]<br>With general-purpose imperative coding, the debugging process is, frankly, a nightmare. Although my personal experience in developing large-scale games is limited, our research typically involves creating specific VR&#x2F;AR experiences. These are smaller in scale, utilizing existing libraries to build a finite number of interactive elements within a controlled environment. This contrasts with the vast complexity of full-scale game development, where the difficulty arises from the myriad interactions between diverse object systems - like physics, collision, and interaction logic.</p><p>[ 28:55 ]<br>Take collision logic as an instance; the multitude of possible outcomes from a single collision event can be incredibly intricate to code. If we consider bullet dynamics in games, the behavior of these projectiles upon impact with walls, enemies, or objects varies dramatically, leading to a cascade of different effects. Coding these interactions is a lot of work. It would be enlightening to study how game developers handle this complexity and whether there are ways to simplify the process. The Entity Component System (ECS) attempts to mitigate this by adopting an actor-like model, but even then, complexity escalates rapidly as interactions increase.</p><p>[ 30:56 ]<br>Despite efforts to manage these interactions, there comes a point where local decisions require some form of higher-level orchestration. When a bullet is fired, for instance, numerous actions must be coordinated, from ammo count adjustments to triggering animations. All this complexity makes game programming something I would not want to revisit except in the context of my research. However, there lies a vast potential for impactful research in understanding and easing the complexities of game development. Game studios, being the behemoths they are, would undoubtedly embrace methods to alleviate the strenuous nature of their programming efforts. Yes, indeed.</p><p>Jifeng Wu: [32:00]<br>Indeed, that aligns with my central interests. My master’s thesis on Python type inference encountered similar challenges to those you’ve highlighted. In analyzing types, one must grapple with substantial propagation throughout the program. This is precisely the issue at hand, and it serves as a prime motivator in my quest to develop formalizations that simplify the process for programmers, particularly in areas like game development, where complex interactions are commonplace.</p><p>Robert Xiao: [32:45]<br>You’ve sparked a thought here - this may be a digression - but I’m curious. Has there been research into the amount of typing necessary for untyped code to converge? You made an excellent point about the recursive search required in untyped code to determine types, which resembles an intricate graph search. However, it’s more than that because the connections in the ‘type graph’ are not always apparent. This raises an intriguing theoretical question: At what point in a code base’s typing does the cost shift from an exponential to a linear time complexity? It’s a highly theoretical question, indeed, and one that surely must have been examined in terms of computational complexity.</p><p>[34:58]<br>It’s fascinating because most research focuses on strong typing systems and type inference within defined parameters. But the dynamics change with untyped constructs. Apologies for the tangent - it’s just a curious question.</p><p>Jifeng Wu: [35:32]<br>Your point is very interesting, and it is pertinent to my future research endeavors.</p><p>Robert Xiao: [35:39]<br>There ought to be studies on this - how computationally complex is a type system? The PL community has likely delved into this. However, the issue becomes significantly more compelling when considering untyped languages. Sorry for the tangent, but it’s a topic worth exploring.</p><p>Jifeng Wu: [36:15]<br>Returning to our discussion, my work in type inference for Python resonates with your mention of interaction-heavy domains like game programming.</p><p>Robert Xiao: [36:27]<br>Certainly. Game programming exemplifies a scenario with extensive object interactions, which is atypical in most systems where such interactions are minimized. For instance, hiring a student triggers a cascade of bureaucratic actions, illustrating how a single decision can activate multiple layers of complexity. Managing these interactions presents a formidable challenge in software engineering - taming the complexity is a substantial part of the job. However, game programming provides a more structured context to study these complexities, with ample open-source resources for research.</p><p>Jifeng Wu: [38:55]<br>Your insights on game programming are quite valuable.</p><p>[38:59]<br>I hadn’t realized the prominence of such problems in that field. Your points offer an excellent foundation for my research into these issues.</p><p>Robert Xiao: [39:16]<br>There are indeed intriguing research opportunities at the intersection of AI, software, programming languages, and HCI. Although my HCI pursuits are broad, one key HCI interest is explainable AI. As language models advance, the ability to explain AI operations lags, posing a risk of increasing reliance on inscrutable systems. Advancing explainable AI methodologies will be critical in HCI, particularly in the coming years.</p><p>Jifeng Wu: [42:10]<br>Yes, indeed. What captivates my interest more than the empirical approach to software engineering - like automated bug detection and performance optimization - is the human-computer interaction aspect, particularly making developers’ lives easier. This is crucial, especially for rapid prototyping.</p><p>Robert Xiao: [42:42]<br>Right, your IDE example aligns perfectly with that. It’s a tool that enhances usability for people - expanding how they interact with typing. It could very well be something for publication. So, you’re drawing connections here. When do you expect to graduate?</p><p>Jifeng Wu: [43:05]<br>If all goes according to my advisor’s plan, I should graduate in May 2024.</p><p>Robert Xiao: [43:13]<br>Okay. And your advisor is?</p><p>Jifeng Wu: [43:16]<br>Caroline Lemieux from the Software Practices Lab.</p><p>Robert Xiao: [43:20]<br>Oh, yes, she’s a recent addition. So, she’s guiding you toward a May graduation. And regarding your Ph.D., are you considering continuing in the Software Practices Lab or exploring other areas?</p><p>Jifeng Wu: [43:38]<br>Well, our lab’s focus is split between user studies and the technical side, like bug detection or software fuzzing, and, on the other hand, theoretical topics like formal semantics. There isn’t much overlap with HCI and usability, so I’m uncertain about where I’ll pursue a Ph.D., if at all, but likely not within our Software Practices Lab.</p><p>Robert Xiao: [44:21]<br>That’s something to ponder, especially as you approach graduation in May. Are you already applying to Ph.D. programs?</p><p>Jifeng Wu: [44:34]<br>I am still deciding. I’m still considering my options.</p><p>Robert Xiao: [44:38]<br>Sure, it’s a big decision. My focus is on VR&#x2F;AR-related projects, where my funding comes from. It’s trickier to shift to developing support tools for developers without an established portfolio. However, I’m open to discussing co-advisory opportunities or committee collaborations if you pursue a Ph.D. here at UBC.</p><p>Jifeng Wu: [45:44]<br>That’s encouraging to hear.</p><p>Robert Xiao: [45:45]<br>To clarify, I’m not sure I could supervise a Ph.D., but I’m open to discussing future possibilities.</p><p>Jifeng Wu: [45:59]<br>That aligns with my thoughts as well.</p><p>Robert Xiao: [46:01]<br>Engaging in research discussions can help refine your interests, which is beneficial for crafting a strong research statement for Ph.D. applications. These conversations can guide your initial research direction, even though your focus may evolve.</p><p>Jifeng Wu: [47:10]<br>Thank you for the insights and advice today. They’ve been very helpful, and I’ll reflect on them further.</p><p>Robert Xiao: [47:24]<br>I’m glad to assist. You should have my email address.</p><p>Jifeng Wu: [47:30]<br>Is it listed on your website?</p><p>Robert Xiao: [47:32]<br>It should be - unless my website isn’t updated with my current email, which would be a blunder. Let me check.</p><p>Jifeng Wu: [47:36]<br>I’ll look it up.</p><p>Robert Xiao: [47:37]<br>If it’s on there, then it’s correct.</p><p>Jifeng Wu: [47:45]<br>Yes, it’s on your site.</p><p>Robert Xiao: [47:47]<br>Great, feel free to reach out anytime.</p><p>Robert Xiao: [47:56]<br>I’m impressed by your work and would be happy to attend your thesis presentation when the time comes.</p><p>Jifeng Wu: [48:15]<br>I appreciate that. Our conversation today has been very enjoyable.</p><p>Robert Xiao: [48:21]<br>It was an enlightening chat, indeed. If you have further questions or topics, don’t hesitate to email me.</p><p>Jifeng Wu: [48:34]<br>For now, that’s all I have. If something else comes up, I’ll send you an email. Thank you.</p>]]></content>
    
    
    <categories>
      
      <category>Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nico Ritschel&#39;s Ph.D. Defense Summary</title>
    <link href="/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/"/>
    <url>/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cs.ubc.ca/~ritschel/">Nico Ritschel</a>‘s research focuses on refining block-based programming by integrating elements from visual programming to make it more accessible and effective for end-users, especially in the robotics domain.</p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><ul><li>Block-based programming is mainly used for computer science education. Can they target other tasks, such as end-user programming?</li><li>The challenge: end-users often need to write larger, real-world programs, contrasting with the simple toy examples students typically handle.</li><li>Traditional block-based programming struggles with scalability, especially in terms of readability.</li><li>While visual end-user programming tools like Excel and Simulink support bigger programs through domain-specific visual abstractions, creating new visual languages is difficult and costly.</li><li>Solution Approach: Merge design features from visual programming into block-based programming languages.</li></ul><h1 id="Target-Domain-Robotics"><a href="#Target-Domain-Robotics" class="headerlink" title="Target Domain: Robotics"></a>Target Domain: Robotics</h1><ol><li><strong>Current Scenario:</strong><ul><li>Professional tools exist, but they’re challenging to use.</li><li>There needs to be more effective block-based tools in the domain.</li></ul></li><li><strong>Robot Arms for Factory Floors:</strong><ul><li>Task: Coordinate and synchronize two robot arms.</li><li>Issues: Current block-based languages require complex solutions like nontrivial mutexes.</li><li><strong>Solution &amp; Studies:</strong><ul><li>Proposed two design ideas:<ol><li>Represent programs for each arm vertically and side-by-side. Synchronized actions appear as shared nodes between the arms.</li><li>A left-to-right flow resembling video editing.</li></ol></li><li>The ‘side-by-side’ design was selected.</li><li>A study found that end-users using this design outperformed those using a commercial, text-based tool.</li></ul></li></ul></li><li><strong>Mobile Robots for Warehouses &amp; Labs:</strong><ul><li>Task: Handle large tasks across multiple workstations.</li><li>Issues:<ul><li>Difficulty decomposing long programs and locating where to make changes.</li><li></li></ul></li><li><strong>Solutions &amp; Features:</strong><ul><li>Introduced block-based language that supports functional decomposition.</li><li>Provided two separate canvases: one for task composition&#x2F;movement and the other for low-level task definitions.</li><li>Included triggers as dataflow graphs to improve the visibility of nested expressions and enhance user freedom in structuring programs.</li></ul></li></ul></li></ol><h1 id="Questions-Addressed-During-the-Practice-Session"><a href="#Questions-Addressed-During-the-Practice-Session" class="headerlink" title="Questions Addressed During the Practice Session"></a>Questions Addressed During the Practice Session</h1><ol><li><strong>Why focus on the two robotics scenarios?</strong><ul><li>They are important and relevant in the robotics domain.</li><li>These scenarios present challenges for end-users learning to program.</li><li>They represent a complex form of programming that’s worth refining.</li></ul></li><li><strong>Would functional programming principles enhance end-user visual programming, given the imperative nature of block-based programming?</strong><ul><li>The inherent complexity in robotics means many elements can’t be simplified.</li><li>Introducing functional programming might not necessarily boost user productivity.</li></ul></li><li><strong>What was the environment for user studies?</strong><ul><li>Engaged actual end-users for genuine feedback.</li><li>Also recruited students from non-computer science departments for a broader perspective.</li></ul></li></ol><h1 id="Questions-Asked-During-the-Ph-D-Defense"><a href="#Questions-Asked-During-the-Ph-D-Defense" class="headerlink" title="Questions Asked During the Ph.D. Defense"></a>Questions Asked During the Ph.D. Defense</h1><ul><li>How were the visions and observations formulated?<ul><li>Separate users into traditional versus new environments and then compare.</li><li>Gain knowledge of their needs and patterns.</li><li>Test on a small pool of users to refine the design.</li></ul></li><li>How do you account for the spectrum of end-users regarding programming experience, domain-specific task time, and tool experience?</li><li>Which results were the most and least robust?</li><li>What factors made the tool easy to learn?<ul><li>The “blocks” concept is already well-known.</li><li>The tool matches the users’ previous domain-specific knowledge (e.g., separate columns for two arms).</li></ul></li><li>How realistic is the decomposition at scale? Any evidence from related work?<ul><li>More of a “lower bound,” limited by the time of the user study.</li></ul></li><li>Why was the comparison made between block-based methods and graph-based methods?<ul><li>Graph-based methods are already used in end-user programming, such as game programming.</li></ul></li><li>What is the importance and implication of the determined p-value?<ul><li>We have a null hypothesis - there is no difference between the performance of the two groups.</li></ul></li><li>What improvements (e.g., 5%) are worthwhile?</li><li>What are the advantages of block-based approaches over dataflow, and how can this be further investigated?<ul><li>Different aspects, e.g., reading vs writing</li><li>Different domains, e.g., robotics vs game</li><li>Different styles of programs</li><li>Different representations of graphs</li></ul></li><li>How are potential accessibility challenges addressed?<ul><li>Already addressed to a degree in the normal block-based domain.</li><li>Domain-specific challenges are directions for future work.</li></ul></li><li>How does the new tool compare with LLMs?<ul><li>Can work together.</li><li>Have advantages in evolution and understanding vs. writing something that would work the first time.<ul><li>Debugging.</li><li>Reliability.</li><li>No training required.</li></ul></li></ul></li><li>What follow-up studies are anticipated for real-world usage? How do you anticipate the tool’s usability in practical scenarios? Follow-up studies based on real-world usage in the wild may encounter unanticipated, really specific problems. Is your tool something someone wants to use in practice?</li><li>Would featuring a table of reactive values a la Excel be beneficial?</li><li>How do different domains within computer science influence the tool’s design and analysis? What interdisciplinary expertise would be beneficial?<ul><li>Information visualization.</li><li>Designing design drafts with an expert in visualization would be beneficial.</li></ul></li><li>What about your tool’s applicability to expert programmers instead of end users?<ul><li>Different design goals.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Conversation with Prof. Margo Seltzer</title>
    <link href="/2023/10/10/Conversation-with-Prof-Margo-Seltzer/"/>
    <url>/2023/10/10/Conversation-with-Prof-Margo-Seltzer/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia"><a href="#Introduction-to-Prof-Margo-Seltzer-quoted-from-Wikipedia" class="headerlink" title="Introduction to Prof. Margo Seltzer (quoted from Wikipedia)"></a>Introduction to Prof. Margo Seltzer (quoted from Wikipedia)</h1><p>“<strong>Margo Ilene Seltzer</strong> is a professor and researcher in computer systems. She is currently the Canada 150 Research Chair in Computer Systems and the Cheriton Family Chair in Computer Science at the <a href="https://en.wikipedia.org/wiki/University_of_British_Columbia" title="University of British Columbia">University of British Columbia</a>. Previously, Seltzer was the Herchel Smith Professor of Computer Science at Harvard University’s <a href="https://en.wikipedia.org/wiki/John_A._Paulson_School_of_Engineering_and_Applied_Sciences" title="John A. Paulson School of Engineering and Applied Sciences">John A. Paulson School of Engineering and Applied Sciences</a> and director at the <a href="https://en.wikipedia.org/wiki/Center_for_Research_on_Computation_and_Society" title="Center for Research on Computation and Society">Center for Research on Computation and Society</a>.”</p><h1 id="Question-How-did-you-conduct-research-across-a-variety-of-domains-from-operating-systems-to-machine-learning-systems"><a href="#Question-How-did-you-conduct-research-across-a-variety-of-domains-from-operating-systems-to-machine-learning-systems" class="headerlink" title="Question: How did you conduct research across a variety of domains, from operating systems to machine learning systems?"></a>Question: How did you conduct research across a variety of domains, from operating systems to machine learning systems?</h1><p>Prof. Seltzer: I’ve always been intellectually curious and I find almost all research problems fascinating. Engaging in discussions with diverse people has also fueled my passion. When I was a junior faculty member, I focused on tenure and focused on core systems research, but that was miserable. However, I still explored different areas.</p><p>My deep interest lies in software architecture, even though my Ph.D. was in storage. I was fortunate when another lab decided to support my research. This shift allowed me to progress from storage to core systems.</p><p>I also got interested into data provenance, especially realizing that we could do a lot more at the systems level.</p><p>Transitioning to machine learning was a natural progression, driven mainly by collaborations with graduate students and other partners.</p><h1 id="Question-Why-did-you-pursue-a-Ph-D-in-storage-if-you-were-more-interested-in-core-systems"><a href="#Question-Why-did-you-pursue-a-Ph-D-in-storage-if-you-were-more-interested-in-core-systems" class="headerlink" title="Question: Why did you pursue a Ph.D. in storage if you were more interested in core systems?"></a>Question: Why did you pursue a Ph.D. in storage if you were more interested in core systems?</h1><p>Prof. Seltzer: Before pursuing my Ph.D., I was primarily involved with databases. However, as I delved deeper, my curiosity veered towards system issues.</p><h1 id="Question-How-do-you-manage-evolving-interests-during-a-Ph-D"><a href="#Question-How-do-you-manage-evolving-interests-during-a-Ph-D" class="headerlink" title="Question: How do you manage evolving interests during a Ph.D.?"></a>Question: How do you manage evolving interests during a Ph.D.?</h1><p>Prof. Seltzer: It’s uncommon for Ph.D. students to plot a lifetime research agenda. Instead, it’s about producing one miracle per paper and developing the skills to do research for your whole life. The key is to focus on accomplishing your first piece of independent research during your Ph.D.</p><p>Choosing a supervisor you get along well with is most important. It’s essential to be involved in an interesting area and join a lab that aligns with your interests. However, a perfect match isn’t always necessary. Looking at co-supervised students can give insights into potential co-supervision opportunities.</p><p>As a Ph.D. student, your primary goal should be to define your research problem. Although you shouldn’t jump between entirely different areas, it’s crucial to select a project that genuinely interests you in the first year. Other interests can be pursued as side projects.</p><p>To maintain engagement, pick a broad domain that offers a plethora of projects you find captivating.</p><p>Before starting a Ph.D., actively seek out research papers that intrigue you and identify the labs behind them.</p><h1 id="Question-What’s-your-vision-for-the-future-of-Computer-Systems"><a href="#Question-What’s-your-vision-for-the-future-of-Computer-Systems" class="headerlink" title="Question: What’s your vision for the future of Computer Systems?"></a>Question: What’s your vision for the future of Computer Systems?</h1><p>Prof. Seltzer: A pressing concern is that people are not very good at writing software that works. We need to develop strategies to create software with minimal bugs from the ground up. Embracing modularity can be a solution, and the solution is about software architecture.</p><p>Researchers focus on verifying existing software products because the publication cycle is way too short. Moreover, we lack good metrics for evaluating software architecture, and there is no equivalent of a debugger for software architecture. Software architecture, in its current state, remains an art more than a well-defined discipline. Often, professionals in the field rely heavily on mentors, and they don’t see the growth of a new generation of software architects.</p><h1 id="Personal-Comments-and-Recommendations"><a href="#Personal-Comments-and-Recommendations" class="headerlink" title="Personal Comments and Recommendations:"></a>Personal Comments and Recommendations:</h1><p>I’m pleased to note your inspiration derived from challenges in the ‘Type Inference for Python’ project, including the importance of formalizations and specifications both for the design goal and for implementation, the tedious and fault-prone task of setting up an evaluation pipeline, etc.</p><p>Deep learning thrives in domains with a clear ground truth. In other scenarios, basic probabilistic methods might offer better results.</p><p>Your task of combining AST traversal with introspection of live objects reminds me of the work I did in “StarFlow: A Script-Centric Data Analysis Environment” and Arpan Gujarati’s tracing infrastructure efforts in Python.</p><p>Should you wish to delve deeper into software architecture for data science and machine learning, I recommend focusing on constructing intricate software like operating systems instead of shorter data wrangling scripts. Or you can explore the challenges in experimental frameworks. For insights on this, consider discussing with Joe Wonsil. Additionally, Philip Guo at UCSD has an intriguing Ph.D. thesis about tools for research programmers that might be of interest to you.</p>]]></content>
    
    
    <categories>
      
      <category>Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pre-MICCAI Workshop@UBC Observations and Gained Insights</title>
    <link href="/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/"/>
    <url>/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<p>From the <a href="https://sites.google.com/view/pre-miccai-ubc/home">Pre-MICCAI Workshop@UBC</a> website:</p><blockquote><p>The Pre-MICCAI Workshop is a dynamic and innovative platform that unites machine learning and medical computer vision. As a prelude to the prestigious MICCAI (Medical Image Computing and Computer-Assisted Intervention) conference, this workshop serves as a vital nexus where experts, researchers, and enthusiasts converge to explore cutting-edge advancements, exchange knowledge, and foster collaborative partnerships in the field of medical image analysis.</p></blockquote><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Pre-MICCAI-Workshop-UBC-Selfie.jpg" alt="Selfie"></p><h1 id="Shaoting-Zhang-Shanghai-AI-Lab-Keynote-Talk-2-Foundation-Models-in-Medicine-Generalist-vs-Specialist"><a href="#Shaoting-Zhang-Shanghai-AI-Lab-Keynote-Talk-2-Foundation-Models-in-Medicine-Generalist-vs-Specialist" class="headerlink" title="Shaoting Zhang (Shanghai AI Lab) - Keynote Talk 2 - Foundation Models in Medicine: Generalist vs Specialist"></a>Shaoting Zhang (Shanghai AI Lab) - Keynote Talk 2 - Foundation Models in Medicine: Generalist vs Specialist</h1><ul><li>Advantages of Large Models:<ul><li>Emergent abilities.</li><li>Long-tail problems (only a small amount of fine-tuning is required for downstream tasks and does not require a tremendous amount of data collection and labeling).</li><li>Model sharing strengthens data security.</li></ul></li><li>Shanghai AI Lab presents <a href="https://github.com/openmedlab">OpenMEDLab (open-source medical image and language foundation models)</a>.</li><li>Utilizing a single model with varied prompts for diverse tasks.</li><li>Large language model training encompasses:<ul><li>Self-supervised pre-training.</li><li>Instruction tuning.</li><li>RLHF.</li><li>Plugins for accessing updated information without retraining.</li></ul></li><li>Computer vision researchers lean towards generalist models due to the technical challenges.</li><li>Clinicians prefer specialist models to solve day-to-day work.</li></ul><p>Question: Will medical foundation models support more modalities in the future besides vision and language?</p><p>Answer:</p><ul><li>People will still focus on one modality for one model with high accuracy to address practical business demands.</li><li>Multiple models can be used on demand to handle multimodal data.</li></ul><h1 id="Briefings"><a href="#Briefings" class="headerlink" title="Briefings"></a>Briefings</h1><h2 id="Sana-Ayromlou-Continual-Class-Specific-Impression-for-Data-free-Class-Incremental-Learning"><a href="#Sana-Ayromlou-Continual-Class-Specific-Impression-for-Data-free-Class-Incremental-Learning" class="headerlink" title="Sana Ayromlou - Continual Class-Specific Impression for Data-free Class Incremental Learning"></a>Sana Ayromlou - Continual Class-Specific Impression for Data-free Class Incremental Learning</h2><ul><li>Focuses on training models over newly introduced classes, termed <a href="https://en.wikipedia.org/wiki/Incremental_learning">incremental learning</a>.</li><li>Challenges include the loss of old data, resulting in catastrophic forgetting.</li><li>Proposed Solution: Generate synthetic medical data from prior classes using <a href="https://arxiv.org/abs/2201.10787">model inversion</a> (extracting training data from the model) and employing <a href="https://arxiv.org/abs/2102.09517">cosine-normalized cross-entropy loss</a>.</li></ul><h2 id="Hooman-Vaseli-ProtoASNet"><a href="#Hooman-Vaseli-ProtoASNet" class="headerlink" title="Hooman Vaseli - ProtoASNet"></a>Hooman Vaseli - ProtoASNet</h2><ul><li>Emphasizes the importance of interpretability in AI solutions, especially in healthcare.</li><li>Core Technology: <a href="https://proceedings.neurips.cc/paper_files/paper/2017/hash/cb8da6767461f2812ae4290eac7cbc42-Abstract.html">Prototypical neural networks</a>, which “learn a metric space in which classification can be performed by computing distances to prototype representations of each class.”</li></ul><h1 id="Ruogu-Fang-University-of-Florida-Keynote-Talk-4-A-Tale-of-Two-Frontiers-When-Brain-Meets-AI"><a href="#Ruogu-Fang-University-of-Florida-Keynote-Talk-4-A-Tale-of-Two-Frontiers-When-Brain-Meets-AI" class="headerlink" title="Ruogu Fang (University of Florida) - Keynote Talk 4 - A Tale of Two Frontiers: When Brain Meets AI"></a>Ruogu Fang (University of Florida) - Keynote Talk 4 - A Tale of Two Frontiers: When Brain Meets AI</h1><p>Research Vision:</p><ul><li>Integrate domain knowledge over mere data-driven approaches.</li><li>Harness neuroscience principles for next-gen AI designs.</li><li>Leverage AI in testing neural science hypotheses and promoting brain health.</li></ul><p><a href="https://www.sciencedirect.com/science/article/pii/S1361841518307734">Deep Evolutionary Networks with Expedited Genetic Algorithms for Medical Image Denoising</a></p><ul><li>Auto feature extraction and hyperparameter search are major pain points in deep learning research (compared with traditional machine learning research) faced by deep learning researchers.</li><li>Fine gene transfer learning to optimize on a larger dataset - c.f. <a href="https://www.investopedia.com/financial-edge/0412/the-best-portfolio-balance.aspx">portfolio balance</a> in finance</li><li>Question: Is it possible to combine the genetic algorithm that maintains a gene pool of neural networks with ensemble learning?<ul><li>Answer: Different objective.</li></ul></li></ul><p><a href="https://www.biorxiv.org/content/10.1101/2023.04.16.537079v2.abstract">Emergence of Emotion Selectivity in A Deep Neural Network Trained to Recognize Visual Objects</a></p><ul><li>Simple, interpretable neural network architecture based on biology.</li><li>Representation similarity between the DNN model and brain amygdala.</li><li>$1M NSF funding.</li></ul><p><a href="https://www.nature.com/articles/s41598-020-80312-2">Modular machine learning for Alzheimer’s disease classification from retinal vasculature</a></p><ul><li>Retina data is easy to collect.</li><li>A lot of information (gender, body mass index) can be seen from the retina.</li><li>The results are interpretable.</li></ul><h1 id="Herve-Lombaert-ETS-Montreal-Keynote-Talk-3-Geometric-Deep-Learning-Examples-on-Brain-Surfaces"><a href="#Herve-Lombaert-ETS-Montreal-Keynote-Talk-3-Geometric-Deep-Learning-Examples-on-Brain-Surfaces" class="headerlink" title="Hervé Lombaert (ETS Montreal) - Keynote Talk 3 - Geometric Deep Learning - Examples on Brain Surfaces"></a>Hervé Lombaert (ETS Montreal) - Keynote Talk 3 - Geometric Deep Learning - Examples on Brain Surfaces</h1><p>Research directions:</p><ul><li>Geometry and Machine Learning.</li><li>Correspondences and variability existent in the brain.</li></ul><p>Motivation:</p><ul><li>Traditional algorithms frequently rely on an image grid (pixels). However, in neuroimaging, data is often on 3D surfaces. Two neighboring points may be neighbors but may lie very far away on such a surface.</li><li>How to learn on such surfaces? How do we transfer convolution and pooling on images to such surfaces?</li></ul><p>Solution:</p><ul><li>Represent surfaces as graphs.</li><li>Project problem into spectral space (<a href="https://en.wikipedia.org/wiki/Spectral_shape_analysis">spectral shape analysis</a>).<ul><li>An object’s vibration pattern is governed by shape - spectral space captures a unique intrinsic shape signature.</li><li>Extract spectral signature via spectral decomposition and exploit to find correspondences.</li><li>Enables transforming convolutions on surfaces to convolutions on spectral embeddings, enabling classical architectures on brain surfaces.</li></ul></li></ul><p>Ongoing work:</p><ul><li><a href="https://en.wikipedia.org/wiki/Active_learning_(machine_learning)">Active learning</a> to reduce annotation effort - focus on sample-level uncertainty and find the most uncertain images.<ul><li>Goals: Informative and diverse samples.</li><li>Works:<ul><li><a href="https://link.springer.com/chapter/10.1007/978-3-031-17027-0_5">TAAL: Test-time augmentation for active learning in medical image segmentation</a></li><li><a href="https://arxiv.org/abs/2301.07670">Active learning for medical image segmentation with stochastic batches</a></li></ul></li></ul></li></ul><h1 id="Ali-Bashashati-x2F-Ruogu-Fang-x2F-Shaoting-Zhang-x2F-Herve-Lombaer-x2F-Jun-Ma-Panel-Discussion"><a href="#Ali-Bashashati-x2F-Ruogu-Fang-x2F-Shaoting-Zhang-x2F-Herve-Lombaer-x2F-Jun-Ma-Panel-Discussion" class="headerlink" title="Ali Bashashati&#x2F;Ruogu Fang&#x2F;Shaoting Zhang&#x2F;Hervé Lombaer&#x2F;Jun Ma - Panel Discussion"></a>Ali Bashashati&#x2F;Ruogu Fang&#x2F;Shaoting Zhang&#x2F;Hervé Lombaer&#x2F;Jun Ma - Panel Discussion</h1><h2 id="The-influence-of-Large-Language-Models-is-growing-significantly-What-changes-do-you-think-LLMs-will-bring-about-in-medical-imaging-from-both-positive-and-negative-sides"><a href="#The-influence-of-Large-Language-Models-is-growing-significantly-What-changes-do-you-think-LLMs-will-bring-about-in-medical-imaging-from-both-positive-and-negative-sides" class="headerlink" title="The influence of Large Language Models is growing significantly. What changes do you think LLMs will bring about in medical imaging (from both positive and negative sides)?"></a>The influence of Large Language Models is growing significantly. What changes do you think LLMs will bring about in medical imaging (from both positive and negative sides)?</h2><ul><li>Language contributes to improved performance.</li><li>Still need a diversity of models to investigate different modalities and tasks.</li><li>Large language models help in day-to-day routine tasks. They are a copilot which facilitates the processing of huge amounts of information in pathology and brain research.</li><li>Reduces cost and boosts accessibility for patients.</li><li>Multimodal data integration.</li><li>LLMs face data privacy and trustworthiness.</li><li>When to use LLMs and when to use human abilities requires careful thinking.</li></ul><h2 id="What-other-recent-medical-image-analysis-advancements-excite-you-the-most"><a href="#What-other-recent-medical-image-analysis-advancements-excite-you-the-most" class="headerlink" title="What other recent medical image analysis advancements excite you the most?"></a>What other recent medical image analysis advancements excite you the most?</h2><ul><li>Classic problems like segmentations and how to capture geometry remain unsolved.</li><li>More comprehensive and dynamic brain-inspired, biologically-inspired AI.</li><li>Understanding the biology behind the data will help you design more applicable models. Those models can better make a difference</li><li>Prior knowledge is important in addition to big data. Foundational models will explore all non-synthetic data in the next few years; no new data will exist.</li><li>Montreal is a major hub for neuroscience and AI.</li></ul><h2 id="For-the-many-students-here-what-technical-skills-and-knowledge-should-the-next-generation-of-medical-image-analysis-researchers-prepare-for"><a href="#For-the-many-students-here-what-technical-skills-and-knowledge-should-the-next-generation-of-medical-image-analysis-researchers-prepare-for" class="headerlink" title="For the many students here, what technical skills and knowledge should the next generation of medical image analysis researchers prepare for?"></a>For the many students here, what technical skills and knowledge should the next generation of medical image analysis researchers prepare for?</h2><ul><li>Know the neglected basics, e.g., solid mathematical background and proficiency in programming</li><li>Understand the data</li><li>Ability to explain the results and ask the question of why and how</li><li>Visualization is very important for both exploratory data analysis and publishing</li><li>Learning from mistakes - find out why a model doesn’t work instead of throwing in different models</li><li>Ask yourself: Who will care about an increase in accuracy? Is it significant? Will it have tradeoffs in robustness, explainability, etc.?</li><li>Quickly take up new skills (mathematics, programming, etc.)</li><li>Research paradigms have changed in the foundation model era - how to leverage foundation models for your field to stand on the shoulders of giants?</li><li>Low-level implementation details such as preprocessing, multiprocessing in coding for large-scale data, model development, multi-node distributed training, efficient fine-tuning, and model deployment on constrained environments are also critical skills.</li><li>Work and have fun at the same time.</li><li>Perseverance in the face of failure is one of the most essential qualities for Ph.D. students.</li></ul><h2 id="Question-The-future-of-models-for-specific-tasks-e-g-segmentation-vs-end-to-end-models"><a href="#Question-The-future-of-models-for-specific-tasks-e-g-segmentation-vs-end-to-end-models" class="headerlink" title="Question: The future of models for specific tasks (e.g., segmentation) vs end-to-end models."></a>Question: The future of models for specific tasks (e.g., segmentation) vs end-to-end models.</h2><ul><li>New models for specific tasks make lovely reads.</li><li>Methodology will change, but specific tasks will stay there. However, improving specific tasks will gradually shift towards industry. Universities will focus on publishing the first paper in a domain, while industry will focus on publishing the last paper in a domain.</li><li>In the end, we care about helping patients.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Conferences</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Understanding the Name, Structure, and Loss Function of the Variational Autoencoder</title>
    <link href="/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/"/>
    <url>/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/</url>
    
    <content type="html"><![CDATA[<p>Despite the intuitive appeal of <a href="https://en.wikipedia.org/wiki/Variational_autoencoder">variational autoencoders (VAEs)</a>, their underlying principles can be elusive. After extensive research across papers and online resources, I will summarize the core insights behind the VAE’s name, structure, and loss function and try to explain <strong>how the mathematical formulas used to describe the VAE came into being from first principles</strong>, as opposed to simply providing interpretations for them.</p><h2 id="Basics-of-VAEs"><a href="#Basics-of-VAEs" class="headerlink" title="Basics of VAEs"></a>Basics of VAEs</h2><p>VAEs are probabilistic generative models, when trained on a dataset $X$, allow us to sample from a latent variable $Z$ and generate output resembling samples in $X$ through a trained neural network $f: Z \rightarrow X$.</p><p>This can be formulated as making the probability of generating $X &#x3D; x$ as close as possible to the actual $P(X &#x3D; x)$ (known quality) under the entire generative process.</p><h2 id="Ideal-Training-Goal"><a href="#Ideal-Training-Goal" class="headerlink" title="Ideal Training Goal"></a>Ideal Training Goal</h2><p>In the <strong>ideal situation</strong>, based on the <a href="https://en.wikipedia.org/wiki/Marginal_distribution">marginal distribution formula</a> we have $P(X &#x3D; x) &#x3D; \int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$. Thus, the training goal of variational autoencoders is to <strong>make the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as close to $P(X &#x3D; x)$ as possible</strong>.</p><h2 id="Latent-Variable-Distribution"><a href="#Latent-Variable-Distribution" class="headerlink" title="Latent Variable Distribution"></a>Latent Variable Distribution</h2><p>VAEs select a <strong>multivariate normal distribution</strong> for the latent variable $Z$ based on the principle that <a href="https://doi.org/10.1145/318242.318443">any distribution in $d$ dimensions can be generated by mapping normally distributed variables through a sufficiently complicated function</a>, which could be approximated using the neural network $f: Z \rightarrow X$ we train.</p><h2 id="Approximation-Challenge"><a href="#Approximation-Challenge" class="headerlink" title="Approximation Challenge"></a>Approximation Challenge</h2><p>Having reasonably decided $Z \sim N(0, I)$, we may calculate the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$. This is straightforward to approximate: we can randomly sample a large number of $Z$ values ${z_1, \dots, z_n}$, and approximate $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as $\sum_{j}^{n}{P(X &#x3D; x | Z &#x3D; z_j)}$.</p><p>However, for most $Z$ values, $P(X &#x3D; x | Z)$ will be nearly zero, contributing almost nothing to our calculation. This is especially the case in high dimensional spaces, for which an extremely large number of samples of $Z$ may be required.</p><p>To address the problem, we can attempt to <strong>sample values of $Z$ that are likely to have produced $X &#x3D; x$ and compute $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ just from those</strong>.</p><h2 id="The-“Variational”-Aspect"><a href="#The-“Variational”-Aspect" class="headerlink" title="The “Variational” Aspect:"></a>The “Variational” Aspect:</h2><p>To do so, we can <strong>fit another parametrized function</strong> $Q(Z | X &#x3D; x)$, which can give us a distribution over $Z$ values that are likely to produce $X &#x3D; x$ through $f: Z \rightarrow X$ given $X &#x3D; x$. This is an example of a <a href="https://en.wikipedia.org/wiki/Variational_Bayesian_methods">variational Bayesian method</a>, which involves finding an “optimal” function (a task known as <a href="https://en.wikipedia.org/wiki/Calculus_of_variations">variational calculus</a>) and is the source of the word “variational” in variational autoencoders.</p><h2 id="Minimizing-Divergence"><a href="#Minimizing-Divergence" class="headerlink" title="Minimizing Divergence"></a>Minimizing Divergence</h2><p>Theoretically, the values of $Z$ that are likely to have produced $X &#x3D; x$ follow the conditional distribution $P(Z | X &#x3D; x)$. <strong>Thus, our original goal of making the actual $\int{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z) dz}$ as close to $P(X &#x3D; x)$ as possible can be transformed to minimizing the Kullback-Leibler divergence between $P(Z | X &#x3D; x)$ and<br>$Q(Z | X &#x3D; x)$</strong>:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x)) &#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z | X &#x3D; x)}} dz}$$</p><p>According to Bayes’ Law,</p><p>$$P(Z &#x3D; z | X &#x3D; x) &#x3D; \frac{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z)}{P(X &#x3D; x)}$$</p><p>Thus, we have:</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x) P(X &#x3D; x)}{P(X &#x3D; x | Z &#x3D; z) P(Z &#x3D; z)}} dz}$$</p><p>$$&#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) (\log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} + \log{P(X &#x3D; x)} - \log{P(X &#x3D; x | Z &#x3D; z)}) dz}$$</p><p>$$&#x3D; \int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} dz} + \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x)} dz} - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$</p><p>Note that:</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{\frac{Q(Z &#x3D; z | X &#x3D; x)}{P(Z &#x3D; z)}} dz} &#x3D; KL(Q(Z | X &#x3D; x) || P(Z))$$</p><p>$$\int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x)} dz} &#x3D; \log{P(X &#x3D; x)} \int{Q(Z &#x3D; z | X &#x3D; x)} dz &#x3D; \log{P(X &#x3D; x)}$$</p><p>Thus, we have:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x)) &#x3D; KL(Q(Z | X &#x3D; x) || P(Z)) + \log{P(X &#x3D; x)} - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$</p><p>As $\log{P(X &#x3D; x)}$ is constant, if we were to minimize $KL(Q(Z | X &#x3D; x) || P(Z | X &#x3D; x))$, we should minimize:</p><p>$$KL(Q(Z | X &#x3D; x) || P(Z)) - \int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$$ </p><p>To further transfer that into a calculatable function, we need to be more specific about the form that $Q(Z | X)$ will take. The usual choice is to say that $Q(Z | X &#x3D; x) &#x3D; N(Z | \mu(X &#x3D; x), \Sigma(X &#x3D; x))$, i.e., $Q(Z | X &#x3D; x)$ follows a Gaussian distribution where the mean and covariance matrix are calculated by <strong>parameterized functions (trained neural networks)</strong> given $X &#x3D; x$. In this case, <strong>fitting $Q(Z | X &#x3D; x)$ involves training these neural networks</strong>.</p><p>The advantages of this choice are computational, as $KL(Q(Z | X &#x3D; x) || P(Z)) + \log{P(X &#x3D; x)}$ is now <strong>a KL-divergence between two multivariate Gaussian distributions</strong>, which can be computed in <strong>closed form</strong>.</p><p>As for $\int{Q(Z &#x3D; z | X &#x3D; x) \log{P(X &#x3D; x | Z &#x3D; z)} dz}$, it depicts the expected log-likelihood of generating $X &#x3D; x$ as the VAE’s output through $f(Z)$ when sampling from $Q(Z &#x3D; z | X &#x3D; x)$ given $X &#x3D; x$. Thus, it can be treated as the “reconstruction loss” of the VAE, and different closed-form indices, such as mean square error, may be used as proxies of it depending on the project domain.</p><h2 id="Why-“Autoencoders”"><a href="#Why-“Autoencoders”" class="headerlink" title="Why “Autoencoders”?"></a>Why “Autoencoders”?</h2><p>Despite the mathematical basis of VAEs being quite different from classical autoencoders, they are named “autoencoders” due to their final training objective involving an encoder (the neural networks $\mu$ and $\Sigma$ determining mean and covariance) and a decoder (the neural network $f$), which resembles a traditional autoencoder in structure.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://arxiv.org/abs/1606.05908">https://arxiv.org/abs/1606.05908</a></li><li><a href="https://agustinus.kristia.de/techblog/2016/12/10/variational-autoencoder/">https://agustinus.kristia.de/techblog/2016/12/10/variational-autoencoder/</a></li><li><a href="https://arxiv.org/abs/1312.6114">https://arxiv.org/abs/1312.6114</a></li><li><a href="https://arxiv.org/abs/1907.08956">https://arxiv.org/abs/1907.08956</a></li><li></li><li><a href="https://stats.stackexchange.com/questions/485488/should-reconstruction-loss-be-computed-as-sum-or-average-over-input-for-variatio">https://stats.stackexchange.com/questions/485488/should-reconstruction-loss-be-computed-as-sum-or-average-over-input-for-variatio</a></li><li><a href="https://stats.stackexchange.com/questions/540092/how-do-we-get-to-the-mse-in-the-loss-function-for-a-variational-autoencoder">https://stats.stackexchange.com/questions/540092/how-do-we-get-to-the-mse-in-the-loss-function-for-a-variational-autoencoder</a></li><li><a href="https://stats.stackexchange.com/questions/464875/mean-square-error-as-reconstruction-loss-in-vae">https://stats.stackexchange.com/questions/464875/mean-square-error-as-reconstruction-loss-in-vae</a></li><li><a href="https://stats.stackexchange.com/questions/323568/help-understanding-reconstruction-loss-in-variational-autoencoder">https://stats.stackexchange.com/questions/323568/help-understanding-reconstruction-loss-in-variational-autoencoder</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My Software Engineering Philosophy</title>
    <link href="/2023/09/24/My-Software-Engineering-Philosophy/"/>
    <url>/2023/09/24/My-Software-Engineering-Philosophy/</url>
    
    <content type="html"><![CDATA[<blockquote><p>If you deprive yourself of outsourcing and your competitors do not, you’re putting yourself out of business.<br>Lee Kuan Yew</p></blockquote><ul><li>Do the high-level, high-value <a href="https://en.wikipedia.org/wiki/Requirements_engineering"><strong>requirements</strong></a>, <a href="https://en.wikipedia.org/wiki/Requirements_analysis"><strong>analysis</strong></a>, and <a href="https://en.wikipedia.org/wiki/Software_design"><strong>design</strong></a> work in an <em>incremental</em> fashion while not sacrificing <em>rigor</em>.</li><li>Maximize the utilization of <em>tools</em> that make coding, testing, and operations as <em>cheap, trivial, straightforward, and error-free</em> as possible, minimizing <em>technical debt</em>, including:<ul><li>Generative AI tools like ChatGPT.</li><li>Functional Programming.</li></ul></li><li>A critique on both <a href="https://en.wikipedia.org/wiki/Waterfall_model">the waterfall model</a> and <a href="https://en.wikipedia.org/wiki/Agile_software_development">the agile model</a>.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The Cornell, Maryland, Max Planck Pre-doctoral Research School 2023 Observations and Gained Insights</title>
    <link href="/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023.jpeg" alt="Group Photo"></p><h2 id="Panel-Session-2-“Research-in-industry-vs-academia”"><a href="#Panel-Session-2-“Research-in-industry-vs-academia”" class="headerlink" title="Panel Session 2: “Research in industry vs. academia”"></a>Panel Session 2: “Research in industry vs. academia”</h2><h3 id="Problem-Focus-amp-Recognition"><a href="#Problem-Focus-amp-Recognition" class="headerlink" title="Problem Focus &amp; Recognition"></a>Problem Focus &amp; Recognition</h3><ul><li>Industry tends to focus on concrete problems.</li><li>In academia, broader issues are often addressed.</li><li>Authorship and credit in academia is complex. It’s not a zero-sum game. It’s not just about who is first or second author; giving credit to students doesn’t mean professors won’t get any.</li></ul><h3 id="Publication-amp-Quality"><a href="#Publication-amp-Quality" class="headerlink" title="Publication &amp; Quality"></a>Publication &amp; Quality</h3><ul><li>The emphasis is on publishing fewer papers but ensuring they are of high quality. It’s not about the quantity but the impact and quality of the papers.</li><li>The first, last, or best paper on a topic are the most influential.</li></ul><h3 id="Career-Path"><a href="#Career-Path" class="headerlink" title="Career Path"></a>Career Path</h3><ul><li>Before securing a tenure professor position, many go through multiple postdocs and even stints as industrial research scientists.</li><li>Only about 10-20% of PhDs eventually become faculty.</li><li>Some research scientists find academic-like environments within the right industry groups.</li></ul><h3 id="Factors-Differentiating-Academia-and-Industry"><a href="#Factors-Differentiating-Academia-and-Industry" class="headerlink" title="Factors Differentiating Academia and Industry:"></a>Factors Differentiating Academia and Industry:</h3><ul><li>Industrial research must eventually have some commercial value.</li><li>In academia, there are constraints like obtaining funding, student recruitment, and equipment acquisition.</li><li>Academics have better job security and can rebound from mistakes.</li><li>Industry doesn’t need to chase grants or funding in the same way academia does.</li></ul><h3 id="Skills-amp-Transitions"><a href="#Skills-amp-Transitions" class="headerlink" title="Skills &amp; Transitions"></a>Skills &amp; Transitions</h3><ul><li>Transferring skills between departments or companies is straightforward.</li><li>Transitioning between academia and industry is often a one-way street. It’s challenging to return to academia from industry unless one maintains a consistent publishing record and works on research-valued projects.</li></ul><h3 id="Geographical-and-Topic-Mobility"><a href="#Geographical-and-Topic-Mobility" class="headerlink" title="Geographical and Topic Mobility"></a>Geographical and Topic Mobility</h3><p>Researchers are encouraged to be flexible, moving across countries and topics.  </p><h3 id="Work-Life-Balance"><a href="#Work-Life-Balance" class="headerlink" title="Work-Life Balance"></a>Work-Life Balance</h3><ul><li>Systems vary across locations.</li><li>Enforce personal boundaries and learn to say no.</li><li>A balance doesn’t mean absence of stress. In the industry, even if the work-life balance is okay, stress may arise from working on undesired projects or facing peer pressure.</li><li>Find people who become friends with you.</li></ul><h3 id="Two-Body-Problem"><a href="#Two-Body-Problem" class="headerlink" title="Two-Body Problem"></a>Two-Body Problem</h3><p>It’s more of an issue in academia than in industry since it’s easier to change companies than academic institutions.</p><h3 id="Personality-and-Approach"><a href="#Personality-and-Approach" class="headerlink" title="Personality and Approach"></a>Personality and Approach</h3><ul><li>Industry caters to hackers and those interested in tooling.</li><li>Academics focus on research and higher purposes and see coding as a tool. Effective communication, including selling your idea in proposals and talks, is vital.</li></ul><h3 id="Startups-vs-PhD-Journey"><a href="#Startups-vs-PhD-Journey" class="headerlink" title="Startups vs. PhD Journey"></a>Startups vs. PhD Journey</h3><ul><li>Both require a significant commitment, typically around 6-8 years to IPO.</li><li>Startups demand full devotion, often with little to no work-life balance.</li></ul><h3 id="Funding-amp-Tenure"><a href="#Funding-amp-Tenure" class="headerlink" title="Funding &amp; Tenure"></a>Funding &amp; Tenure</h3><ul><li>If a grant from a company fails, there will be no direct legal consequences, but the likelihood of getting another might be reduced.</li><li>Tenure provides a basic salary and job security, but researchers still need to raise funds for their research.</li><li>Doing a job aligned research can be beneficial for dissertation and future career opportunities.</li></ul><h2 id="Laxman-Dhulipala-2nd-Lecture"><a href="#Laxman-Dhulipala-2nd-Lecture" class="headerlink" title="Laxman Dhulipala (2nd Lecture)"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Laxman Dhulipala (2nd Lecture)</a></h2><ul><li>Graphs are ubiquitous structures. Implementing high-performance graph algorithms speeds up scientific discovery.</li><li>I don’t work on dense graphs. Real-world graphs are sparse, and I haven’t seen a dense graph in practice in 10 years.</li><li>I focus on shared-memory algorithms and don’t recommend programming supercomputers until you have to.</li><li>Recommended reading: <a href="https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-mcsherry.pdf"><strong>Scalability! But at what COST?</strong></a></li><li>Should batch updates to dynamic graphs<ul><li>More parallelism</li><li>Reduces the cost of each update</li></ul></li><li>Representing adjacency information using purely functional trees are safe for concurrency.</li></ul><h2 id="Guest-Lecture-Yiting-Xia"><a href="#Guest-Lecture-Yiting-Xia" class="headerlink" title="Guest Lecture: Yiting Xia"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Guest Lecture: Yiting Xia</a></h2><ul><li>There are different available connections at different time slices.</li><li>Precomputing routes and handling link failure is still work in progress.</li></ul><h2 id="Group-Mentoring-Session"><a href="#Group-Mentoring-Session" class="headerlink" title="Group-Mentoring Session"></a>Group-Mentoring Session</h2><h3 id="Peter-Druschel-and-Bobby-Bhattacharjee"><a href="#Peter-Druschel-and-Bobby-Bhattacharjee" class="headerlink" title="Peter Druschel and Bobby Bhattacharjee"></a><a href="https://people.mpi-sws.org/~druschel/">Peter Druschel</a> and <a href="https://www.cs.umd.edu/people/bobby">Bobby Bhattacharjee</a></h3><h4 id="Key-Skills-and-Knowledge"><a href="#Key-Skills-and-Knowledge" class="headerlink" title="Key Skills and Knowledge"></a>Key Skills and Knowledge</h4><ul><li>Emphasized the importance of academic aptitude and the ability to work in unstructured environments.</li></ul><h4 id="Problem-solving-Approach"><a href="#Problem-solving-Approach" class="headerlink" title="Problem-solving Approach"></a>Problem-solving Approach</h4><ul><li>Seek problems that are significant, solvable, and align with your skill set.</li><li>Recognize that one may not always approach the right problem from the best angle.</li><li>Handling setbacks is crucial. Time spent on tackling a problem is never lost.</li><li>Resilience, dedication, and discipline are essential traits for success.</li><li>Read many things that are loosely related to solve a problem, as they might offer insights.</li></ul><h4 id="Application-Strategy"><a href="#Application-Strategy" class="headerlink" title="Application Strategy"></a>Application Strategy</h4><ul><li>Apply to a minimum of 5-10 institutions.</li><li>Do the homework for providing a strong application, especially given low acceptance rates, like 10%.</li></ul><h4 id="Interests-and-Graduate-Programs"><a href="#Interests-and-Graduate-Programs" class="headerlink" title="Interests and Graduate Programs"></a>Interests and Graduate Programs</h4><ul><li>Have a broad range of interests when considering a graduate program.</li><li>Opt for programs that offer a wide variety of choices.</li><li>Expressing diverse interests in applications can improve acceptance chances.</li><li>It’s advisable not to close one’s doors apriori.</li></ul><h4 id="Monitoring-Progress-in-Grad-Programs"><a href="#Monitoring-Progress-in-Grad-Programs" class="headerlink" title="Monitoring Progress in Grad Programs"></a>Monitoring Progress in Grad Programs</h4><ul><li>A competent group advisor is crucial, as they will guide and look out for students challenges like selecting an excessively challenging problem, lacking motivation, or poor time management.</li><li>Set achievable milestones that lead to publications, helping to build a solid publication record.</li></ul><h3 id="Mariya-Toneva"><a href="#Mariya-Toneva" class="headerlink" title="Mariya Toneva"></a><a href="https://mtoneva.com/">Mariya Toneva</a></h3><h4 id="Changing-Discipline-during-Ph-D"><a href="#Changing-Discipline-during-Ph-D" class="headerlink" title="Changing Discipline during Ph.D."></a>Changing Discipline during Ph.D.</h4><ul><li>Evaluate if the institution has the necessary resources to support this transition.</li></ul><h4 id="Traits-of-an-Ideal-Ph-D-Student"><a href="#Traits-of-an-Ideal-Ph-D-Student" class="headerlink" title="Traits of an Ideal Ph.D. Student"></a>Traits of an Ideal Ph.D. Student</h4><ul><li>Effective communication skills.</li><li>Strong critical thinking abilities.</li><li>A robust computational background.</li><li>Prior research experience.</li></ul><h4 id="Linguistics"><a href="#Linguistics" class="headerlink" title="Linguistics"></a>Linguistics</h4><ul><li>Noted a resurgence in the domain of linguistics as opposed to pure data-driven techniques.</li></ul><h4 id="MPI-SWS"><a href="#MPI-SWS" class="headerlink" title="MPI-SWS"></a>MPI-SWS</h4><ul><li>MPI-SWS is highly recommended for programming languages, especially when collaborating with diverse groups of people.</li></ul><h4 id="Diving-into-NLP-Natural-Language-Processing-Hop-On-Now"><a href="#Diving-into-NLP-Natural-Language-Processing-Hop-On-Now" class="headerlink" title="Diving into NLP (Natural Language Processing) - Hop On Now?"></a>Diving into NLP (Natural Language Processing) - Hop On Now?</h4><ul><li>When considering venturing into NLP, focus on:<ul><li>Experts who have a distinct vision in a less-saturated niche.</li><li>Those with substantial experience in related fields, such as the intersection of NLP and robotics.</li></ul></li></ul><h4 id="Distinguishing-Yourself-in-Applications"><a href="#Distinguishing-Yourself-in-Applications" class="headerlink" title="Distinguishing Yourself in Applications"></a>Distinguishing Yourself in Applications</h4><ul><li>To stand out:<ul><li>Foster qualities like initiative, drive, and ambition.</li><li>Accumulate experiences that align with and support your academic and research interests.</li><li>Obtain references that can vouch for your character and work ethic.</li></ul></li><li>It’s also essential to explore and consider multiple options or paths.</li></ul><h3 id="Lorenzo-Alvisi"><a href="#Lorenzo-Alvisi" class="headerlink" title="Lorenzo Alvisi"></a><a href="https://www.engineering.cornell.edu/faculty-directory/lorenzo-alvisi">Lorenzo Alvisi</a></h3><h4 id="Cultivating-an-Academic-Sense"><a href="#Cultivating-an-Academic-Sense" class="headerlink" title="Cultivating an Academic Sense"></a>Cultivating an Academic Sense</h4><ul><li>To nurture an academic mindset, one should assess how an individual performs when faced with a problem.</li><li>He mentioned the “Dijkstra club” at UT Austin as an example.</li><li>Emphasized the significance of “beautiful work” and that it’s crucial for individuals to produce work of beauty and quality.</li><li>Observing and learning from the endeavors of others is beneficial.</li></ul><h4 id="Life’s-Blueprint"><a href="#Life’s-Blueprint" class="headerlink" title="Life’s Blueprint"></a>Life’s Blueprint</h4><ul><li>Life does not come with a set map but rather a compass for direction.</li><li>Professor Alvisi never limited his imagination about his capabilities.</li><li>Guiding principles in life:<ul><li>Seeking personal happiness.</li><li>Maintaining healthy relationships.</li><li>Pursuing a fulfilling job that combines happiness with challenges.</li></ul></li><li>Acceptance of uncertain outcomes: One might not always know if they will succeed or fail.</li><li>The importance of personal growth: Find joy in self-improvement.</li><li>Shared personal experience of pursuing two Ph.D. degrees, the first of which was at an institution he didn’t particularly favor. Highlighted that struggles are often hidden from view.</li></ul><h4 id="Career-Perspectives"><a href="#Career-Perspectives" class="headerlink" title="Career Perspectives"></a>Career Perspectives</h4><ul><li>One’s career doesn’t necessarily peak at a fixed point; there’s always potential for growth, including entering academia.</li><li>Career choices are not always black and white; it depends on personal preferences and aspirations, such as seeking excellent opportunities close to home.</li><li>Consider the duration of your investments in particular career choices. Not every commitment needs to be long-term.</li></ul><h4 id="Balancing-Hobbies-and-Work"><a href="#Balancing-Hobbies-and-Work" class="headerlink" title="Balancing Hobbies and Work"></a>Balancing Hobbies and Work</h4><ul><li>Prof. Alvisi shared advice from his mentor’s mentor about integrating hobbies into professional life.</li><li>While he had diverse interests, he made sacrifices to focus on computer science due to his intellectual capacities. Some hobbies were too time-consuming.</li><li>Emphasized the importance of hobbies as they provide a necessary balance and maintain mental well-being.</li></ul><h4 id="Addressing-the-Two-Body-Problem"><a href="#Addressing-the-Two-Body-Problem" class="headerlink" title="Addressing the Two-Body Problem"></a>Addressing the Two-Body Problem</h4><ul><li>Universities recognize the challenge when both partners in a relationship are professionals.</li><li>If partners excel in different domains, there’s potential for both to be hired with attractive incentives.</li><li>Solutions include proactive planning, alternating priorities between partners over the years, and considering remote work opportunities.</li></ul><h4 id="Other-Insights"><a href="#Other-Insights" class="headerlink" title="Other Insights"></a>Other Insights</h4><ul><li>Mentioned the Sloan Fellowship as a notable achievement before tenure.</li><li>Advised young professionals to delay specialization as long as possible. Explore various options.</li><li>Encouraged students to seek advice from multiple professors to gain a diverse range of opinions and insights.</li></ul><h2 id="Tapomayukh-Bhattacharjee-2nd-Lecture"><a href="#Tapomayukh-Bhattacharjee-2nd-Lecture" class="headerlink" title="Tapomayukh Bhattacharjee (2nd Lecture)"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Tapomayukh Bhattacharjee (2nd Lecture)</a></h2><ul><li>There are six activities of daily living (ADLs) defined in literature: personal hygiene or grooming, dressing, toileting, transferring or ambulating, and eating</li><li>Anomaly detection is used in processing sensor data.</li><li>A* is widely used in motion planning due to its efficiency and optimality (it never overestimates the cost).</li><li>Motion planning time &#x3D; search time + collision checking time (~90%). Therefore, the author proposed lazy A* (which finds an optimal path in an unconstrained situation, goes over collision checking while on the path, and re-searches a path if a collision is encountered).</li><li>Collect a dataset before embarking on research.</li><li>To understand how to manipulate different kinds of foods, the author created a <em>food manipulation taxonomy</em>.</li><li>Choose hardware components for real-world deployability.</li><li>Use deformation of points on a gel coupled with computer vision algorithms to measure shear force</li><li>Add <em>structure</em> to machine learning algorithms to overcome a lack of data.</li><li>If integrating multimodal data sources, think of <em>where</em> to integrate as the size or magnitude of different data may be inconsistent.</li><li>A “bandit” algorithm is an RL algorithm where we utilize <em>partial feedback</em> of <em>one step</em> in the decision-making process, unlike conventional RL algorithms with “episodes” spanning multiple steps.</li></ul><h3 id="Audience-question-How-to-stay-up-to-date-with-the-state-of-the-art-especially-in-the-fast-changing-landscape-of-machine-learning"><a href="#Audience-question-How-to-stay-up-to-date-with-the-state-of-the-art-especially-in-the-fast-changing-landscape-of-machine-learning" class="headerlink" title="Audience question: How to stay up-to-date with the state-of-the-art (especially in the fast-changing landscape of machine learning)?"></a>Audience question: How to stay up-to-date with the state-of-the-art (especially in the fast-changing landscape of machine learning)?</h3><ul><li>One of the main tasks of faculty life</li><li>Look at titles and abstracts of publications in all well-known conferences.</li><li>Organize reading groups and reading sessions.</li><li>Interact with known other research groups.</li></ul><h2 id="Derek-Dreyer-How-to-write-papers-and-give-talks-that-people-can-follow"><a href="#Derek-Dreyer-How-to-write-papers-and-give-talks-that-people-can-follow" class="headerlink" title="Derek Dreyer: How to write papers and give talks that people can follow"></a><a href="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&openfile=84146671">Derek Dreyer: How to write papers and give talks that people can follow</a></h2><ul><li><p>Many papers suffer from the TMI (too much information) problem.</p></li><li><p>Aim at giving <em>constructive principles</em> that are easy to check and fix.</p></li><li><p>A paper is different from a textbook - people <em>aren’t as committed to reading a paper as they are to reading a textbook</em>.</p></li><li><p>A <em>good but not interesting</em> paper tends to get a “B” or a “weak accept.”</p></li><li><p>Putting the Related Work section at the front (as opposed to in the back before the Conclusion) may hinder unfamiliar authors from understanding your work.</p></li><li><p>Most people <em>don’t listen to talks to determine whether they should read a paper</em>. Instead, they listen to talks to discuss with others. The main goal of a talk is to <em>give people positive feelings about your work</em>.</p></li><li><p>A talk should only cover the <em>intro</em> and <em>key ideas</em> sections of the corresponding paper.</p></li><li><p>The <em>key ideas</em> should be the high point in your talk before presenting the takeaway messages.</p></li><li><p>Add visual elements to emphasize <em>one point</em> per slide.</p></li><li><p>Use smooth animations to help the listener follow.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Conferences</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>From the Fourier Series to the Fourier Transform to the Discrete-time Fourier Transform: Demystifying the Formulas</title>
    <link href="/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/"/>
    <url>/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/</url>
    
    <content type="html"><![CDATA[<p>In realms as broad as electrical engineering, acoustics, optics, signal processing, quantum mechanics, and econometrics, the Fourier Series, Fourier Transform, and Discrete-time Fourier Transform play a pivotal role in analyzing signals by allowing us to decompose them into simpler components. Many articles present their formulas or dive into their intuition and applications. However, what seems to be missing is a blog post that explains the derivation of their formulas in a way that is both clear and accessible, requiring no more than a rudimentary understanding of calculus.</p><h1 id="Fourier-Series"><a href="#Fourier-Series" class="headerlink" title="Fourier Series"></a>Fourier Series</h1><h2 id="Standard-Form-of-the-Fourier-Series"><a href="#Standard-Form-of-the-Fourier-Series" class="headerlink" title="Standard Form of the Fourier Series"></a>Standard Form of the Fourier Series</h2><p>Our journey begins with the <a href="https://en.wikipedia.org/wiki/Fourier_series">Fourier Series</a> - a method to represent periodic functions as a sum of sine and cosine waves.</p><p>Let $x(t)$ be a periodic function with period $T$. The <em>standard form of the Fourier series</em> for $x(t)$ is given by:</p><p>$$x(t) &#x3D; \frac{a_0}{2} + a_1 \cos{\frac{2\pi}{T} t} + b_1 \sin{\frac{2\pi}{T} t} + a_2 \cos{\frac{4\pi}{T} t} + b_2 \sin{\frac{4\pi}{T} t} + \dots $$</p><p>To solve for $a_0, a_1, b_1, \dots$, we first observe the .</p><p>Thus, we can multiply both sides of the equation by $cos{\frac{2k\pi}{T} t}$ or $\sin{\frac{2k\pi}{T} t}$ $(k \in {0, 1, 2, \dots, n})$, and then integrate over one period $[-\frac{T}{2}, \frac{T}{2})$ to obtain:</p><p>$$a_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \cos{\frac{2k\pi}{T} t} dt}$$</p><p>$$b_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \sin{\frac{2k\pi}{T} t} dt}$$</p><h2 id="Exponential-Form-of-the-Fourier-Series"><a href="#Exponential-Form-of-the-Fourier-Series" class="headerlink" title="Exponential Form of the Fourier Series"></a>Exponential Form of the Fourier Series</h2><p>Using Euler’s formula $e^{ix} &#x3D; \cos{x} + i \sin{x}$, we can derive:</p><p>$$\cos{x} &#x3D; \frac{e^{ix} + e^{-ix}}{2}$$</p><p>$$\sin{x} &#x3D; -i \frac{e^{ix} - e^{-ix}}{2}$$</p><p>Substituting these representations of $\cos{x}$ and $\sin{x}$ into $a_k$ and $b_k$, we get:</p><p>$$a_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \frac{e^{i \frac{2k\pi}{T} t} + e^{-i \frac{2k\pi}{T} t}}{2} dt}$$</p><p>$$b_k &#x3D; \frac{2}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{-i x(t) \frac{e^{i \frac{2k\pi}{T} t} - e^{-i \frac{2k\pi}{T} t}}{2} dt}$$</p><p>And:</p><p>$$a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t} &#x3D; a_k \frac{e^{i \frac{2k\pi}{T} t} + e^{-i \frac{2k\pi}{T} t}}{2} - i b_k \frac{e^{i \frac{2k\pi}{T} t} - e^{-i \frac{2k\pi}{T} t}}{2} &#x3D; \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t} + \frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}$$</p><p>And:</p><p>$$\frac{a_k - i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>$$\frac{a_k + i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t} dt}$$</p><p>Furthermore, if we let:</p><p>$$c_k &#x3D; \frac{a_k - i b_k}{2} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>Substituting $k \leftarrow -k$ into the expression for $c_k$, we will obtain:</p><p>$$c_{-k} &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t} dt} &#x3D; \frac{a_k + i b_k}{2}$$</p><p>Thus:</p><p>$$a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t}  &#x3D; \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t} + \frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}<br>&#x3D; c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i \frac{2k\pi}{T} t}$$</p><p>And by substituting $k \leftarrow 0$ into the expression for $c_k$, we get:</p><p>$$c_0 &#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) dt} &#x3D; \frac{a_0}{2}$$</p><p>Therefore:</p><p>$$x(t) &#x3D; \frac{a_0}{2} + \sum_{k&#x3D;1}^{n}{(a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T} t})}  &#x3D; c_0 + \sum_{k&#x3D;1}^{n}{(c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i \frac{2k\pi}{T} t})} &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i \frac{2k\pi}{T} t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>This is the <em>exponential form of the Fourier series</em>. It is more concise than the standard form of the Fourier series and is used more often in practice.</p><h1 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h1><p>The Fourier transform is a generalization of the Fourier series, which can analyze the effect of a frequency in <em>any function</em> (which may not necessarily be a periodic function). In this section, we will present how it can be derived from the exponential form of the Fourier series.</p><p>Given a periodic function $x(t)$ with period $T$, the exponential form of the Fourier series of $x(t)$ is as follows:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i \frac{2k\pi}{T} t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t} dt}$$</p><p>Let’s say that the period $T$ is associated with a frequency known as the <a href="https://en.wikipedia.org/wiki/Fundamental_frequency"><em>fundamental frequency</em></a> $f_0 &#x3D; \frac{1}{T}$. Given $f_0$, we can rewrite the previous Fourier series as:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-n}^{n}{c_k e^{i 2\pi k f_0 t}}$$</p><p>Where:</p><p>$$c_k&#x3D; \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i 2\pi k f_0 t} dt}$$</p><p>For a non-periodic function, we can consider it as a periodic function with $T \rightarrow +\infty$. In this case, the fundamental frequency $f_0$ is an infinitesimal quantity; therefore, <em>we can consider that any frequency $f$ can be expressed as an integer multiple of the fundamental frequency, and the difference between two neighboring frequencies is the fundamental frequency $f_0$</em>. In this case, the fundamental frequency $f_0$ can be expressed as a differential of the frequency $f$, i.e., $df$.</p><p>In this case, for a possibly non-periodic function $x(t)$:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-\infty}^{\infty}{c_k e^{i 2\pi k (df)t}}$$</p><p>$$c_k&#x3D; (df) \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi k (df) t} dt}$$</p><p>Thus, $x(t)$ can be represented as:</p><p>$$x(t) &#x3D; \sum_{k&#x3D;-\infty}^{\infty}{[(df) \cdot \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi k (df) t} dt} \cdot e^{i 2\pi k (df) t}]}$$</p><p>By considering $f \leftarrow k (df)$, <a href="https://maninbocss.medium.com/summation-and-the-definite-integral-235663ef5ec3">we can transform the summation into a definite integral</a>:</p><p>$$x(t)&#x3D; \int_{-\infty}^{\infty}{ [(\int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}) e^{i 2\pi f t}] df}$$</p><p>Let:</p><p>$$X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}$$</p><p>Then $x(t)$ can be represented as:</p><p>$$x(t) &#x3D; \int_{-\infty}^{\infty}{ X(f) e^{i 2\pi f t} df}$$</p><p>These two equations are very important.</p><ul><li>If we know $x(t)$ (i.e., the value of $x(t)$ at any time $t$), through $X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}$, we can compute <em>the relative magnitude of any frequency $f$ over the whole time period</em>.</li><li>At the same time, if we know $X(f)$ (i.e., the relative magnitude of any frequency $f$ over the whole time period), by means of $x(t) &#x3D; \int_{-\infty}^{\infty}{ X(f) e^{i 2\pi f t} df}$, we can calculate <em>the value of $x(t)$ at any time $t$</em>.</li></ul><p>We refer to $X(f)$ as the <em>Fourier transform</em> of $x(t)$, also known as the <em>spectrum</em> of $x(t)$, and to $x(t)$ as the <em>inverse Fourier transform</em> of $X(f)$.</p><h1 id="Discrete-time-Fourier-Transform"><a href="#Discrete-time-Fourier-Transform" class="headerlink" title="Discrete-time Fourier Transform"></a>Discrete-time Fourier Transform</h1><p>When we process signals with computers, as computers cannot store a continuous infinite function, we usually take $N$ samples of the original signal $x(t)$ at a certain time interval $\Delta t$, obtaining an array $x[0:N-1]$.</p><p>Using $x[0:N-1]$ to estimate the Fourier transform $X(f)$ of the sampled function $x(t)$, we get:</p><p>$$X(f) &#x3D; \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt} \approx \int_{0}^{N \Delta t}{x(t) e^{-i 2\pi f t} dt} \approx \sum_{m&#x3D;0}^{N - 1}{x(m \Delta t) e^{-i 2\pi f m \Delta t}}$$</p><p>If we <em>assume these samples have spanned a period of the original signal, e.g. $T &#x3D; N \Delta t$, and that we only consider frequencies satisfying $f &#x3D; k \frac{1}{N \Delta t} (k \in {0, 1, \dots, N - 1})$</em>, we get:</p><p>$$X(k \frac{1}{N \Delta t}) \approx \sum_{n&#x3D;0}^{N - 1}{x(n \Delta t) e^{-i 2\pi k \frac{1}{N \Delta t} n \Delta t}} &#x3D; \sum_{n&#x3D;0}^{N - 1}{x(n \Delta t) e^{-i 2\pi \frac{k}{N} n}} &#x3D; \sum_{n&#x3D;0}^{N - 1}{x[n] e^{-i 2\pi \frac{k}{N} n}}$$</p><p>Let:</p><p>$$X[k] &#x3D; \sum_{n&#x3D;0}^{N - 1}{x[n] e^{-i 2\pi \frac{k}{N} n}} (k \in {0, 1, \dots, N - 1})$$</p><p>We call such an array of $N$ discrete numbers $X[0:N-1]$ the <em>discrete-time Fourier transform</em> of $x[0:N-1]$, which is a <em>discrete</em> frequency domain representation of $x[0:N-1]$.</p><p>Using $X[0:N-1]$, we can restore $x[0:N-1]$:</p><p>$$x[n] &#x3D; \frac{1}{N} \sum_{k&#x3D;0}^{N - 1}{X[k] e^{i 2\pi \frac{k}{N} n}} (n \in {0, 1, \dots, N - 1})$$</p><p>We call $x[0:N-1]$ the <em>inverse discrete-time Fourier transform</em> of $X[0:N-1]$. This is analogous to $X(f)$ being the Fourier transform of $x(t)$ and $x(t)$ being the inverse Fourier transform of $X(f)$ in the continuous case.</p>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>On Convolutional Neural Networks and Photographic Lenses</title>
    <link href="/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/"/>
    <url>/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/</url>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutional neural networks</a> are <a href="https://en.wikipedia.org/wiki/Camera_lens">camera lenses</a> to a computer.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Typical_cnn.png" alt="A convolutional neural network"></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/Tessar.png" alt="A camera lens"></p><p>The analogy does not stop at the point that both compress visual information:</p><ul><li>The <a href="https://www.jeremyjordan.me/convnet-architectures/">evolution of convolutional neural network architectures</a> resembles the <a href="https://en.wikipedia.org/wiki/History_of_photographic_lens_design">evolution of camera lenses</a>.</li><li>The <a href="https://analyticsindiamag.com/complete-guide-to-understanding-precision-and-recall-curves/">P-R curve</a> showing the performance of a convolutional neural network is strikingly similar to the <a href="https://www.dearsusan.net/how-to-read-mtf-curves-like-an-artist/">MTF curve</a> evaluating lens performance.</li></ul><p><img src="https://machinelearningmastery.com/wp-content/uploads/2020/01/Precision-Recall-Curve-of-a-Logistic-Regression-Model-and-a-No-Skill-Classifier2.png" alt="A P-R curve"></p><p><img src="https://photographylife.com/wp-content/uploads/2013/01/How-to-Read-MTF-Charts.png" alt="An MTF curve"></p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Timetable of Well-known Conferences in Different Subdomains of Computer Science</title>
    <link href="/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/"/>
    <url>/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/</url>
    
    <content type="html"><![CDATA[<p>We have compiled a timetable of well-known conferences in different subdomains of computer science based on the <em>Class A</em> and <em>Class B</em> conferences in <a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/">“Directory of International Academic Conferences and Journals Recommended by the Chinese Computer Society”</a>. Although the precise start dates of each conference vary year by year, the provided start dates provide a general guideline on the <em>relative order</em> of the conferences throughout each year.</p><table><thead><tr><th>Name</th><th>Start Date</th><th>Subdomain</th></tr></thead><tbody><tr><td>CIDR</td><td>01&#x2F;08&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>GROUP</td><td>01&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>POPL</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VMCAI</td><td>01&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>HiPEAC</td><td>01&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SODA</td><td>01&#x2F;22&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>PPoPP</td><td>02&#x2F;05&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>AAAI</td><td>02&#x2F;07&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>FPGA</td><td>02&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>FAST</td><td>02&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPCA</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CGO</td><td>02&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NDSS</td><td>02&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>WSDM</td><td>02&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FM</td><td>03&#x2F;07&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>PERCOM</td><td>03&#x2F;13&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>FSE</td><td>03&#x2F;20&#x2F;23</td><td>Security</td></tr><tr><td>SANER</td><td>03&#x2F;21&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>DCC</td><td>03&#x2F;21&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ASPLOS</td><td>03&#x2F;25&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>VR</td><td>03&#x2F;25&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>IUI</td><td>03&#x2F;27&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICDT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>EDBT</td><td>03&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICDE</td><td>04&#x2F;03&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>RECOMB</td><td>04&#x2F;16&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>DATE</td><td>04&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>NSDI</td><td>04&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>DASFAA</td><td>04&#x2F;17&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ETAPS</td><td>04&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>EUROCRYPT</td><td>04&#x2F;23&#x2F;23</td><td>Security</td></tr><tr><td>CHI</td><td>04&#x2F;23&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SDM</td><td>04&#x2F;27&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>WWW</td><td>04&#x2F;30&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>I3D</td><td>05&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PKC</td><td>05&#x2F;07&#x2F;23</td><td>Security</td></tr><tr><td>EG</td><td>05&#x2F;08&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>RTAS</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IPSN</td><td>05&#x2F;09&#x2F;23</td><td>Computer Networks</td></tr><tr><td>HSCC</td><td>05&#x2F;09&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>EuroSys</td><td>05&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICSE</td><td>05&#x2F;14&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IPDPS</td><td>05&#x2F;15&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICPC</td><td>05&#x2F;15&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>INFOCOM</td><td>05&#x2F;17&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MSST</td><td>05&#x2F;22&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>S&amp;P</td><td>05&#x2F;22&#x2F;23</td><td>Security</td></tr><tr><td>ICRA</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>AAMAS</td><td>05&#x2F;29&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICASSP</td><td>06&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ECSCW</td><td>06&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>NOSSDAV</td><td>06&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CAiSE</td><td>06&#x2F;12&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SoCG</td><td>06&#x2F;12&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICMR</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>EuroVis</td><td>06&#x2F;12&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SPAA</td><td>06&#x2F;16&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISCA</td><td>06&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>PLDI</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LCTES</td><td>06&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiSys</td><td>06&#x2F;18&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SIGMOD</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>PODS</td><td>06&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CVPR</td><td>06&#x2F;18&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SIGMETRICS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>IWQoS</td><td>06&#x2F;19&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PODC</td><td>06&#x2F;19&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HPDC</td><td>06&#x2F;20&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>STOC</td><td>06&#x2F;20&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICS</td><td>06&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>HotOS</td><td>06&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>LICS</td><td>06&#x2F;26&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>DSN</td><td>06&#x2F;27&#x2F;23</td><td>Security</td></tr><tr><td>EGSR</td><td>06&#x2F;28&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CADE&#x2F;IJCAR</td><td>07&#x2F;01&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICWS</td><td>07&#x2F;02&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SGP</td><td>07&#x2F;03&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SAT</td><td>07&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SPM</td><td>07&#x2F;05&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICAPS</td><td>07&#x2F;08&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>DAC</td><td>07&#x2F;09&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CSFW</td><td>07&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>ACL</td><td>07&#x2F;09&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>USENIX ATC</td><td>07&#x2F;10&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>OSDI</td><td>07&#x2F;10&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICALP</td><td>07&#x2F;10&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICME</td><td>07&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>COLT</td><td>07&#x2F;12&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISSTA</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ECOOP</td><td>07&#x2F;17&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CAV</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>CCC</td><td>07&#x2F;17&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ICCBR</td><td>07&#x2F;17&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ICDCS</td><td>07&#x2F;18&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SIGIR</td><td>07&#x2F;23&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>ICML</td><td>07&#x2F;23&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ISMB</td><td>07&#x2F;23&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>CogSci</td><td>07&#x2F;26&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>UAI</td><td>07&#x2F;31&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>SCA</td><td>08&#x2F;04&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>SIGKDD</td><td>08&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>SIGGRAPH</td><td>08&#x2F;06&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>ICPP</td><td>08&#x2F;07&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>USENIX Security</td><td>08&#x2F;09&#x2F;23</td><td>Security</td></tr><tr><td>CRYPTO</td><td>08&#x2F;19&#x2F;23</td><td>Security</td></tr><tr><td>IJCAI</td><td>08&#x2F;19&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>HOT CHIPS</td><td>08&#x2F;27&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CP</td><td>08&#x2F;27&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>VLDB</td><td>08&#x2F;28&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>KR</td><td>09&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>RE</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICFP</td><td>09&#x2F;04&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ESA</td><td>09&#x2F;04&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SIGCOMM</td><td>09&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>CHES</td><td>09&#x2F;10&#x2F;23</td><td>Security</td></tr><tr><td>SECON</td><td>09&#x2F;11&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ASE</td><td>09&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>CODES+ISSS</td><td>09&#x2F;17&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>EMSOFT</td><td>09&#x2F;17&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>ECML-PKDD</td><td>09&#x2F;18&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>CONCUR</td><td>09&#x2F;19&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>ESORICS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>SRDS</td><td>09&#x2F;25&#x2F;23</td><td>Security</td></tr><tr><td>MobileHCI</td><td>09&#x2F;26&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ECAI</td><td>09&#x2F;30&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>MoDELS</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICSME</td><td>10&#x2F;01&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>MobiCom</td><td>10&#x2F;02&#x2F;23</td><td>Computer Networks</td></tr><tr><td>ICCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ECCV</td><td>10&#x2F;02&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>ITC</td><td>10&#x2F;08&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>UbiComp</td><td>10&#x2F;08&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ESEM</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ISSRE</td><td>10&#x2F;09&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ICNP</td><td>10&#x2F;10&#x2F;23</td><td>Computer Networks</td></tr><tr><td>PG</td><td>10&#x2F;10&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>CSCW</td><td>10&#x2F;14&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>RAID</td><td>10&#x2F;16&#x2F;23</td><td>Security</td></tr><tr><td>ISMAR</td><td>10&#x2F;16&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>PACT</td><td>10&#x2F;21&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CIKM</td><td>10&#x2F;21&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>OOPSLA</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>SAS</td><td>10&#x2F;22&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IEEE VIS</td><td>10&#x2F;22&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>MobiHoc</td><td>10&#x2F;23&#x2F;23</td><td>Computer Networks</td></tr><tr><td>SOSP</td><td>10&#x2F;23&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>IMC</td><td>10&#x2F;24&#x2F;23</td><td>Computer Networks</td></tr><tr><td>MICRO</td><td>10&#x2F;28&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ICCAD</td><td>10&#x2F;29&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ACM MM</td><td>10&#x2F;29&#x2F;23</td><td>Computer Graphics&#x2F;Multimedia</td></tr><tr><td>UIST</td><td>10&#x2F;29&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>SoCC</td><td>10&#x2F;30&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CLUSTER</td><td>10&#x2F;31&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISS</td><td>11&#x2F;05&#x2F;23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr><td>ICCD</td><td>11&#x2F;06&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>ISWC</td><td>11&#x2F;06&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FOCS</td><td>11&#x2F;06&#x2F;23</td><td>Theoretical Computer Science</td></tr><tr><td>SC</td><td>11&#x2F;12&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>SenSys</td><td>11&#x2F;12&#x2F;23</td><td>Computer Networks</td></tr><tr><td>Performance</td><td>11&#x2F;14&#x2F;23</td><td>Computer Architecture&#x2F;Parallel and Distributed Computing&#x2F;Storage Systems</td></tr><tr><td>CCS</td><td>11&#x2F;26&#x2F;23</td><td>Security</td></tr><tr><td>ICSOC</td><td>11&#x2F;28&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>TCC</td><td>11&#x2F;29&#x2F;23</td><td>Security</td></tr><tr><td>ICDM</td><td>12&#x2F;01&#x2F;23</td><td>Databases&#x2F;Data Mining&#x2F;Information Retrieval</td></tr><tr><td>FSE&#x2F;ESEC</td><td>12&#x2F;03&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr><tr><td>ACSAC</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>ASIACRYPT</td><td>12&#x2F;04&#x2F;23</td><td>Security</td></tr><tr><td>CoNEXT</td><td>12&#x2F;05&#x2F;23</td><td>Computer Networks</td></tr><tr><td>RTSS</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>BIBM</td><td>12&#x2F;05&#x2F;23</td><td>Interdisciplinary&#x2F;Emerging</td></tr><tr><td>EMNLP</td><td>12&#x2F;06&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>NeurIPS</td><td>12&#x2F;10&#x2F;23</td><td>Artificial Intelligence</td></tr><tr><td>Middleware</td><td>12&#x2F;11&#x2F;23</td><td>Software Engineering&#x2F;Systems Software&#x2F;Programming Languages</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Our Motivation for Maintaining Our Blog</title>
    <link href="/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/"/>
    <url>/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/</url>
    
    <content type="html"><![CDATA[<p>今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。</p><p>This blog is a replica of our previous “problem books” used for junior and senior high school. In the past, we would record background knowledge, problem solving ideas, and efficient algorithms. Today, we would note down understandings and insights. These are all the result of the hard work of searching and exploring, and we record them down in order to gradually accumulate our knowledge and understanding. Only the direct purpose has been changed from “preparing for a test” to “doing scientific research”.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ISSTA/ECOOP 2023 Observations and Gained Insights</title>
    <link href="/2023/07/22/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/07/22/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<h1 id="Mon-17-Jul"><a href="#Mon-17-Jul" class="headerlink" title="Mon 17 Jul"></a>Mon 17 Jul</h1><h2 id="Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20"><a href="#Session-1-FUZZING-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Session 1 FUZZING at Amazon Auditorium (Gates G20)"></a>Session 1 FUZZING at Amazon Auditorium (Gates G20)</h2><h3 id="Welcome-and-Introductions"><a href="#Welcome-and-Introductions" class="headerlink" title="Welcome and Introductions"></a>Welcome and Introductions</h3><p>The following reviewing criteria for workshop papers can serve as a guide for us in writing papers:</p><ul><li>Is the problem that is addressed significant for research or practice?</li><li>Are the contributions (technique, hypothesis, or evaluation) over existing work sufficient?</li><li>Is the methodology (experimental setup or protocol) specified to validate the claims or hypotheses reasonable?</li><li>Can an independent research group reproduce the results, given the proposed methodology (experimental setup)</li></ul><p>Establish significance, novelty, and soundness, even if results do not show a large performance gain. Inspect unexpected results, such as why results are negative.</p><h3 id="Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar"><a href="#Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges-Cristian-Cadar" class="headerlink" title="Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/fuzzing-2023/9/Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges">Three Colours of Fuzzing: Reflections and Open Challenges - Cristian Cadar</a></h3><p>Why does fuzzing keep finding bugs in production software? LOTS of code is added or modified without being tested. (Covrig: A framework for the analysis of code, test, and coverage evolution in real software)</p><p>Fuzzing is not automated enough. Fuzz targets (test drivers) need to be manually specified. There is much work on improving fuzzing heuristics, but more work is required for test driver generation.</p><p>An ideal test case should benefit quality assurance, debugging aid, and documentation. They should <em>target human users</em>, and be small, fast, readable, and well-documented. However, automatically generated test suites, such as those generated by fuzzers, need to be improved in these aspects. They achieve high code coverage, excel at finding generic&#x2F;crash bugs in general software that <em>may not be very realistic</em> (<a href="https://www.manuelrigger.at/preprints/NoREC.pdf">assertion faults, crashes, undefined behavior</a>) but do not achieve high feature coverage and are poor at detecting logical bugs in software for specific domains.</p><p>On the other hand, such fuzzing makes it appropriate for use cases outside of security and software testing that <em>require a novel search to find diverse failing inputs, corner cases, and loopholes</em>, such as ML models and even investigating legal documents (Rohan).</p><p>Developers tend to be <em>afraid</em> of using fuzzers as they don’t understand them or think of them as security tools, in contrast to a standard testing tool. Allowing fuzzing to operate at a higher declarative level and combining fuzzing with domain-specific specification languages would be beneficial.</p><p>Sound fuzzer evaluation is challenging.</p><ul><li>Well-designed experiment methodology.</li><li>Huge variance due to randomness, demanding substantial computation resources (e.g., repeat 20x, 24 hours, X fuzzers, Y programs)</li></ul><h1 id="Thu-20-Jul"><a href="#Thu-20-Jul" class="headerlink" title="Thu 20 Jul"></a>Thu 20 Jul</h1><h2 id="Keynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynotes at Amazon Auditorium (Gates G20)"></a>Keynotes at Amazon Auditorium (Gates G20)</h2><p>Paper Readinging Statistics</p><ul><li>44&#x2F;97 papers accepted</li><li>Round 1: 40 submitted, 17 accepted, 9 rejected, 14 resubmit</li><li>Round 2: 57 submitted (11 resubmissions), 27 accepted, 18 rejected, 12 resubmit</li></ul><h3 id="Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou"><a href="#Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities-Sophia-Drossopoulou" class="headerlink" title="Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/7/Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities">Dahl-Nygaard Senior Prize: Safe Journeys into the Unknown - Object Capabilities - Sophia Drossopoulou</a></h3><ul><li>Think of an exciting question, such as various language features, and look into it as a research question (<a href="https://link.springer.com/chapter/10.1007/3-540-45332-6_3">An Abstract Model of Java Dynamic Linking and Loading</a>, <a href="https://spiral.imperial.ac.uk/bitstream/10044/1/705/1/A%20flexible%20model%20for%20dynamic.pdf">A Flexible Model for Dynamic Linking in Java and C#</a>).</li><li>The key for program verification is to <em>develop formal models for a (subset) of a language</em>, make it small and simple, and gradually expand (<a href="https://spiral.imperial.ac.uk/handle/10044/1/95175">Java is type safe – probably</a>).</li><li>Actively start collaborations (<a href="https://dl.acm.org/doi/10.1145/582419.582447">Ownership, encapsulation and the disjointness of type and effect</a>).</li></ul><h2 id="ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10"><a href="#ISSTA-10-Test-OptimizationsISSTA-Technical-Papers-at-Smith-Classroom-Gates-G10" class="headerlink" title="ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)"></a>ISSTA 10: Test OptimizationsISSTA Technical Papers at Smith Classroom (Gates G10)</h2><h3 id="June-A-Type-Testability-Transformation-for-Improved-ATG-Performance"><a href="#June-A-Type-Testability-Transformation-for-Improved-ATG-Performance" class="headerlink" title="June: A Type Testability Transformation for Improved ATG Performance"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/15/June-A-Type-Testability-Transformation-for-Improved-ATG-Performance">June: A Type Testability Transformation for Improved ATG Performance</a></h3><p>Automatically generating unit tests is a powerful approach to exercising complex software. However, existing methods frequently fail to deliver appropriate input values, like strings, capable of <em>bypassing domain-specific sanity checks</em>. For instance, Randoop commonly uses “hi!” as a value. (<a href="https://ieeexplore.ieee.org/abstract/document/8115617">Saying ‘Hi!’ is not enough: Mining inputs for effective test generation</a>)</p><h3 id="Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests"><a href="#Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests" class="headerlink" title="Pattern-Based Peephole Optimizations with Java JIT Tests"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/112/Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests">Pattern-Based Peephole Optimizations with Java JIT Tests</a></h3><p>To demonstrate the advantage of JOG over hand-written peephole optimizations in terms of <em>ease of writing</em>, existing hand-written peephole optimizations are compared, and <em>number of characters and number of lines</em> are used as metrics.</p><h3 id="GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper"><a href="#GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper" class="headerlink" title="GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)"></a><a href="https://2023.issta.org/details/issta-2023-technical-papers/54/GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper-">GPUHarbor: Testing GPU Memory Consistency at Large (Experience Paper)</a></h3><p>The tool has been implemented as <a href="https://tinyurl.com/issta-gpuharbor"><em>a Web app using WebGPU to access the GPU</em></a>, allowing the audience to <em>try it out during the talk</em>.</p><h2 id="Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20"><a href="#Keynote-ISSTA’24-Preview-ClosingKeynotes-at-Amazon-Auditorium-Gates-G20" class="headerlink" title="Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)"></a>Keynote - ISSTA’24 Preview - ClosingKeynotes at Amazon Auditorium (Gates G20)</h2><h3 id="Machine-Learning-for-Software-Engineering"><a href="#Machine-Learning-for-Software-Engineering" class="headerlink" title="Machine Learning for Software Engineering"></a><a href="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/1/Machine-Learning-for-Software-Engineering">Machine Learning for Software Engineering</a></h3><p>What underlies the success of machine learning for software engineering?</p><ul><li><a href="https://people.inf.ethz.ch/suz/publications/natural.pdf">The naturalness of code</a>. <code>i++</code> is predictable given <code>for (i = 0; i &lt; 10; </code>, and <code>backward()</code> is predictable given <code>loss.</code></li><li><a href="https://dl.acm.org/doi/10.1145/3338906.3340458">The bimodality of code, or code contains natural language</a>. Q. How do I get a platform-dependent new line character? A. public static String get<em>Platform</em>LineSeparator() { return System.getProperty(“<em>line</em>.separator”); }</li><li><a href="http://janvitek.org/events/NEU/7580/papers/more-papers/oopsla16-dt.pdf">Code has predictable properties</a>. Given <code>... = x.weight * x.height</code>, what is the <code>???</code> in <code>... = y.weight * ???</code>?</li><li>Large amount of data (GitHub repos with code, version history, and commit logs, StackOverflow questions and answers, internal corpora in companies, etc.)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Conferences</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Syncing a Local Directory With a Remote Directory via rsync</title>
    <link href="/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/"/>
    <url>/2023/07/11/Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync/</url>
    
    <content type="html"><![CDATA[<h1 id="Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync"><a href="#Syncing-a-Local-Directory-With-a-Remote-Directory-via-rsync" class="headerlink" title="Syncing a Local Directory With a Remote Directory via rsync"></a>Syncing a Local Directory With a Remote Directory via rsync</h1><p><code>rsync</code> is a powerful utility for efficiently synchronizing directories between a local computer and a remote server. It achieves this synchronization by comparing file modification times and sizes, utilizing delta encoding, and optionally employing data compression to minimize network usage.</p><p>To successfully synchronize directories between two systems using rsync, you need to have rsync installed on both the local and remote machines. Additionally, the remote machine should be accessible from the local machine via SSH, enabling the local machine to invoke the remote machine’s rsync and determine which parts of local files need to be transferred.</p><p>The rsync command-line syntax is similar to that of cp and scp. The following command-line options are commonly used:</p><ul><li><code>-e</code>: Specifies the command to establish an SSH connection before the <code>username@domain</code> section. This option allows you to <em>customize SSH behavior</em>, such as using specific ports or providing a PEM file (e.g., <code>ssh -i SSH-key.pem</code>).</li><li><code>-r</code> (recursive): Used for syncing directories, similar to <code>cp</code> and <code>scp</code>.</li><li><code>-v</code> (verbose): Lists files being transferred during synchronization.</li><li><code>-z</code>: Enables additional data compression for improved network usage.</li></ul><p>When specifying the source directory and the destination directory, <em>keep the following points in mind</em>:</p><ul><li>A local directory can be represented using either a relative or absolute path.</li><li>A remote directory is represented using the <code>username@domain:&lt;absolute path on the remote machine&gt;</code> notation, similar to <code>scp</code>.</li><li>A source directory <em>must</em> end with a trailing slash.</li><li>A destination directory <em>must not</em> end with a trailing slash.</li></ul><p>Here’s an example that illustrates how to sync the local directory <code>TypeWriter_dataset</code> to the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> with additional data compression. This assumes connecting to <code>ubuntu@104.171.203.254</code> via the command <code>ssh -i SSH-key.pem</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>TypeWriter_dataset/ \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>Conversely, to sync the remote directory <code>/home/ubuntu/TypeWriter_dataset</code> to the local directory <code>TypeWriter_dataset</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync \<br>-e <span class="hljs-string">&#x27;ssh -i SSH-key.pem&#x27;</span> \<br>-r -v -z \<br>ubuntu@104.171.203.254:/home/ubuntu/TypeWriter_dataset/ \<br>TypeWriter_dataset<br></code></pre></td></tr></table></figure><p>References:</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories">https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories</a></li><li><a href="https://en.wikipedia.org/wiki/Rsync">https://en.wikipedia.org/wiki/Rsync</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Task Parallelism and Data Parallelism Thread Pools</title>
    <link href="/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/"/>
    <url>/2023/07/11/Task-Parallelism-and-Data-Parallelism-Thread-Pools/</url>
    
    <content type="html"><![CDATA[<h1 id="Task-Parallelism-and-Data-Parallelism-Thread-Pools"><a href="#Task-Parallelism-and-Data-Parallelism-Thread-Pools" class="headerlink" title="Task Parallelism and Data Parallelism Thread Pools"></a>Task Parallelism and Data Parallelism Thread Pools</h1><p>Parallel computing environments often involve distributing code across multiple processors for efficient execution. Two common paradigms of parallelization are task parallelism and data parallelism.</p><p>Task parallelism focuses on distributing encapsulated tasks that can execute the same or different code on the same or different data across different processors. On the other hand, data parallelism involves performing the same operations on different subsets of the same data on multiple processors.</p><p>Both task parallelism and data parallelism can be implemented using thread pools. This article explores simple implementations of thread pools for task parallelism and data parallelism scenarios.</p><h2 id="Task-Parallelism-Thread-Pool"><a href="#Task-Parallelism-Thread-Pool" class="headerlink" title="Task Parallelism Thread Pool"></a>Task Parallelism Thread Pool</h2><p>The following code demonstrates a simple thread pool for task parallelism. It utilizes a task queue to distribute <em>tasks</em>, which are represented as <code>Callable[[], None]</code> objects (callables accepting no parameters and returning None) across multiple threads. Each thread continuously fetches a task from the task queue and executes it. If an exception occurs during task execution, a traceback is printed, and a new task is obtained from the task queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = task_queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            task: <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span> = self.task_queue.get()<br><br>            <span class="hljs-keyword">if</span> task <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                task()<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_task_parallelism_thread_pool</span>(<span class="hljs-params">tasks: Iterable[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]], num_threads: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create task queue.</span><br>    task_queue: Queue[<span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share a task queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = TaskParallelismThreadPoolThread(task_queue)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all tasks.</span><br>    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>        task_queue.put(task)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once all tasks are finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        task_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To use this task parallelism thread pool, provide it with a collection of <em>tasks</em> (represented as <code>Callable[[], None]</code> objects) and the desired number of threads. The tasks will be executed in parallel by the thread pool until all tasks have finished.</p><h2 id="Data-Parallelism-Thread-Pool"><a href="#Data-Parallelism-Thread-Pool" class="headerlink" title="Data Parallelism Thread Pool"></a>Data Parallelism Thread Pool</h2><p>The following code showcases a simple thread pool for data parallelism. It distributes data as <em>argument tuples</em> across multiple threads using an <em>argument tuple queue</em>. Each thread is assigned an <em>operation</em> created using an <em>operation factory</em>. After <em>executing an operation on an argument tuple</em>, the resulting return value is passed to a return value callback.</p><p>As with the task parallelism thread pool, all threads in the thread pool are always busy by getting a new argument tuple whenever its operation finishes execution on a previous argument tuple. Should an exception be raised when executing an operation on an argument tuple, a traceback is printed, and a new argument tuple is taken from the shared argument tuple queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>, Iterable, Generator<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataParallelismThreadPoolThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>], argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>], return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>]</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.operation: <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>] = operation<br>        self.argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = argument_tuple_queue<br>        self.return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = return_value_callback<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            argument_tuple: <span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span> = self.argument_tuple_queue.get()<br><br>            <span class="hljs-keyword">if</span> argument_tuple <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                self.return_value_callback(self.operation(*argument_tuple))<br>            <span class="hljs-keyword">except</span>:<br>                traceback.print_exc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_simple_data_parallelism_thread_pool</span>(<span class="hljs-params"></span><br><span class="hljs-params">    operation_factory: <span class="hljs-type">Callable</span>[[], <span class="hljs-type">Callable</span>[[...], <span class="hljs-type">Any</span>]],</span><br><span class="hljs-params">    argument_tuples: Iterable[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...]],</span><br><span class="hljs-params">    return_value_callback: <span class="hljs-type">Callable</span>[[<span class="hljs-type">Any</span>], <span class="hljs-literal">None</span>] = <span class="hljs-keyword">lambda</span> return_value: <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    num_threads: <span class="hljs-built_in">int</span> = multiprocessing.cpu_count(<span class="hljs-params"></span>)</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># Create argument tuple queue.</span><br>    argument_tuple_queue: Queue[<span class="hljs-built_in">tuple</span>[<span class="hljs-type">Any</span>, ...] | <span class="hljs-literal">None</span>] = Queue()<br><br>    <span class="hljs-comment"># Create all threads which share an argument tuple queue.</span><br>    threads: <span class="hljs-built_in">list</span>[Thread] = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        thread: Thread = DataParallelismThreadPoolThread(operation_factory(), argument_tuple_queue, return_value_callback)<br>        thread.start()<br>        threads.append(thread)<br>    <br>    <span class="hljs-comment"># Enqueue all argument tuples.</span><br>    <span class="hljs-keyword">for</span> argument_tuple <span class="hljs-keyword">in</span> argument_tuples:<br>        argument_tuple_queue.put(argument_tuple)<br>    <br>    <span class="hljs-comment"># Enqueue sentinel values for all threads to stop once execution on all argument tuples have finished.</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_threads):<br>        argument_tuple_queue.put(<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># Wait for all threads to stop.</span><br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>        thread.join()<br></code></pre></td></tr></table></figure><p>To utilize the data parallelism thread pool, provide an <em>operation factory</em>, a collection of argument tuples, and a return value callback. The operation factory, when called, creates operations represented as <code>Callable[[...], Any]</code> objects, accepting arguments from an <em>argument tuple</em> and returning a value. Each thread in the thread pool will execute these operations on the provided argument tuples. Any return values will be passed to the return value callback, which can be customized according to your needs. The data parallelism thread pool will process the argument tuples in parallel until all tuples have been processed. </p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Say that we want to sleep for $0, 1, 2, \dots, N - 1$ seconds before printing the number of seconds slept in parallel, where $N$ is the number of threads in our thread pool.</p><p>We can adopt a task parallelism approach, where we <em>create tasks which encapsulate how long they sleep</em>, and add them to a task parallelism thread pool:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_task</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Callable</span>[[], <span class="hljs-literal">None</span>]:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>        <span class="hljs-keyword">nonlocal</span> sleep_time<br>        time.sleep(sleep_time)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> task<br><br><br>run_simple_task_parallelism_thread_pool(<br>    (create_task(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    N<br>)<br></code></pre></td></tr></table></figure><p>As an alternative, we can also use a data parallelism approach, in which <em>operations</em> accept the number of seconds they sleep from <em>argument tuples</em>, sleep for those time durations, and return those time durations before <em>return value callbacks</em> operate on the return values and print those time durations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><br><br>N = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    time.sleep(sleep_time)<br>    <span class="hljs-keyword">return</span> sleep_time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">operation_factory</span>() -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-built_in">int</span>], <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> operation<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_value_callback</span>(<span class="hljs-params">sleep_time: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Slept for <span class="hljs-subst">&#123;sleep_time&#125;</span>&#x27;</span>)<br><br><br>run_simple_data_parallelism_thread_pool(<br>    operation_factory,<br>    ((i,) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)),<br>    return_value_callback,<br>    N<br>)<br></code></pre></td></tr></table></figure><p>Running both thread pools takes the same time and produces the same output.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.m.wikipedia.org/wiki/Task_parallelism">https://en.m.wikipedia.org/wiki/Task_parallelism</a></li><li><a href="https://en.wikipedia.org/wiki/Data_parallelism">https://en.wikipedia.org/wiki/Data_parallelism</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Batch Killing Processes Looked up Through ps -aux | grep &lt;process_name&gt;</title>
    <link href="/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/"/>
    <url>/2023/06/09/Batch-Killing-Processes-Looked-up-Through-ps-aux-grep-process_name/</url>
    
    <content type="html"><![CDATA[<p>Sometimes we acidentally spawn a series of processes, and we want to kill them. We can look up their pid’s through <code>ps -aux | grep &lt;process_name&gt;</code> (as shown below) and manually run the <code>kill</code> command to kill each process by providing its pid, but <em>how can we automate this tedious task</em>?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.7  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.3  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br>jifengwu   59564  0.0  0.0  19612  2516 pts/2    S+   13:45   0:00 grep --color=auto pipreqs<br></code></pre></td></tr></table></figure><p>First, we can add <code>grep -v grep</code> to the pipe to <em>hide the grep processes from the output</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.6  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.2  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br></code></pre></td></tr></table></figure><p>Then, we can add <code>awk &#39;&#123;print $2&#125;&#39;</code> to the pipe to invoke <code>awk</code> to <em>trim the second space-delimited component</em> (which in this case is the pid). Now we have a list of the pid’s of the processes we want to kill:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>58180<br>58205<br>58224<br>58267<br>58272<br>58282<br>58295<br>58659<br></code></pre></td></tr></table></figure><p>Finally, we can iterate over the pid’s in a for-loop to kill them.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> $(ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>&gt; <span class="hljs-keyword">do</span><br>&gt; <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$pid</span><br>&gt; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>References</p><ul><li><a href="https://www.baeldung.com/linux/grep-exclude-ps-results">https://www.baeldung.com/linux/grep-exclude-ps-results</a></li><li><a href="https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command">https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Unix</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Parsing Command-line Options in Shell Scripts Using `getopts`</title>
    <link href="/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/"/>
    <url>/2023/06/08/Parsing-Command-line-Options-in-Shell-Scripts-Using-getopts/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-getopts"><a href="#What-is-getopts" class="headerlink" title="What is getopts"></a>What is <code>getopts</code></h1><p>getopts is a built-in Unix shell command for parsing command-line options. It is a wrapper around <code>getopt</code>, a POSIX C library function used to parse command-line options of the Unix&#x2F;POSIX style. Specifically:</p><ul><li>Options are <em>single-character alphanumerics</em> preceded by a - (hyphen-minus) character, i.e. <code>-a</code>. <code>-b</code>, <code>-c</code>.</li><li>Options can take an argument or none.</li><li>Multiple options can be chained together, as long as the non-last ones are not argument-taking. If <code>-a</code> and <code>-b</code> take no arguments while <code>-c</code> takes an argument, <code>-abc foo</code> is the same as <code>-a -c -e foo</code>, but <code>-bca</code> is not the same as <code>-b -c a</code> due to the preceding rule.</li><li>When an option takes an argument, this can be in the same token or in the next one. In other words, if <code>-c</code> takes an argument, <code>-cfoo</code> is the same as <code>-c foo</code>.</li></ul><h1 id="optstring‘s"><a href="#optstring‘s" class="headerlink" title="optstring‘s"></a><code>optstring</code>‘s</h1><p>Both getopt and getopts specifies specify options using a <em>optstring</em>. Specifically:</p><ul><li><em>Begin an optstring with <code>:</code>.</em></li><li>To specify an option that <em>does not take an argument</em>, append its name to the optstring.</li><li>To specify an option that <em>takes an argument</em>, append its name <em>and <code>:</code></em> to the optstring.</li></ul><p>For example, the optstring that specifies two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments is <code>:abc:d:</code>.</p><h1 id="Using-getopts-in-a-Shell-Script"><a href="#Using-getopts-in-a-Shell-Script" class="headerlink" title="Using getopts in a Shell Script"></a>Using <code>getopts</code> in a Shell Script</h1><p>In Shell scripts, <code>getopts</code> invoked with an <code>optstring</code> is used with a <code>while</code>-loop to parse command-line options.</p><p>Say that our Shell script <code>test_getopts.sh</code> accepts two options <code>-a</code>, <code>-b</code> that do not take arguments and two options <code>-c</code>, <code>-d</code> that take arguments. Our Shell script can look like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;:abc:d:&#x27;</span> name<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$name</span> <span class="hljs-keyword">in</span><br>        a)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -a&quot;</span><br>            ;;<br>        b)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -b&quot;</span><br>            ;;<br>        c)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -c with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        d)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -d with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        :)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument&quot;</span><br>            ;;<br>        ?)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided an invalid option -<span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>Here, <code>getopts</code> is invoked with the <code>optstring</code> for specifying our options, <code>:abc:d:</code>. In each iteration of the <code>while</code>-loop, the <em>next option</em> is parsed and the Shell variables <code>name</code> and <code>OPTARG</code> are set to different values based on different conditions we may encounter.</p><ul><li>If a <em>valid</em> option is detected and that option <em>does not take an argument</em>, the Shell variable <code>name</code> is set to the name of the option.</li><li>If a <em>valid</em> option is detected and that option <em>takes an argument</em>:<ul><li>If we have provided an argument, the Shell variable <code>name</code> is set to the name of the option, and the Shell variable <code>OPTARG</code> is set to the value of the argument.</li><li>If we <em>haven’t provided an argument</em>, <em>the Shell variable <code>name</code> is set to <code>:</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul></li><li>If an <em>invalid</em> option is detected, <em>the Shell variable <code>name</code> is set to <code>?</code>, and the Shell variable <code>OPTARG</code> is set to the name of the argument</em>.</li></ul><p>We can see <code>getopts</code> at work by providing different command-line options when invoking our Shell script.</p><p>Providing no command-line options:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a -a<br>You provided option -a<br>You provided option -a<br>$ sh test_getopts.sh -aa<br>You provided option -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo<br>You provided option -c with argument foo<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with an argument <code>foo</code> <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo -c bar<br>You provided option -c with argument foo<br>You provided option -c with argument bar<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument without an argument:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c<br>Option -c requires an argument<br></code></pre></td></tr></table></figure><p>Providing an invalid argument <code>-e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -e<br>You provided an invalid option -e<br></code></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/Getopts">https://en.wikipedia.org/wiki/Getopts</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html">https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html</a></li><li><a href="https://en.wikipedia.org/wiki/Getopt">https://en.wikipedia.org/wiki/Getopt</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html">https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Unix</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PNW PLSE Workshop 2023 Observations and Gained Insights</title>
    <link href="/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<h1 id="10-30-Talks"><a href="#10-30-Talks" class="headerlink" title="10:30 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.5ebiaujbjmrk">10:30 - Talks</a></h1><h2 id="Linear-Types-for-Systems-Verification"><a href="#Linear-Types-for-Systems-Verification" class="headerlink" title="Linear Types for Systems Verification"></a><a href="https://drive.google.com/file/d/1Bv4_PnXXZfx6egG4htZNfNYES_gFhfR7/view?usp=share_link">Linear Types for Systems Verification</a></h2><p>It is a good idea to embed verification information in type system of a programming language.</p><h2 id="Verified-Program-Construction"><a href="#Verified-Program-Construction" class="headerlink" title="Verified Program Construction"></a><a href="https://drive.google.com/file/d/14XdepAsHM1ts-tp21UXAqMOEbsB8mkHG/view?usp=share_link">Verified Program Construction</a></h2><ul><li>Program verification is hard per se.<ul><li>Proofs are brittle.</li><li>Existing techniques provide poor support for commonly-used datatypes such as vectors, sets, and maps.</li><li>Partial verification is important due to the complexity of programs.</li></ul></li><li>Program verification for general-purpose programming languages and frameworks for general-purpose programming languages is tedious compared to focusing on a DSL.</li><li>The direction for program verification should be <em>verified program construction</em>.</li><li>Be aware of the pain point you are trying to solve and the day-to-day engineering reality in real-world software development.</li></ul><h1 id="13-00-Keynote-Patrick-Lam"><a href="#13-00-Keynote-Patrick-Lam" class="headerlink" title="13:00 - Keynote: Patrick Lam"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.4alvulgrtjyi">13:00 - Keynote: Patrick Lam</a></h1><h2 id="Hot-Takes-on-Machine-Learning-for-Program-Analysis"><a href="#Hot-Takes-on-Machine-Learning-for-Program-Analysis" class="headerlink" title="Hot Takes on Machine Learning for Program Analysis"></a><a href="https://drive.google.com/file/d/1cfncXsqGw9kFHwi0BBE-VO7JkA1qY8eO/view?usp=share_link">Hot Takes on Machine Learning for Program Analysis</a></h2><ul><li>A crucial step in Machine Learning for Program Analysis is deciding what things could be used as features based on experience.</li><li>Generative AI can replace junior developers doing <em>raw coding</em> instead of <em>contextual work</em>.</li></ul><h1 id="13-30-Lightning-Talks"><a href="#13-30-Lightning-Talks" class="headerlink" title="13:30 - Lightning Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.m58uw7yzsis">13:30 - Lightning Talks</a></h1><h2 id="Lakeroad-Hardware-Compilation-via-Program-Synthesis"><a href="#Lakeroad-Hardware-Compilation-via-Program-Synthesis" class="headerlink" title="Lakeroad: Hardware Compilation via Program Synthesis"></a><a href="https://drive.google.com/file/d/165w2NcaRdSk_gy80TkHSQDb1z3yLnxyZ/view?usp=share_link">Lakeroad: Hardware Compilation via Program Synthesis</a></h2><p>If you don’t use DSLs, FPGAs bring crappy performance running programs in general-purpose programming languages.</p><h2 id="Checked-C"><a href="#Checked-C" class="headerlink" title="Checked C"></a><a href="https://drive.google.com/file/d/1e8T4sz96FRtYDzqdxMM2AFEf7Cfutn7z/view?usp=share_link">Checked C</a></h2><p>Retrofitting verification into non-verified languages is an arduous task.</p><h1 id="15-15-Talks"><a href="#15-15-Talks" class="headerlink" title="15:15 - Talks"></a><a href="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.kl2qgin09esc">15:15 - Talks</a></h1><h2 id="An-Anti-Capitalist-Multicultural-Accessible-Programming-Language"><a href="#An-Anti-Capitalist-Multicultural-Accessible-Programming-Language" class="headerlink" title="An Anti-Capitalist, Multicultural, Accessible Programming Language"></a><a href="https://drive.google.com/file/d/1OD9XlNAPLXTtYFzFY2mpRA-gCoLWFCic/view?usp=share_link">An Anti-Capitalist, Multicultural, Accessible Programming Language</a></h2><p>An event-based language enabling time-traveling to all points in program execution history would greatly benefit debugging.</p>]]></content>
    
    
    <categories>
      
      <category>Conferences</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Sized Types</title>
    <link href="/2023/03/25/Paper-Reading-Sized-Types/"/>
    <url>/2023/03/25/Paper-Reading-Sized-Types/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/237721.240882">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>You can check the presentation that I made for this paper <a href="https://github.com/abbaswu/sized-types-presentation">in this GitHub repository</a>.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Although I liked the idea of Sized Types proposed in the motivation, this paper was difficult for me to grasp, and after spending days reading it, there are still sections which I am confused about. I have summarized my understanding of this paper in the uploaded PDF, and I will discuss my thoughts here.</p><ol><li>I really like the idea of Sized Types that they can be used to prove data computations terminate and codata computations are productive using the same formalization.</li><li>Apparently, the requirement that size indexes in Sized Types be natural number size variables, the special index $\omega$, or linear functions of the size variables facilitates generating constraints in the type checking algorithm that can be solved by a constraint solver (e.g. an SMT solver). Although this may lead to overapproximation in certain scenarions (for example, representing the type of the factorial function), over all, I consider it to be a good balance point between expressiveness and usability.</li><li>3.2 Semantics of Expressions, 3.3 The Universe of Types, 3.4 Continuity and Ordinals, 3.5 Semantics of Types, and 3.7 $\omega$-Types used a lot of concepts before properly introducing them, and I couldn’t understand this part.</li><li>The example presented to demonstrate the type checking algorithm involves generating constraints. However, only the generated constraints are presented, while how the constraints are generated and what each symbol in the constraints stand for with regards to the aforementioned AST nodes is unknown.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Refinement Types</title>
    <link href="/2023/03/19/Paper-Reading-Refinement-Types/"/>
    <url>/2023/03/19/Paper-Reading-Refinement-Types/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://arxiv.org/abs/2010.07763">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This paper presents a clear and organized guide to refinement type systems by condensing the extensive literature on the topic and demonstrating the implementation of a refinement type checker. It first states the motivation for requirement types, a history of requirement types, and refinement logic, which is a logic system used in the proposed refinement type checker. The rest of the paper shows the implementation of a refinement type checker through a series of programming languages, beginning with simply-typed lambda calculus and incrementally adding additional features. This approach is influenced by the nanopass framework, which is used to teach compilation.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Honestly, I have found the section on implementing a refinement type checker through a series of programming languages challenging to understand. Still, I have understood much of the paper before that. Therefore, I will summarize my gained insights and state questions that I have in mind.</p><h2 id="Insights"><a href="#Insights" class="headerlink" title="Insights"></a>Insights</h2><h3 id="Refinement-Types-as-Subtypes"><a href="#Refinement-Types-as-Subtypes" class="headerlink" title="Refinement Types as Subtypes"></a>Refinement Types as Subtypes</h3><p>Type systems are the most commonly employed technique for ensuring the correct behavior of software. However, even well-typed programs can contain various bugs, such as buffer overflows, divisions by zero, logic bugs, and out-of-bounds array accesses. One approach to address this issue is to enhance a language’s types with <strong>subtypes that limit the range of valid values with predicates</strong>, such as ‘non-negative integer’ from ‘integer.’ These subtypes are known as ‘refinement types.’ They enable developers to write precise contracts for valid inputs and outputs of functions and specify the correctness properties. This brings formal verification into mainstream software development.</p><h3 id="Refinement-Logic-and-How-it-Maps-to-SMT-Expressions"><a href="#Refinement-Logic-and-How-it-Maps-to-SMT-Expressions" class="headerlink" title="Refinement Logic and How it Maps to SMT Expressions"></a>Refinement Logic and How it Maps to SMT Expressions</h3><p>I was partically impressed by refinement logic, the logic system used in the proposed refinement type checker, as it is both expressive and easy to be verified using an SMT solver.</p><p>Refinement logic consists of two parts: predicates and constraints. </p><p>Predicates are drawn from the quantifier-free fragment of linear arithmetic and uninterpreted functions (commonly used in SMT solvers), and may include boolean and integer literals, boolean and integer variables, arithmetic operators, boolean operators, comparisons, the ‘if-then-else’ expression, and uninterpreted functions (resembling those in <code>z3</code>).</p><p>Predicates are the building block of constraints, which are generated from refinement type checking. A constraint is either a predicate, an implication $\forall t: T : p \Rightarrow c$ which states that for each term $t$ of type $T$, if the predicate $p$ holds then another constraint $c$ must be true, or a conjunction of two other constraints.</p><p>Constraints can be verified by <strong>checking whether there is no satisfying assignment for the negated constraint</strong>. In this process, they can be converted into SMT expressions in a straightforward way. </p><p>For example, the constraint presented in the paper</p><p>$$c &#x3D; \forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x)$$</p><p>can be negated as follows:</p><p>$$\neg c$$</p><p>$$\neg (\forall x: array : 0 \le length(x) \Rightarrow \forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \neg (\forall n: int : n &#x3D; length(x) \Rightarrow \forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \neg (\forall i: int : i &#x3D; n - 1 \Rightarrow 0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land \neg (0 \le i \land i &lt; length(x))$$</p><p>$$\exists x: array : 0 \le length(x) \land \exists n: int : n &#x3D; length(x) \land \exists i: int : i &#x3D; n - 1 \land (0 &gt; i \lor i \ge length(x))$$</p><p>We can verify the negated constraint using an SMT solver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> z3<br><br>In [<span class="hljs-number">2</span>]: L = z3.Int(<span class="hljs-string">&#x27;L&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: n = z3.Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>In [<span class="hljs-number">4</span>]: i = z3.Int(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br>In [<span class="hljs-number">5</span>]: solver = z3.Solver()<br><br>In [<span class="hljs-number">6</span>]: solver.add(<span class="hljs-number">0</span> &lt;= L)<br><br>In [<span class="hljs-number">7</span>]: solver.add(n == L)<br><br>In [<span class="hljs-number">8</span>]: solver.add(i == n - <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">9</span>]: solver.add(z3.Or(i &lt; <span class="hljs-number">0</span>, i &gt; L))<br><br>In [<span class="hljs-number">10</span>]: check_sat_result = solver.check()<br><br>In [<span class="hljs-number">11</span>]: check_sat_result<br>Out[<span class="hljs-number">11</span>]: sat<br><br>In [<span class="hljs-number">12</span>]: model_ref = solver.model()<br><br>In [<span class="hljs-number">13</span>]: model_ref<br>Out[<span class="hljs-number">13</span>]: [i = -<span class="hljs-number">1</span>, L = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>Note that <code>check_sat_result</code> is <code>sat</code> and we can find a satisfying assignment for $\neg c$: $i &#x3D; -1, length(x) &#x3D; 0, n &#x3D; 0$. This means that the original constraint $c$ is invalid.</p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>Although the concept of refinement types is neat, what is the burden on programmers of writing refinement types that describe legal inputs and outputs of functions? This is a critical aspect to determine whether refinement types can bring formal verification into mainstream software development.</p><p>Furthermore, constraints in the proposed refinement logic generated by the refinement type checker can be negated and converted into SMT expressions. However, what is the feasibility of doing such checking for large-scale programs? Would it become unscalable?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rapidly Prototyping Presentations Using Markdown with Marp</title>
    <link href="/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/"/>
    <url>/2023/03/17/Rapidly-Prototyping-Presentations-Using-Markdown-with-Marp/</url>
    
    <content type="html"><![CDATA[<hr><ul><li>In the need to create a <em>decent</em>, <em>academic</em> presentation <em>fast</em>?</li><li>LaTeX overly verbose?</li><li>No time to spend on adjusting style?</li><li>Have notes written in Markdown?</li></ul><p>The solution: create presentations with Markdown using Marp!</p><p>Source code and compiled PDF of the presentation for “Rapidly Prototyping Presentations Using Markdown with Marp” presented at the SPL Workshop 2023W2 is available <a href="https://github.com/abbaswu/rapidly-prototyping-presentations-using-markdown-with-marp">in this GitHub repository</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Talks</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How to make ad-hoc polymorphism less ad-hoc</title>
    <link href="/2023/03/06/Paper-Reading-How-to-make-ad-hoc-polymorphism-less-ad-hoc/"/>
    <url>/2023/03/06/Paper-Reading-How-to-make-ad-hoc-polymorphism-less-ad-hoc/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="https://doi.org/10.1145/75277.75283">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The paper first defines and compares <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">parametric and ad-hoc polymorphism</a> and points out the limitations of existing implementations of ad-hoc polymorphism. It then presents type classes that extend the Hindley&#x2F;Milner type system to support ad-hoc polymorphism as a remedy to these limitations and explains how to translate a program using type classes into an equivalent program without them at compile-time. Furthermore, it showcases the power of type classes and the translation mechanism using the example of a polymorphic equality operation. Finally, it explores subclassing of type classes.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>The paper is easy to follow as it is written in a lucid manner and gives an informal introduction to type classes and its translation rules. Furthermore, the motivation for type classes and how it connects to object-oriented programming languages is explicitly stated in the paper. I have further looked up some material following these lines. I will summarize them before presenting some questions and comments.</p><h2 id="My-Takeaways"><a href="#My-Takeaways" class="headerlink" title="My Takeaways"></a>My Takeaways</h2><h3 id="Different-Types-of-Polymorphism"><a href="#Different-Types-of-Polymorphism" class="headerlink" title="Different Types of Polymorphism"></a>Different Types of Polymorphism</h3><p>See <a href="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">my Paper Reading for “Types and Programming Languages” Chapter 15 and Chapter 16</a>.</p><h3 id="Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C"><a href="#Type-Classes-and-Protocols-x2F-Interfaces-in-Smalltalk-x2F-Objective-C-x2F-Java-x2F-C" class="headerlink" title="Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#"></a>Type Classes and Protocols&#x2F;Interfaces in Smalltalk&#x2F;Objective-C&#x2F;Java&#x2F;C#</h3><p>An interface is an abstract type used to provide a collection of methods compliant classes must implement in the Java (and C#) programming languages.</p><p>Java is mostly influenced by Objective-C, and Java’s interfaces are adaptations of the protocols in Objective-C and Smalltalk, which in turn is based on protocols in networking, notably the ARPANet.</p><p>Although Type Classes and Interfaces do not share a common lineage, it is straightforward to implement Type Classes with <em>Generic Interfaces</em> whose Generic Parameters should be Classes that comply with the Interface.</p><p>For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented in Java using the following Generic Interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eq</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(T other)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Type-Classes-and-Concepts-in-C"><a href="#Type-Classes-and-Concepts-in-C" class="headerlink" title="Type Classes and Concepts in C++"></a>Type Classes and Concepts in C++</h3><p>Although Java’s syntax resembles C++’s, its semantics of late-binding, single inheritance, class objects, and an extensive runtime system are in the lineage of Smalltalk and Objective-C, far away from that of C++’s. However, in C++’s Template Metaprogramming world, Concepts, added in C++20, resembles Type Classes.</p><p>Template Metaprogramming in C++ had been untyped, with template parameters being generic type variables substituted at template instantiation.</p><p>In C++20, a type system has been added to this untyped template language through concepts. They are Boolean predicates on template parameters evaluated at the point of, not after, template instantiation. The compiler will produce a clear error immediately if a programmer tries to use a template parameter that doesn’t meet the requirements of a concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported after an invalid type substitutes a generic type variable emanating from the implementation context rather than the template instantiation itself.</p><p>For instance, the first two arguments to <code>std::sort</code> must be random-access iterators. If an argument is not a random-access iterator, an error will occur when <code>std::sort</code> attempts to use it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of error information, starting with an equation that failed to compile when it tried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reported at template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances: </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;, which is satisfied by any type &#x27;T&#x27;</span><br><span class="hljs-comment">// such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles</span><br><span class="hljs-comment">// and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parameters are being introduced in a template definition, to indicate that the corresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities">https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</a></li><li><a href="https://cs.gmu.edu/~sean/stuff/java-objc.html">https://cs.gmu.edu/~sean/stuff/java-objc.html</a></li><li><a href="https://functionalcpp.wordpress.com/2013/08/16/type-classes/">https://functionalcpp.wordpress.com/2013/08/16/type-classes/</a></li><li><a href="https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses">https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</a></li><li><a href="https://wiki.haskell.org/OOP_vs_type_classes">https://wiki.haskell.org/OOP_vs_type_classes</a></li><li><a href="https://doi.org/10.1145/1411318.1411324">https://doi.org/10.1145/1411318.1411324</a></li><li><a href="https://www.foonathan.net/2021/07/concepts-structural-nominal/">https://www.foonathan.net/2021/07/concepts-structural-nominal/</a></li><li><a href="https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/">https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</a></li></ul><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><ul><li>The translation mechanism (pre-processor) proposed in this paper translates a program using type classes into an equivalent program without them at compile-time so that an existing Hindley&#x2F;Milner type system can be used afterward instead of having to develop a new, complex type system to support type classes. This is indeed a very clever mechanism. Can this be viewed as an example of <a href="https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/#Derived-Forms">desugaring</a>?</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Type-Theoretic Constructs in C++</title>
    <link href="/2023/03/01/Type-Theoretic-Constructs-in-CXX/"/>
    <url>/2023/03/01/Type-Theoretic-Constructs-in-CXX/</url>
    
    <content type="html"><![CDATA[<h1 id="Fixed-point-Combinators-Tying-the-Recursive-Knot-and-Recursive-Lambda-Expressions"><a href="#Fixed-point-Combinators-Tying-the-Recursive-Knot-and-Recursive-Lambda-Expressions" class="headerlink" title="Fixed-point Combinators, Tying the Recursive Knot, and Recursive Lambda Expressions"></a>Fixed-point Combinators, Tying the Recursive Knot, and Recursive Lambda Expressions</h1><p>In Lambda Calculus, we cannot refer to the Lambda Abstraction <em>itself</em> within a Lambda Abstraction. Similarly, C++ does not allow defining a recursive lambda expression. Thus, we cannot straightforwardly implement recursion.</p><p>A workaround for this is to define a lambda expression that:</p><ul><li>Add an <em>additional first parameter</em> to the lambda expression.</li><li>Call that <em>additional first parameter</em> inside the lambda expression at each recursive call site.</li></ul><p>Such an additional first parameter should have the value of a yet-unknown hypothetical recursive function. Thus, we should use <code>auto</code> to represent its type. Using <code>auto</code> in a lambda expression’s parameter list requires C++14 or above.</p><p>For example, we can define the following lambda expression to calculate the <code>n</code>th Fibonacci Number recursively:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> fib = [](<br>    <span class="hljs-keyword">auto</span> recursive_fib,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n<br>) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>After defining such a lambda expression, we can use a <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed-point_combinators_in_lambda_calculus">Fixed-point Combinator</a> to <a href="https://courses.cs.cornell.edu/cs3110/2021sp/textbook/mut/ex_recursion_without_rec.html">tie the recursive knot</a> and return a new recursive function without the additional first parameter.</p><p>What is a Fixed-Point Combinator?</p><p>In mathematics, a <em>fixed-point</em> for function $f$ refers to an element $x$ that is mapped to itself by the function, i.e., $x &#x3D; f(x)$. For example, given $f(x)&#x3D;x^{2}-3x+4$, then $2$ is a fixed point of $f$, because $f(2) &#x3D; 2$.</p><p>A <em>combinator</em> is a function that operates on a function (i.e., a <em>higher-order function</em>).</p><p>A <em>fixed-point combinator</em> <code>g</code> for function <code>f</code> satisfies <code>g(f)(...) = f(g(f), ...)</code>. This is reminiscent of the form $x &#x3D; f(x)$ for fixed points in mathematics, and <code>g(f)</code> can be seen as a <em>fixed-point</em> of function <code>f</code>.</p><p>This implies that <em>a fixed-point combinator <code>g</code>, when called on <code>f</code>, returns a new function (the <code>g(f)</code> above), that, when called with parameters <code>...</code>, is equivalent to directly calling <code>f</code> with both <code>g(f)</code> and <code>...</code></em>. This means that a fixed-point combinator <em>returns a new recursive function without the additional first parameter of <code>f</code></em>. </p><p>This is done by <em>tying the recursive knot of <code>f</code></em>. <em>Tying the recursive knot</em> refers to, for such a previously defined lambda expression <code>f</code>, passing a function that represents the hypothetical recursive function, which in this case is <code>g(f)</code>, to its first parameter.</p><p>We can implement fixed-point combinators in C++ using the following struct, whose instance represents <code>g(f)</code> and contains an <code>operator()</code> method, in which can use <code>this</code> to self-reference to <code>g(f)</code>, allowing us to support <code>f(g(f), ...)</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> F, <span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FixedPointCombinator</span> &#123;<br>    F f;<br><br>    <span class="hljs-function">R <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Args... args)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(*<span class="hljs-keyword">this</span>, args...);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>C++ supports compiler optimizations for this pattern. For example, the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> F, <span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FixedPointCombinator</span> &#123;<br>    F f;<br><br>    <span class="hljs-function">R <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Args... args)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(*<span class="hljs-keyword">this</span>, args...);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">auto</span> fib = [](<br>    <span class="hljs-keyword">auto</span> recursive_fib,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n<br>) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> fib_ = FixedPointCombinator&lt;<span class="hljs-keyword">decltype</span>(fib), <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; &#123;fib&#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;input);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib_</span>(input);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>compiles to the following LLVM IR under <code>clang++ -std=c++14 -O2 -S -emit-llvm</code>, in which <code>FixedPointCombinator&lt;decltype(fib), unsigned long, unsigned int&gt; &#123;fib&#125;</code> has been optimized to the recursive function <code>@_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; ModuleID = &#x27;fib_recursive.cpp&#x27;</span><br>source_filename <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fib_recursive.cpp&quot;</span><br><span class="hljs-keyword">target</span> <span class="hljs-keyword">datalayout</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="hljs-keyword">target</span> <span class="hljs-keyword">triple</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x86_64-unknown-linux-gnu&quot;</span><br><br><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%u<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%lu\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: inlinehint nounwind readnone uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span>) <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-variable">#3</span> <span class="hljs-keyword">align</span> <span class="hljs-number">2</span> &#123;<br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%3</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%9</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%2</span><br>  ]<br><br><span class="hljs-number">2</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">3</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-1</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">tail</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">tail</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%6</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%5</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%8</span><br><br><span class="hljs-number">9</span>:                                                <span class="hljs-comment">; preds = %1, %2</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">phi</span> <span class="hljs-type">i64</span> [ <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%2</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%1</span> ]<br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%10</span><br>&#125;<br><br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#0</span> <span class="hljs-operator">=</span> &#123; norecurse <span class="hljs-keyword">nounwind</span> <span class="hljs-keyword">uwtable</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;min-legal-vector-width&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-jump-tables&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#1</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">argmemonly</span> <span class="hljs-keyword">nounwind</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#2</span> <span class="hljs-operator">=</span> &#123; nofree <span class="hljs-keyword">nounwind</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#3</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">inlinehint</span> <span class="hljs-keyword">nounwind</span> <span class="hljs-keyword">readnone</span> <span class="hljs-keyword">uwtable</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;min-legal-vector-width&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-jump-tables&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#4</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">nounwind</span> &#125;<br><br><span class="hljs-title">!llvm.module.flags</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!0</span>&#125;<br><span class="hljs-title">!llvm.ident</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!1</span>&#125;<br><br><span class="hljs-title">!0</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> !<span class="hljs-string">&quot;wchar_size&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">4</span>&#125;<br><span class="hljs-title">!1</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;clang version 9.0.1 (https://github.com/conda-forge/clangdev-feedstock 2ea3b72da24769de0dfc6dac99251a5d7a46144d)&quot;</span>&#125;<br><span class="hljs-title">!2</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!3</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!3</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;int&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!4</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;omnipotent char&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!5</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!5</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;Simple C++ TBAA&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="Type-Abstractions-and-Template-Functions"><a href="#Type-Abstractions-and-Template-Functions" class="headerlink" title="Type Abstractions and Template Functions"></a>Type Abstractions and Template Functions</h1><p>Polymorphic Lambda Calculus (also known as Second Order Lambda Calculus or System F) introduces Type Abstractions and Type Applications.</p><ul><li>A Type Abstraction, written as <code>λ X . t</code>, represents a Term (often a Lambda Abstraction) <code>t</code> containing a Type Variable <code>X</code>.</li><li>A Type Application, written as <code>t [T]</code>, uses a Concrete Type <code>T</code> to replace all instances of the Type Variable in the Term of the Type Abstraction.</li></ul><p>This can be used to implement Polymorphic Lambda Abstractions.</p><p>For example, the following Type Abstraction representing a Polymorphic Identity Function:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">id</span> = λ X . λ x: X . x<br></code></pre></td></tr></table></figure><p>can be instantiated to yield any concrete identity function that may be required, such as <code>id [Nat]: Nat -&gt; Nat</code>.</p><p>Such Type Abstractions can be implemented in C++ using template functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">id</span><span class="hljs-params">(X x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>while Type Applications correspond to template instantiations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">id&lt;<span class="hljs-type">int</span>&gt;<br></code></pre></td></tr></table></figure><p>Should the template function be passed a callable, we usually want to use a template typename to support functions, function pointers, functors, and lambda expressions. Alternatively, we can also use <code>auto</code> to represent its type in the template function’s parameter list. Note that using <code>auto</code> in a (non-lambda expression) function’s parameter list requires C++20 or above.</p><p>For example, the following Type Abstraction:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">double = λ <span class="hljs-keyword">X</span> . λ f: <span class="hljs-keyword">X</span> -&gt; <span class="hljs-keyword">X</span> . λ a: <span class="hljs-keyword">X</span> . f(f a)<br></code></pre></td></tr></table></figure><p>can be represented using the following template function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> F&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> F f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>or in C++20 or above:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ compilers support aggressive inlining optimizations when lambda expressions are used. For example, the call to <code>const auto g = double_&lt;int&gt;([](int x) &#123; return 2 * x; &#125;);</code> in the following source code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> g = <span class="hljs-built_in">double_</span>&lt;<span class="hljs-type">int</span>&gt;([](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x; &#125;);<br>    <br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">g</span>(input));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>has been completely inlined to <code>%5 = shl i32 %4, 2</code> in the LLVM IR generated with <code>clang++ -std=c++20 -O2 -S -emit-llvm</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">shl</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure><h1 id="Type-Classes-and-Concepts-in-C"><a href="#Type-Classes-and-Concepts-in-C" class="headerlink" title="Type Classes and Concepts in C++"></a>Type Classes and Concepts in C++</h1><p>Template Metaprogramming in C++ had been untyped, with template parameters being generic type variables substituted at template instantiation.</p><p>In C++20, a type system has been added to this untyped template language through concepts. They are Boolean predicates on template parameters evaluated at the point of, not after, template instantiation. The compiler will produce a clear error immediately if a programmer tries to use a template parameter that doesn’t meet the requirements of a concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported after an invalid type substitutes a generic type variable emanating from the implementation context rather than the template instantiation itself.</p><p>For instance, the first two arguments to <code>std::sort</code> must be random-access iterators. If an argument is not a random-access iterator, an error will occur when <code>std::sort</code> attempts to use it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of error information, starting with an equation that failed to compile when it tried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reported at template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. For instance, the Type Class below specifies the equal (&#x3D;&#x3D;) operations for Type Constructors that are its instances: </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;,</span><br><span class="hljs-comment">// which is satisfied by any type &#x27;T&#x27; such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-comment">// This is represented using a &quot;requires expression&quot; which returns a bool</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parameters are being introduced in a template definition, to indicate that the corresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>or (using a “requires clause”):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">requires</span> Eq&lt;T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities">https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</a></li><li><a href="https://cs.gmu.edu/~sean/stuff/java-objc.html">https://cs.gmu.edu/~sean/stuff/java-objc.html</a></li><li><a href="https://functionalcpp.wordpress.com/2013/08/16/type-classes/">https://functionalcpp.wordpress.com/2013/08/16/type-classes/</a></li><li><a href="https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses">https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</a></li><li><a href="https://wiki.haskell.org/OOP_vs_type_classes">https://wiki.haskell.org/OOP_vs_type_classes</a></li><li><a href="https://doi.org/10.1145/1411318.1411324">https://doi.org/10.1145/1411318.1411324</a></li><li><a href="https://www.foonathan.net/2021/07/concepts-structural-nominal/">https://www.foonathan.net/2021/07/concepts-structural-nominal/</a></li><li><a href="https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/">https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 22</title>
    <link href="/2023/02/26/Paper-Reading-Types-and-Programming-Languages-Chapter-22/"/>
    <url>/2023/02/26/Paper-Reading-Types-and-Programming-Languages-Chapter-22/</url>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 22 of “Types and Programming Languages” explores the problem of Type Reconstruction (Type Inference) or deriving Types for Unannotated Arguments of Lambda Abstractions. It first introduces Type Variables and Substitutions before formalizing the Type Reconstruction problem. Then, it points out that Type Reconstruction can be implemented using a Constraint Typing Algorithm or an Algorithm that calculates a Set of Constraints between Types involving Type Variables and records them for later consideration, and proves the Completeness and Soundness of Constraint Typing. Moreover, it introduces a Unification Algorithm to calculate Principle Solutions (most general solutions) to Constraint Sets. Finally, the Chapter presents how the Typing Rules for Let Expressions can be modified to support Let Polymorphism - allowing an Untyped Function to generate different Constraints, thus be able to be Reconstructed to Different Types when applied to Terms of different Types.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, Chapter 22 is clearly written, and several sections intrigued me (such as that Parametric Polymorphism and Type Reconstruction can result from two different interpretations of Dependent Types containing Type Variables). Moreover, this Chapter provides essential inspiration for my Class Project, “Inferring Feasible Types for the Parameters and Return Values of Python Functions.” However, the Chapter also used some Concepts without introducing them (such as the Unification Problem), and I had to look into them to understand parts of the Chapter.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><h3 id="Completeness-and-Soundness-of-a-Theory"><a href="#Completeness-and-Soundness-of-a-Theory" class="headerlink" title="Completeness and Soundness of a Theory"></a>Completeness and Soundness of a Theory</h3><p>Using $TRUE$ and $PROVABLE$ to represent the Set of Facts that are True and Provable under a Theory, respectively:</p><ul><li>Completeness: $TRUE \subseteq PROVABLE$ or every Fact that is True is also Provable (but there may be some Facts that are Provable but are not True).</li><li>Soundness: $PROVABLE \subseteq TRUE$ or every Fact that is Provable is also True (but there may be some True Facts that are not Provable).</li><li>Completeness and Soundness: $TRUE &#x3D; PROVABLE$.</li></ul><p>An ideal Theory should be both Complete and Sound.</p><h3 id="Unification-Problem"><a href="#Unification-Problem" class="headerlink" title="Unification Problem"></a>Unification Problem</h3><p>Given two Terms containing some Variables, find a Substitution (an Assignment of Terms to Variables) that makes the two Terms equal.</p><p>For example, given $f(x_1, h(x_1), x_2) &#x3D; f(g(x_3), x_4, x_3)$, a valid Substitution is $\sigma &#x3D; {g(x_3): x_1, x_3: x_2, h(g(x_3)): x_4}$.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="Parametric-Polymorphism-and-Type-Reconstruction"><a href="#Parametric-Polymorphism-and-Type-Reconstruction" class="headerlink" title="Parametric Polymorphism and Type Reconstruction"></a>Parametric Polymorphism and Type Reconstruction</h3><p>Given Dependent Types containing Type Variables (often the result of the Programmer leaving out Type Annotations in Source Code), we can make one of the following assumptions.</p><ul><li>All Substitution Instances are well-typed. Thus, it is possible for Type Variables to be held abstract during Type Checking and only be Substituted for Concrete Types later on. This is the basis of Parametric Polymorphism.</li><li>Not all Substitution Instances are well-typed. In this case, we want to look for <em>valid</em> Substitutions. This leads us to the problem of Type Reconstruction.</li></ul><h3 id="Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them"><a href="#Deriving-Constraint-Sets-and-Calculating-Solutions-to-Them" class="headerlink" title="Deriving Constraint Sets and Calculating Solutions to Them"></a>Deriving Constraint Sets and Calculating Solutions to Them</h3><p>To explore valid ways that Concrete Types can substitute Type Variables, we can calculate a Set of Constraints between Types involving Type Variables. This is similar to an ordinary Type Checking Algorithm checking Requirements in the Premise but records these Requirements as Constraints for later consideration instead of checking them immediately.</p><p>After we have generated a Constraint Set, we can use a Unification Algorithm to calculate Solutions to it. The Unification Algorithm proposed in the Chapter removes a Constraint from the Constraint Set, processes it, and recursively processes the remaining Constraint Set.</p><p>There is a most general way to instantiate the Type Variables. This is known as a Principle Solution, which contains Principle Types, or the most general types, for Type Variables.</p><h2 id="Inspirations-From-This-Paper"><a href="#Inspirations-From-This-Paper" class="headerlink" title="Inspirations From This Paper"></a>Inspirations From This Paper</h2><p>This Paper points out a viable way to implement my Class Project “Inferring Feasible Types for the Parameters and Return Values of Python Functions.”</p><ul><li>Propose Typing Rules for Python Expressions.</li><li>Implement an Algorithm similar to an ordinary Type Checking Algorithm checking Requirements in the Premise, but which records these Requirements as Constraints for later consideration instead of checking them immediately.</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul><li>What are the specific types of Constraints that are recorded when deriving Constraint Sets? What do the derived Constraint Sets look like?</li><li>Implementing the Unification Algorithm proposed to calculate Solutions to the Constraint Set seems non-trivial. Are there any implementations of it for more “real-world” (imperative, non-ML Family) Programming Languages? What adjustments have to be made to accomplish such an implementation?</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Displaying Information for Thrown and Caught Exceptions to the User in Python</title>
    <link href="/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/"/>
    <url>/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/</url>
    
    <content type="html"><![CDATA[<h2 id="Exception-Semantics-in-Python"><a href="#Exception-Semantics-in-Python" class="headerlink" title="Exception Semantics in Python"></a>Exception Semantics in Python</h2><p>Exception handling refers to how a program reacts when unexpected events, known as exceptions, occur throughout the program’s execution.</p><p>Exception semantics varies considerably among programming languages. Based on this, we can divide programming languages into <a href="https://doi.org/10.1007%2F11818502_16">two groups</a>:</p><ul><li>Programming languages that only employ exceptions to address exceptional, unforeseen, or incorrect circumstances, such as C++, Java, and C#.</li><li>Programming languages that use exceptions as standard flow control structures, such as Ada, ML, OCaml, Python, and Ruby. For example, in Python, when an iterator has exhausted its output, and no more items can be generated, an exception of type StopIteration is thrown.</li></ul><p>As a result, exceptions are pervasive in Python, and exception catching and handling is a must for writing robust Python code.</p><h2 id="Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User"><a href="#Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User" class="headerlink" title="Displaying Information for Thrown and Caught Exceptions to the User"></a>Displaying Information for Thrown and Caught Exceptions to the User</h2><p>In many situations, it is beneficial to handle the exception and give a user a “loud and clear” message of what has happened as feedback. This is also particularly useful in investigating the root cause of the exception and whether it is the tip of the iceberg of a more significant latent bug.</p><p>This can be simplified by the fact that exceptions thrown by built-in functions, standard library functions, and functions in many well-tested third-party libraries all contain rich semantics in:</p><ul><li>The class of the exception. Given an exception <code>e</code>, it is accessible via <code>type(e)</code>, and <code>type(e).__name__</code> gives a <code>str</code> representation.</li><li>The message of the exception. Given an exception <code>e</code>, <code>str(e)</code> generates a representation of the argument(s) to the instance.</li></ul><p>In command-line programs, we can write both of them to <code>stderr</code>, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> stderr<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Do some potentially erroneous operation</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># Write the class of the exception and the message of the exception to stderr</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e), file=stderr)<br></code></pre></td></tr></table></figure><p>In GUI programs, we can display them in a message box, with the class of the exception being the title of the message box and the message of the exception being the message of the message box, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> Slot<br><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QDialog, QMessageBox<br><br><span class="hljs-keyword">from</span> .ui <span class="hljs-keyword">import</span> Ui_ConnectToServerDialog<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectToServerDialog</span>(<span class="hljs-title class_ inherited__">QDialog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(parent)<br><br>        self.ui=Ui_ConnectToServerDialog()<br>        self.ui.setupUi(self)<br>        self.ui.connectPushButton.clicked.connect(self.accept)<br>        <br>        self.server=<span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @Slot()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Do some operation that involves potentially erroneous user input</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># Display the exception thrown in a QMessageBox</span><br>            <span class="hljs-comment"># The type of the exception is the title of the QMessageBox</span><br>            <span class="hljs-comment"># The message of the exception is the message of the QMessageBox</span><br>            QMessageBox.about(self, <span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-built_in">super</span>().accept()<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages">https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages</a></li><li><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">https://docs.python.org/3/library/exceptions.html#bltin-exceptions</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Using ffmpeg to Manipulate Video Files</title>
    <link href="/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/"/>
    <url>/2023/02/18/Using-ffmpeg-to-Manipulate-Video-Files/</url>
    
    <content type="html"><![CDATA[<p>FFmpeg is a collection of libraries and tools for manipulating video, audio, and other multimedia files and streams. It is frequently used for basic editing (cutting and joining), video scaling, post-production video effects, and standard compliance (SMPTE, ITU). </p><p>The main component of FFmpeg is the command-line tool <code>ffmpeg</code>, which reads an input file, applies transformations, and writes to an output file.</p><p>The basic usage pattern of <code>ffmpeg</code> is <code>ffmpeg -i &lt;input file&gt; [options] &lt;output file&gt;</code>. <code>ffmpeg</code> automatically selects the decoder and encoder based on the extension of <code>&lt;input file&gt;</code> and <code>&lt;output file&gt;</code>, and we specify what transformations we apply to the original video file in <code>[options]</code>.</p><p>We now explain what to write in <code>[options]</code> to address typical video manipulation demands.</p><h1 id="Cut-a-Video"><a href="#Cut-a-Video" class="headerlink" title="Cut a Video"></a>Cut a Video</h1><p>Add the option <code>-ss &lt;start time in hours&gt;:&lt;start time in minutes&gt;:&lt;start time in seconds&gt; -to &lt;end time in hours&gt;:&lt;end time in minutes&gt;:&lt;end time in seconds&gt;</code>.</p><p>If there is no need to transcode the video format or apply other transformations, add <code>-c:v copy -c:a copy</code> for increased speed.</p><p>For example, <code>ffmpeg -i input.mp4 -ss 00:05:10 -to 00:15:30 -c:v copy -c:a copy output.mp4</code> saves <code>input.mp4</code> from 00:05:10 to 00:15:30 to <code>output.mp4</code> with no transcoding or other transformations, resulting in a 10 minutes and 20 seconds video.</p><h1 id="Change-Frame-Rate"><a href="#Change-Frame-Rate" class="headerlink" title="Change Frame Rate"></a>Change Frame Rate</h1><p>Add the option <code>-r &lt;frame rate&gt;</code>.</p><p>For example, <code>ffmpeg -i input.mp4 -r 12 output.gif</code> controls the frame rate of <code>output.gif</code> generated by transcoding to 12FPS.</p><h1 id="Change-Output-Resolution"><a href="#Change-Output-Resolution" class="headerlink" title="Change Output Resolution"></a>Change Output Resolution</h1><p>Add the option <code>-s &lt;length&gt; x &lt;width&gt;</code>. The units of <code>&lt;length&gt;</code> and <code>&lt;width&gt;</code> are in pixels.</p><p>It is usually required that the length and width be scaled equally from the original length and width to avoid distortion of the picture.</p><p>For example, <code>ffmpeg -i input.mp4 -s 320x180 output.gif</code> controls the resolution of the <code>output.gif</code> generated by transcoding to 320x180.</p><h1 id="Change-Playback-Speed"><a href="#Change-Playback-Speed" class="headerlink" title="Change Playback Speed"></a>Change Playback Speed</h1><ul><li>To speed up the output video to k times its original size: add the option <code>-filter:v &#39;setpts=PTS/&lt;k&gt;&#39;</code>.</li><li>To slow down the output video to k times the original: add the option <code>-filter:v &#39;setpts=&lt;k&gt;*PTS&#39;</code>.</li></ul><p>For example, <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=PTS/2&#39; output.gif</code> (or <code>ffmpeg -i input.mp4 -filter:v &#39;setpts=0.5*PTS&#39; output.gif</code>) will transcode the resulting <code>output.gif</code> to speed up to 2 times the original.</p><h1 id="Extract-Audio"><a href="#Extract-Audio" class="headerlink" title="Extract Audio"></a>Extract Audio</h1><p>Before we extract audio, we need to first look up media information using <code>ffprobe</code>, a command-line tool installed with <code>ffmpeg</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ffprobe video.mkv<br>...<br>Input <span class="hljs-comment">#0, matroska,webm, from &#x27;video.mkv&#x27;:</span><br>  Metadata:<br>    encoder         : no_variable_data<br>    creation_time   : 1970-01-01T00:00:00.000000Z<br>  Duration: 00:23:30.07, start: 0.000000, bitrate: 1392 kb/s<br>    Stream <span class="hljs-comment">#0:0: Audio: aac (LC), 48000 Hz, stereo, fltp (default)</span><br>    Metadata:<br>...<br></code></pre></td></tr></table></figure><p>We can see that the format of the audio stream is aac. Now, we can add the option <code>-map 0:a -acodec copy</code> to copy the audio stream. Note that the extension of output file should correspond with the format of the audio stream.</p><p>For example, we run the following command to save the audio stream of <code>video.mkv</code> to <code>audio.mp4</code>: <code>ffmpeg -i video.mkv -map 0:a -acodec copy audio.mp4</code>. Note that <code>.mp4</code> is a valid extensions of aac audio streams.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/FFmpeg">https://en.wikipedia.org/wiki/FFmpeg</a></li><li><a href="https://shotstack.io/learn/use-ffmpeg-to-trim-video/">https://shotstack.io/learn/use-ffmpeg-to-trim-video/</a></li><li><a href="https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/">https://homehack.nl/create-animated-gifs-from-mp4-with-ffmpeg/</a></li><li><a href="https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681">https://superuser.com/questions/1261678/how-do-i-speed-up-a-video-by-60x-in-ffmpeg/1261681</a></li><li><a href="https://www.baeldung.com/linux/ffmpeg-audio-from-video">https://www.baeldung.com/linux/ffmpeg-audio-from-video</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Unix</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Syncing a Local Directory With a Remote Directory via FTP</title>
    <link href="/2023/02/16/Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/"/>
    <url>/2023/02/16/Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP/</url>
    
    <content type="html"><![CDATA[<h1 id="Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP"><a href="#Syncing-a-Local-Directory-With-a-Remote-Directory-via-FTP" class="headerlink" title="Syncing a Local Directory With a Remote Directory via FTP"></a>Syncing a Local Directory With a Remote Directory via FTP</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>We can use the following Sequence Diagram to depict the process of modifying the Files within a Local Directory and a Remote Directory before syncing the two Directories via the <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">File Transfer Protocol (FTP)</a>, a standard communication protocol used on computer networks to send files between a Client and a Server.</p><pre><code class=" mermaid">sequenceDiagram    loop        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Modify Files        Machine With the FTP Server -&gt;&gt; Machine With the FTP Server: Start FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Client: Start FTP Client        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Connect to FTP Server        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Mirror Remote Directory -&gt; Local Directory        Machine With the FTP Server --&gt;&gt; Machine With the FTP Client: Update Local Directory With Changed Files in Remote Directory        Machine With the FTP Client -&gt;&gt; Machine With the FTP Server: Reverse Mirror Local Directory -&gt; Remote Directory        Machine With the FTP Client --&gt;&gt; Machine With the FTP Server: Update Remote Directory With Changed Files in Local Directory    end</code></pre><h2 id="Setting-Up-the-Machine-With-the-FTP-Client"><a href="#Setting-Up-the-Machine-With-the-FTP-Client" class="headerlink" title="Setting Up the Machine With the FTP Client"></a>Setting Up the Machine With the FTP Client</h2><p>Obviously, we need to install an FTP Client on this Machine. Personally, I recommend installing <a href="https://lftp.yar.ru/"><code>lftp</code></a>, a “sophisticated” file transfer program. Unlike a standard FTP Client, which only enables you to upload or download files, <code>lftp</code> additionally enables you to maintain file synchronisation using its built-in <code>mirror</code> command.</p><h2 id="Setting-Up-the-Machine-With-the-FTP-Server"><a href="#Setting-Up-the-Machine-With-the-FTP-Server" class="headerlink" title="Setting Up the Machine With the FTP Server"></a>Setting Up the Machine With the FTP Server</h2><p>We would also need an FTP Server on the other Machine. Although there are many existing UNIX FTP servers, such as <code>proftpd</code> and <code>vsftpd</code>, they are usually tricky to compile, configure, and set up and require Root Privileges to run, which is tedious, if not impossible, in many situations.</p><p>As an alternative, we write our own FTP Server using <a href="https://github.com/giampaolo/pyftpdlib"><code>pyftpdlib</code></a>, a pure Python FTP server library written which offers a high-level interface to creating portable and efficient FTP servers. Such a solution requires us to have a Python environment running on the Machine With the FTP Server and install <code>pyftpdlib</code>, which is very simple in today’s world where the Python ecosystem is ubiquitous.</p><p>After setting up a Python environment and installing <code>pyftpdlib</code>, we can write a script for an FTP server. Below is the script that I am using. By default, it sets up a user <code>user</code> with password <code>12345</code> and listens on port <code>2121</code> of the Machine With the FTP Server’s Outbound IP Address, but these settings can all be tweaked by providing command-line arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<br><span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<br><span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_outbound_ip_address</span>():<br>    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># doesn&#x27;t even have to be reachable</span><br>        s.connect((<span class="hljs-string">&#x27;10.255.255.255&#x27;</span>, <span class="hljs-number">1</span>))<br>        IP = s.getsockname()[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">except</span> Exception:<br>        IP = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>    <span class="hljs-keyword">finally</span>:<br>        s.close()<br>    <span class="hljs-keyword">return</span> IP<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_command_line_arguments</span>():<br>    parser = argparse.ArgumentParser()<br><br>    parser.add_argument(<span class="hljs-string">&#x27;--user&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Define a user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;The password of the user having full read/write permissions&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--anonymous&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Add read-only anonymous user&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--root&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=os.getcwd(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Root directory in FTP server&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--host&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, default=get_outbound_ip_address(), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Host to listen on&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--port&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-number">2121</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Port to listen on&#x27;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">return</span> args.user, args.password, args.anonymous, args.root, args.host, args.port<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Parse command line arguments</span><br>    user, password, anonymous, root, host, port = parse_command_line_arguments()<br><br>    <span class="hljs-comment"># Instantiate a dummy authorizer for managing &#x27;virtual&#x27; users</span><br>    authorizer = DummyAuthorizer()<br><br>    <span class="hljs-comment"># Define a new user having full r/w permissions</span><br>    authorizer.add_user(user, password, root, perm=<span class="hljs-string">&#x27;elradfmwMT&#x27;</span>)<br><br>    <span class="hljs-comment"># Add anonymous user</span><br>    <span class="hljs-keyword">if</span> anonymous:<br>        authorizer.add_anonymous(root)<br><br>    <span class="hljs-comment"># Instantiate FTP handler class</span><br>    handler = FTPHandler<br>    handler.authorizer = authorizer<br><br>    <span class="hljs-comment"># Define a customized banner (string returned when client connects)</span><br>    handler.banner = <span class="hljs-string">&quot;pyftpdlib based ftpd ready.&quot;</span><br><br>    <span class="hljs-comment"># Instantiate FTP server class and listen on &lt;host&gt;:&lt;port&gt;</span><br>    server = FTPServer((host, port), handler)<br><br>    <span class="hljs-comment"># Start FTP server</span><br>    server.serve_forever()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>Save this to a file, and run <code>chmod +x</code> on the file to make it executable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd -h<br>usage: pyftpd [-h] [--user USER] [--password PASSWORD] [--anonymous] [--root ROOT] [--host HOST] [--port PORT]<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>           show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  --user USER          Define a user having full <span class="hljs-built_in">read</span>/write permissions<br>  --password PASSWORD  The password of the user having full <span class="hljs-built_in">read</span>/write permissions<br>  --anonymous          Add read-only anonymous user<br>  --root ROOT          Root directory <span class="hljs-keyword">in</span> FTP server<br>  --host HOST          Host to listen on<br>  --port PORT          Port to listen on<br>abbas@abbas-ThinkPad-X1-Carbon-Gen-9:~$ ./pyftpd <br>[I 2023-02-16 15:47:39] &gt;&gt;&gt; starting FTP server on 10.43.111.144:2121, pid=11969 &lt;&lt;&lt;<br>[I 2023-02-16 15:47:39] concurrency model: async<br>[I 2023-02-16 15:47:39] masquerade (NAT) address: None<br>[I 2023-02-16 15:47:39] passive ports: None<br></code></pre></td></tr></table></figure><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>Last but not least, we will present a demonstration of syncing a Local Directory With a Remote Directory via FTP.</p><p>Our Local Directory is a directory named <code>mirror_ubuntu</code> with two files <code>mirror_ubuntu_1.txt</code> and <code>mirror_ubuntu_2.txt</code> on the Machine With the FTP Client.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ubuntu_directory.png" alt="Local Directory"></p><p>Our Remote Directory is a directory named <code>mirror_ipad</code> with two files <code>mirror_ipad_1.txt</code> and <code>mirror_ipad_2.txt</code> on the Machine With the FTP Server, which is the <a href="https://ish.app/">iSH</a> app running within an iPad.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/original_mirror_ipad_directory.png" alt="Remote Directory"></p><p>We start the FTP Server on the Machine With the FTP Server, and start the FTP Client on the Machine With the FTP Client.</p><p>As depicted in <a href="#Overview">Overview</a>, we first Mirror Remote Directory to Local Directory, which can be accomplished by running <code>mirror --continue --no-perms &lt;Remote Directory&gt; &lt;Local Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirroring_mirror_ipad_directory.png" alt="Mirroring Remote Directory to Local Directory"></p><p>The Local Directory will now contain Files that were modified the Remote Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ubuntu_directory_after_mirroring_mirror_ipad_directory.png" alt="Local Directory After Mirroring Remote Directory to Local Directory"></p><p>Afterwards, we Reverse Mirror Local Directory to Remote Directory, which can be accomplished by running <code>mirror --continue --no-perms --reverse &lt;Local Directory&gt; &lt;Remote Directory&gt;</code> within <code>lftp</code>.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/reverse_mirroring_mirror_ubuntu_directory.png" alt="Reverse Mirroring Local Directory to Remote Directory"></p><p>The Remote Directory will now contain Files that were modified the Local Directory.</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/mirror_ipad_directory_after_reverse_mirroring_mirror_ubuntu_directory.png" alt="Remote Directory After Reverse Mirroring Local Directory to Remote Directory"></p><p>At this point, the Local Directory has been successfully synced with the Remote Directory.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/">https://www.geekbitzone.com/posts/lftp/lftp-mirror-remote-folders/</a></li><li><a href="https://github.com/giampaolo/pyftpdlib">https://github.com/giampaolo/pyftpdlib</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 15 and Chapter 16</title>
    <link href="/2023/02/10/Paper-Reading-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/"/>
    <url>/2023/02/10/Paper-Reading-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/</url>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 15, “Subtyping,” describes adding Subtyping with Functions and Records into Simply Typed Lambda Calculus. It formalizes the Subtype Relation as a collection of Inference Rules, verifies that verify that the Preservation and Progress Theorems of Simply Typed Lambda Calculus still apply, examines Ascription (or Casting) in the context of Subtyping, and proposes Subtyping Rules for Variants, Lists, References, and Arrays. Finally, it presents alternative Coercion Semantics for Subtyping. Chapter 16, “Metatheory of Subtyping,” observes that the Subtyping Rules presented in the previous chapter are not syntax-directed and have overlapping conclusions, which impedes implementing a Typechecking Algorithm, and develops the Algorithmic Subtype Relation and the Algorithmic Typing Relation to address these problems.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><h2 id="Acquired-Insights"><a href="#Acquired-Insights" class="headerlink" title="Acquired Insights"></a>Acquired Insights</h2><p>I will first summarize the insights that I gained while reading these Chapters.</p><p>An empty Bottom Type is useful, both as a way of expressing that a Function is not intended to return and telling the Typechecker that the Term can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial, especially for Downcasting. As blindly following Type Assertions may lead to potentially serious consequences, the Compiler would need to insert a Runtime Type Check, essentially adding the Machinery for Typechecking to the Runtime System. This might incur a significant performance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is a physical relationship between Types, Subtyping generally is more of a <em>logical relationship</em> between Types. For example, in the alternative Coercion Semantics for Subtyping, we can consider that <code>int</code> and <code>float</code>, two Types that do not inherit from one another, have a Subtyping Relation, as they can be converted to one another. In this case, the Subtyping Relation is compiled to Coercions at runtime (instructions physically converting an <code>int</code> to a <code>float</code>, or vice versa), which are much more efficient than virtual function calls frequently seen in an Inheritance Based Class Hierarchy.</p><h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><p>There is no doubt that the Chapters are written in great detail. However, I find some of the content, especially the terminology, a little difficult to understand, and I have looked into background knowledge concerning the topic. Below summarizes what I have read.</p><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism describes that a single Interface can work with Terms of Different Types in Programming Languages. There are different kinds of Polymorphism in the context of Programming Languages, including:</p><h4 id="Parametric-Polymorphism"><a href="#Parametric-Polymorphism" class="headerlink" title="Parametric Polymorphism"></a>Parametric Polymorphism</h4><p>Also known as “Generic Programming”. Using Abstract Symbols that can substitute for any Type instead of specifying Concrete Types in Interfaces. C++’s Template Metaprogramming comes close to Parametric Polymorphism (except for Template Specializations).</p><h4 id="Ad-Hoc-Polymorphism"><a href="#Ad-Hoc-Polymorphism" class="headerlink" title="Ad Hoc Polymorphism"></a>Ad Hoc Polymorphism</h4><p>Defining a Common Interface for a Set of Individually Specified Types. Includes Function Overloading, Operator Overloading, and C++’s Template Metaprogramming with Template Specializations.</p><h4 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h4><p>It is a form of Polymorphism in which the Terms of a Subtype <code>T</code>, which is related to another Type known as the Supertype <code>T&#39;</code> in some way, can be safely used in any Context where the Terms of <code>T&#39;</code> are used.</p><p>The Concept of Subtyping has gained visibility with the advent of Object Oriented Programming Languages, where it is frequently the case that an Inheritance Based Class Hierarchy forms the basis of Subtyping, and such Safe Substitution is known as the Liskov Substitution Principle.</p><p>However, stepping out of this specific and widely known context, there are several different Schemes of Subtyping. They can be broadly classified along two dimensions: Nominal Subtyping vs. Structural Subtyping and Inclusive Implementations vs. Coercive Implementations.</p><p>Nominal Subtyping requires the Subtyping Relation to be explicitly declared among the two Types. This is the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. In contrast, in Structural Subtyping, a Type <code>T</code> is <strong>implicitly</strong> the Subtype of another Type <code>T&#39;</code> if Terms of <code>T</code> has all the Properties of Terms of <code>T&#39;</code> and can handle all the Messages Terms of <code>T&#39;</code> can handle. This is closely related to Row Polymorphism or the so-called Duck Typing in Dynamically Typed Programming Languages.</p><p>On another dimension, Implementations of Subtyping can be divided into Inclusive Implementations and Coercive Implementations. In Inclusive Implementations, any Term of a Subtype, left unchanged, is <strong>automatically</strong> a Term of a Supertype. This is often the case with the Subtyping based on an Inheritance Based Class Hierarchy frequently encountered in Object Oriented Programming Languages. A Term can have multiple Types in this situation. In contrast, Coercive Implementations are defined by <strong>Type Conversion Functions</strong> from Subtype to Supertype and allow a Term of a Subtype to be <strong>converted</strong> to a Term of a Supertype, such as the case for <code>int</code>‘s, <code>float</code>‘s, and <code>str</code>‘s. It is also worth noticing that applying the Type Coercion Function from <code>A</code> to <code>B</code> and then from <code>B</code> to <code>C</code> might have a different result from directly applying the Type Coercion Function from <code>A</code> to <code>C</code>. For example, <code>str(float(2))</code> returns a value different from <code>str(2)</code>.</p><p>Based on the concept of Subtyping, the concept of Variance reference to how the Subtyping Relations between more complex Types relates to the Subtyping Relations between the simpler Types they include. For example, given that <code>Cat</code> is a Subtype of <code>Animal</code>, should a List of <code>Cat</code>‘s be a Subtype of a List of <code>Animal</code>‘s? What about a Function that takes a Term of Type <code>Cat</code> as an Arugument and a Function that takes a Term of Type <code>Animal</code> as an Arugument?</p><p>Different Programming Languages have different implementations, but most Programming Languages respect the following patterns.</p><ul><li>If the Complex Types are <strong>Read Only and&#x2F;or capable of returning Terms of the Simple Types</strong>, they should have the <strong>same</strong> Subtyping Relations as the Simple Types. This is known as <strong>Covariance</strong>. For example,<ul><li>A read-only List of <code>Cat</code>‘s can be used whenever a read-only List of <code>Animal</code>‘s is required, as each Term read from the read-only List of <code>Cat</code>‘s is of Type <code>Cat</code>, which is a Subtype of <code>Animal</code>. In other words, <code>const List&lt;Cat&gt;</code> <em>is</em> a Subtype of <code>const List&lt;Animal&gt;</code>.</li><li>It is not safe to use a <code>const List&lt;Animal&gt;</code> where a <code>const List&lt;Cat&gt;</code> is required, as a Term read from a <code>const List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. In other words, <code>const List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>const List&lt;Cat&gt;</code>.</li></ul></li><li>If the Complex Types are <strong>Write Only and&#x2F;or capable of accepting Terms of the Simple Types as Parameters</strong>, they should have the <strong>opposite</strong> Subtyping Relations as the Simple Types. This is known as <strong>Contravariance</strong>. For example,<ul><li>A Function that takes a Term of Type <code>Animal</code> as a Parameter may be used where a Function that takes a Term of Type <code>Cat</code> as a Parameter is used, as each Term of Type <code>Cat</code> can also be passed as a Parameter of Type <code>Animal</code>. In other words, <code>Animal -&gt; T</code> <em>is</em> a Subtype of <code>Cat -&gt; T</code>.</li><li>It is not safe to use a <code>Cat -&gt; T</code> where an <code>Animal -&gt; T</code> is required, as a Term of Type <code>Animal</code> may not be passed as a Parameter of Type <code>Cat</code>. In other words, <code>Cat -&gt; T</code> <em>is not</em> a Subtype of <code>Animal -&gt; T</code>.</li></ul></li><li>If the Complex Types are <strong>Read&#x2F;Write</strong>, they should have <strong>no</strong> Subtying Relations. This is known as <strong>Invariance</strong>. For example,<ul><li>A Term written into a <code>List&lt;Animal&gt;</code> need not be of Type <code>Cat</code>, but a Term written into a (non-constant) <code>List&lt;Cat&gt;</code> <em>must</em> be of Type <code>Cat</code>. Thus, it is not safe to use a <code>List&lt;Cat&gt;</code> where a <code>List&lt;Animal&gt;</code> is required. In other words, <code>List&lt;Cat&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Animal&gt;</code>.</li><li>A Term read from a (non-constant) <code>List&lt;Animal&gt;</code> may not be of Type <code>Cat</code>. Thus it is not safe to use a <code>List&lt;Animal&gt;</code> where a <code>List&lt;Cat&gt;</code>is required. In other words, <code>List&lt;Animal&gt;</code> <em>is not</em> a Subtype of <code>List&lt;Cat&gt;</code>.</li></ul></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</a></li><li><a href="https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism">https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism</a></li><li><a href="https://en.wikipedia.org/wiki/Subtyping">https://en.wikipedia.org/wiki/Subtyping</a></li><li><a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a></li></ul><p>Having acquired such Background Knowledge, I will also summarize the insights that I gained while reading these Chapters.</p><h2 id="Acquired-Insights-1"><a href="#Acquired-Insights-1" class="headerlink" title="Acquired Insights"></a>Acquired Insights</h2><p>An empty Bottom Type is useful, both as a way of expressing that a Function is not intended to return and telling the Typechecker that the Term can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial, especially for Downcasting. As blindly following Type Assertions may lead to potentially serious consequences, the Compiler would need to insert a Runtime Type Check, essentially adding the Machinery for Typechecking to the Runtime System. This might incur a significant performance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is a physical relationship between Types, Subtyping generally is more of a <em>logical relationship</em> between Types. For example, in the alternative Coercion Semantics for Subtyping, we can consider that <code>int</code> and <code>float</code>, two Types that do not inherit from one another, have a Subtyping Relation, as they can be converted to one another. In this case, the Subtyping Relation is compiled to Coercions at runtime (instructions physically converting an <code>int</code> to a <code>float</code>, or vice versa), which are much more efficient than virtual function calls frequently seen in an Inheritance Based Class Hierarchy.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 13 and Chapter 14</title>
    <link href="/2023/02/05/Paper-Reading-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/"/>
    <url>/2023/02/05/Paper-Reading-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/</url>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapters 13 and 14 of “Types and Programming Languages” discuss adding Impure Features, also known as Computational Effects, into Simply Typed Lambda Calculus. Specifically, Chapter 13 discusses adding References to Mutable Cells that can be Allocated, Dereferenced, and Assigned and formalizes their Operational Behavior. Chapter 14 gradually adds Raising and Handling Exceptions, starting from a Term <code>error</code> of any Type that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, before supporting Exception Handling, as well as Raising a Value (potentially containing information about what unusual thing happened) as an Exception.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, I believe these two Chapters are written very well, as they progressively add realistic features to Simply Typed Lambda Calculus. I will summarize takeaways from this paper before presenting some questions and comments.</p><h2 id="Takeaways-From-This-Paper"><a href="#Takeaways-From-This-Paper" class="headerlink" title="Takeaways From This Paper"></a>Takeaways From This Paper</h2><h3 id="References-to-Mutable-Cells"><a href="#References-to-Mutable-Cells" class="headerlink" title="References to Mutable Cells"></a>References to Mutable Cells</h3><p>The Formalization of the Operational Behavior of References to Mutable Cells encompasses Allocations (providing an initial value to a Mutable Cell), Dereferences (reading the current value of the referenced Cell), and Assignments (changing the value stored in the referenced Cell), but not Deallocations. Explicit Deallocations lead to the Dangling Reference Problem, which undermines Type Safety. Instead, References to Mutable Cells that are no longer needed should be Garbage Collected.</p><p>An interpretation of how Aliasing makes Program Analysis tricky is that Aliasing essentially sets up “Implicit Communication Channels in the form of Shared State” between different parts of a Program.</p><p>To formalize the Operational Behavior of References to Mutable Cells, we can consider a Reference $l \in L$, where $L$ is the set of Locations of the Program’s Store (a.k.a. Heap Memory) $\mu$.</p><p>As the result of Evaluating an Expression depends on the current contents of the Store and may cause Side Effects for the Store, Evaluation Rules should, in addition to Terms and Types, take the Store as an Argument and return a new Store as part of the result of Evaluating an Expression.</p><p>Furthermore, in a naive implementation of Typing Rules for References to Mutable Cells, the Type of the Reference depends on the Type of the Mutable Cell, e.g., $\frac{\Gamma \vdash \mu(l): T}{\Gamma \vdash l: \text{Ref} : T}$. However, this is inefficient where there are multiple levels of Indirection and is problematic where there are Cyclic References. To solve this problem, the Chapter proposes extending Typing Rules with a Store Typing $\Sigma$, which maps every Location $l \in L$ to a fixed, definite Type. In this case, the Typing Rule is written as $\frac{\Gamma | \Sigma \vdash \Sigma(l): T}{\Gamma | \Sigma \vdash l: \text{Ref} : T}$.</p><h3 id="Raising-and-Handling-Exceptions"><a href="#Raising-and-Handling-Exceptions" class="headerlink" title="Raising and Handling Exceptions"></a>Raising and Handling Exceptions</h3><p>The first (and most straightforward) Approach to Raising and Handling Exceptions, a Term <code>error</code> that completely aborts Evaluation when applied as a Function or passed as an Argument to a Function, effectively simulates Unwinding the Call Stack when it propagates <code>error</code> to the top level.</p><p>The final approach that supports both Exception Handling and Raising a Value as an Exception considers an Exception to be a Value $t_{exp}$ of Type $T_{exp}$ (instead of a Term <code>error</code>). It proposes a Term Constructor <code>raise t_&#123;exp&#125;</code> that describes Raising a Value as an Exception, and models Exception Handling with <code>try t_1 with t_2: T_1</code>, in which $t_1: T_1$ and $t_2: T_{exp} \rightarrow T_1$ (i.e., $t_2$ is a function, called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output). </p><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><p>After reading these two Chapters, the power of Functions as a Universal Abstraction has left a deep impression on me. For example:</p><ul><li>Arrays containing Terms of Type $T$ can be modeled as References to Functions of type $Nat \rightarrow T$. The Referenced Function looks up the Element given an Index.</li><li>Exception Handling is modeled with <code>try t_1 with t_2</code>, in which $t_2$ is a function called when an Exception is Raised, taking a Raised Exception as Input and Returning a Value of the same Type as $t_1$ as Output).</li></ul><p>This describes complex Side Effects in a realistic Programming Language in a Side Effect Free manner that is clean and easy to reason about while not sacrificing Expressiveness. Are there any other complex Side Effects that can be modeled like this using Functions?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Bi-directional type checking</title>
    <link href="/2023/01/30/Paper-Reading-Bi-directional-type-checking/"/>
    <url>/2023/01/30/Paper-Reading-Bi-directional-type-checking/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics in Programming Languages: Type Systems</a>. The original paper can be found <a href="http://www.davidchristiansen.dk/tutorials/bidirectional.pdf">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The paper first explains that except Syntax Directed Systems, Typing Rules cannot be directly translated into Algorithms for Type Checking and Type Inference. It presents a motivating example of this using a Simply Typed Lambda Calculus having Bool and Function as Types and Bool Constants, Variables, Function Abstractions, Function Applications, and Conditional Expressions as Terms, in which the Typing Rule for Function Abstractions cannot be directly translated into a Function for Type Inference.</p><p>It then presents Bidirectional Typing as a remedy to this problem. It explains what Bidirectional Typing is, discusses its advantage, and adds Bidirectional Typing into the previously presented Simply Typed Lambda Calculus, presenting how Bidirectional Typing works during the process.</p><p>Finally, it discusses the limitations of Bidirectional Typing and presents academic literature for further reading.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><p>Overall, I believe this paper is written very well, as I can grasp most of it after reading it. I will summarize my takeaways from this paper before presenting some questions and comments.</p><h2 id="My-Takeaways-From-This-Paper"><a href="#My-Takeaways-From-This-Paper" class="headerlink" title="My Takeaways From This Paper"></a>My Takeaways From This Paper</h2><h3 id="What-Bidirectional-Typing-Is"><a href="#What-Bidirectional-Typing-Is" class="headerlink" title="What Bidirectional Typing Is"></a>What Bidirectional Typing Is</h3><p>Bidirectional Typing splits each Typing Rule $\Gamma \vdash t: T$ into:</p><ul><li>An Inference Rule $\Gamma \vdash t \Rightarrow T$, which <em>infers</em> $t$’s type to be $T$ in Context $\Gamma$.</li><li>A Type Checking Rule $\Gamma \vdash t \Leftarrow T$, which <em>checks</em> $t$’s type to be $T$ in Context $\Gamma$.</li></ul><p>The Inference Rules and Type Checking Rules would work together and call each other.</p><h3 id="Advantages-of-Bidirectional-Typing"><a href="#Advantages-of-Bidirectional-Typing" class="headerlink" title="Advantages of Bidirectional Typing"></a>Advantages of Bidirectional Typing</h3><ul><li>Makes general Typing Rules more Syntax Directed, thus, simplifying implementing Algorithms for Type Checking and Type Inference.</li><li>Requires relatively few additional Type Annotations.</li><li>Produces good error messages that report where the error occurs.</li></ul><h3 id="Limitations-of-Bidirectional-Typing"><a href="#Limitations-of-Bidirectional-Typing" class="headerlink" title="Limitations of Bidirectional Typing"></a>Limitations of Bidirectional Typing</h3><ul><li>Variables in a Derivation can no longer be replaced by the Derivation for a Term of the same Type. This is because Bidirectional Typing uses Inference Mode to check Variables but uses Checking Mode to check many other Terms.</li><li>In some situations, explicit Type Annotations may need to be written within complex Terms, such as a direct Application of a Function Abstraction, like <code>(λ b . if b then false else true) true: Bool</code></li></ul><h2 id="Questions-and-Comments"><a href="#Questions-and-Comments" class="headerlink" title="Questions and Comments"></a>Questions and Comments</h2><ul><li>Page 8 mentions, “remember that the derivation, like the bidirectional typing rules, should be read bottom-to-top and left-to-right.” However, Inference Rules have the form of $\frac{Premise}{Conclusion}$. So, why should the derivation be read from Conclusion to Premise?</li><li>What are the meanings of the small-step rule $\frac{}{t : T \rightarrow t}$ and the large-step rule $\frac{t \Downarrow t’}{t : T \Downarrow t’}$ on Page 8?</li><li>I believe explicit Type Annotations should be enforced for the Parameters within Function Abstractions, such as <code>(λ b: Bool . if b then false else true)</code> instead of <code>(λ b . if b then false else true)</code>.<ul><li>This aligns with real-world programming languages (C++, Java, Rust, Swift, Haskell, etc.)</li><li>This increases readability.</li><li>This simplifies both the Typing Rules and the Inference Rules and Type Checking Rules of Bidirectional Typing.</li></ul></li></ul><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>Small Step Semantics, represented using $\rightarrow$’s, depict <strong>one step in Evaluation</strong>. For example, if $e$ is $true$ itself, $\text{if}: e : \text{then} : e_1 : \text{else} : e_2$ can be Evaluated <strong>in one step</strong> to $e_1$. This can be represented using $\frac{e \rightarrow true}{\text{if}: e : \text{then} : e_1 : \text{else} : e_2 \rightarrow e_1}$</p><p>Big Step Semantics, represented using $\Downarrow$’s, depict <strong>Reducing a Subexpression to a Value through several Small Steps</strong>. For example, if $e$ is a Subexpression that can be Reduced to $true$ after several Small Steps, $\text{if}: e : \text{then} : e_1 : \text{else} : e_2$ can be Reduced to $e_1$ <strong>after several Small Steps</strong>. This can be represented using $\frac{e \Downarrow true}{\text{if}: e : \text{then} : e_1 : \text{else} : e_2 \Downarrow e_1}$.</p><p>Syntax Directed means a one-to-one correspondence between the Type of the Term and the Syntax (Derivation of the Grammar Rules) of the Term.</p><p>There is no precise definition for Bidirectional Typing. Instead, Bidirectional Typing points a direction toward implementing a Type Inference&#x2F;Type Checking Algorithm.</p><p>In Bidirectional Typing, we prefer to start from Inference Mode because if we can Infer the Type of a Term, we can Check the Type of the Term, while Checking falls back on Inference.</p><p>Why is there only a Checking Rule and no Inference Rule for <code>if t then t else t</code>?</p><ul><li>This gives better error messages.<ul><li>Should the Terms in the <code>then</code> branch and the <code>else</code> branch have different types, it is possible to give an error message directly stating this information.</li><li>If an Inference Rule had been proposed instead, it would blame one branch for having a wrong type, which may be confusing and go against programmer intent.</li></ul></li></ul><p>We can read Typing Rules either from top to bottom or from bottom to top, with slightly different interpretations.</p><ul><li>Reading from top to bottom describes how to use the information for Type Checking.</li><li>Reading from bottom to top describes how a Type Inference Algorithm works, e.g., what needs to be Checked to Infer the Type of a Term.</li></ul><p>From a historical perspective, there are two Design Philosophies for Type Systems.</p><ul><li>The first is to augment a Programming Language with more information, such as C which uses it to determine how much space a variable would take up in memory.</li><li>The second is to express programmer intent.</li></ul><p>Type Annotations (Ascriptions) for Parameters are required for Functions that are not immediately used, such as Top Level Functions. However, it is helpful to omit Type Annotations (Ascriptions) for Parameters for immediately used Lambda Terms within Higher Order Functions.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 9 and Chapter 11</title>
    <link href="/2023/01/25/Paper-Reading-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/"/>
    <url>/2023/01/25/Paper-Reading-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/</url>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Chapter 9 of “Types and Programming Languages” presents the simply typed lambda calculus, which constructs a type system for pure lambda calculus, explaining theoretical aspects such as the typing relation and the Curry-Howard Correspondence along the way.</p><p>Chapter 11 introduces simple extensions to the simply typed lambda calculus presented in Chapter 9, such as base types, derived forms, type ascriptions, let bindings, and some compound data structures (pairs, tuples, records, sums, variants, and lists), making it better resemble a real-world programming language.</p><h1 id="Critique"><a href="#Critique" class="headerlink" title="Critique"></a>Critique</h1><h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>I have found the textbook hard to follow in many places. Thus, I have followed the textbook and looked into many online resources to grasp the content. Below summarizes my understanding after studying the material.</p><h2 id="Basic-Concepts-in-Type-Theory"><a href="#Basic-Concepts-in-Type-Theory" class="headerlink" title="Basic Concepts in Type Theory"></a>Basic Concepts in Type Theory</h2><h3 id="Terms-and-Types"><a href="#Terms-and-Types" class="headerlink" title="Terms and Types"></a>Terms and Types</h3><p>In Type Theory, every Term has a Type, often written together as <code>&lt;Term&gt;: &lt;Type&gt;</code>. Types include Natural Numbers (<code>nat</code>) and Boolean Logic Values (<code>bool</code>). For example (assuming <code>x: nat</code> and <code>y: nat</code>):</p><ul><li><code>0: nat</code></li><li><code>x: nat</code></li><li><code>1 + 1: nat</code></li><li><code>x + y: nat</code></li><li><code>true: bool</code></li><li><code>x + y: nat</code></li></ul><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>Functions are also Terms with Types, represented as Lambda Terms.</p><p>A Lambda Term looks like <code>(λ &lt;First Parameter Name&gt;: &lt;First Parameter Type&gt; &lt;Second Parameter Name&gt;: &lt;Second Parameter Type&gt; ... . &lt;Term to Return&gt;)</code>.</p><p>It has type <code>&lt;First Parameter Type&gt; → &lt;Second Parameter Type&gt; → ... → &lt;Type of Term to Return&gt;</code>. This indicates that the Lambda Term is a function that takes Parameters of <code>&lt;First Parameter Type&gt;</code>, <code>&lt;Second Parameter Type&gt;</code>, etc., and returns a Term of <code>&lt;Type of Term to Return&gt;</code>.</p><p>Examples of Lambda Terms:</p><ul><li><code>(λ x: nat . (x + x)): nat → nat</code>: a Function which takes in a Parameter <code>x</code> of Type <code>nat</code> and returns the doubled Parameter.</li><li><code>(λ x: nat y: nat . (x + y)): nat → nat → nat</code>: a Function which takes in two Parameters <code>x</code>, <code>y</code> all of Type <code>nat</code> and returns their sum.</li></ul><p>A Lambda Term is often called an Anonymous Function because it has no Name. We can use the notion to give a Name to a Lambda Term:</p><ul><li><code>add: nat → nat → nat ::= (λ x: nat y: nat . (x + y))</code></li></ul><h3 id="Function-Applications"><a href="#Function-Applications" class="headerlink" title="Function Applications"></a>Function Applications</h3><p>In Type Theory, a Function Call is called a Function Application, which “takes a Term of a Type and results in a Term of another Type.” Function Application is written as <code>&lt;Function&gt; &lt;Argument&gt; &lt;Argument&gt; ...</code> (akin to Function Calls in Haskell and Commands in Unix Shell) instead of the conventional <code>&lt;Function&gt;(&lt;Argument&gt;, &lt;Argument&gt;, ...)</code> in Programming Languages.</p><p>If we define a Function <code>add</code> that takes two <code>nat</code>‘s and returns a <code>nat</code>, the following are valid Terms:</p><ul><li><code>add 0 0: nat</code></li><li><code>add 2 3: nat</code></li><li><code>add 1 (add 1 (add 1 0)): nat</code></li></ul><h3 id="Dependent-Typing"><a href="#Dependent-Typing" class="headerlink" title="Dependent Typing"></a>Dependent Typing</h3><p>Sometimes, the Type returned by a Function depends on the Value of its Argument. This is known as Dependent Typing. </p><p>For example, a function <code>if</code> takes three arguments, with <code>if true b c</code> returning <code>b</code>, and  <code>if false b c</code> returning <code>c</code>. If <code>b</code> and <code>c</code> have different Types, then the type of <code>if</code> depends on the value of <code>a</code>.</p><p>Dependent Typing is a reasonably complicated subject that is an active domain of research.</p><h3 id="Zero-Type-Unit-Type-and-Universal-Type"><a href="#Zero-Type-Unit-Type-and-Universal-Type" class="headerlink" title="Zero Type, Unit Type, and Universal Type"></a>Zero Type, Unit Type, and Universal Type</h3><h4 id="Zero-Type"><a href="#Zero-Type" class="headerlink" title="Zero Type"></a>Zero Type</h4><p>In some programming languages, there is a <strong>Zero Type</strong> or <strong>Bottom Type</strong> - a Type whose Set of Terms is the empty set and a Subtype of all other Types.</p><p>In these programming languages, denoting the Zero Type as a Function’s Return Type frequently indicates that <strong>the Function never returns (never completes computation) - instead, it may loop forever, throw an exception, or terminate the process</strong>.</p><p>As a real-world example, in Rust, the Zero Type is called the Never Type and is denoted by !. It is the kind of calculation that never returns any result. For example, the exit function <code>fn exit(code: i32) -&gt; !</code> terminates the process without returning.</p><h4 id="Unit-Type"><a href="#Unit-Type" class="headerlink" title="Unit Type"></a>Unit Type</h4><p>In some programming languages, the <strong>Unit Type</strong> is a Type whose Set of Terms is a singleton set, i.e., the type allows only one value. <strong>It is typically used to describe the Argument Type of a Function that doesn’t need arguments or the Return Type of a Function whose only goal is to have a side effect.</strong> For example:</p><ul><li>In Haskell, Rust, and Elm, the Unit Type is the Type of the 0-tuple <code>()</code>.</li><li>In Python, the Unit Type is <code>NoneType</code>, which only has a single instance <code>None</code>.</li><li>In JavaScript, both <code>Null</code> (which only has a single instance <code>null</code>) and <code>Undefined</code> (which only has a single instance <code>undefined</code>) are Unit Types.</li></ul><p>In languages such as C, C++, Java, and C#, <code>void</code>, which designates that a Function accepts no Arguments or does not return anything, plays a similar role to the Unit Type. However, there are also key differences:</p><ul><li>There are no Terms (Instances) of <code>void</code>.</li><li>A proper Unit Type may always be the Type of an Argument to a Function, but <code>void</code> cannot be the Type of an Argument.</li></ul><h4 id="Universal-Type"><a href="#Universal-Type" class="headerlink" title="Universal Type"></a>Universal Type</h4><p>Most object-oriented programming languages include a universal base class. In Type Theory, this is known as a <strong>Universal Type</strong> or a <strong>Top Type</strong>. Its Set of Terms encompasses any valid Term in the programming language, and all other types in the programming language are subtypes. For example:</p><ul><li><code>Object</code> in Smalltalk and JavaScript</li><li><code>java.lang.Object</code> in Java</li><li><code>System.Object</code> in C#, Visual Basic .NET, and other .NET Framework languages</li><li><code>object</code> in Python (can also be type-annotated as <code>typing.Any</code>)</li><li><code>Any</code> in Scala and Julia</li></ul><p>Some object-oriented programming languages, such as C++, Objective-C, and Swift, do not have a universal base class. In these languages, some constructs function similarly to the Universal Type.</p><ul><li>In C++, <code>void *</code> can accept any non-function pointer (even though <code>void</code> itself is more akin to the Unit Type).</li><li>In Objective-C, <code>id</code> can accept pointers to any object.</li><li>In Swift, the protocol <code>Any</code> can accept any type.</li></ul><p>Languages that are not object-oriented usually do not have a Universal Type.</p><h3 id="Typing-Context"><a href="#Typing-Context" class="headerlink" title="Typing Context"></a>Typing Context</h3><p>A Typing Context (or Typing Environment) $\Gamma$ is a Mapping from Terms to Types (or a collection of Term - Type Pairs). The judgement $\Gamma \vdash e: \tau$ is read as “$e$ has type $\tau$ in Context $\Gamma$”.</p><p>In Statically Typed Programming Languages, these Typing Contexts are used and maintained by Typing Rules to Type Check a given Program or Expression.</p><h3 id="Type-Inhabitation"><a href="#Type-Inhabitation" class="headerlink" title="Type Inhabitation"></a>Type Inhabitation</h3><p>Given a Typing Environment, a Type is <strong>inhabitated</strong> if an existing Term of the Type is available or a Term of the Type can be readily obtained (i.e., via Function Application).</p><h3 id="Derived-Forms"><a href="#Derived-Forms" class="headerlink" title="Derived Forms"></a>Derived Forms</h3><p>In Type Theory, Syntactic Sugar is known as <strong>Derived Forms</strong>, while replacing a Derived Form with its lower-level definition (usually during compile time) is known as <strong>desugaring</strong>. For example:</p><ul><li>In C, <code>a[i]</code> and <code>*(a + 1)</code>, <code>a-&gt;x</code> and <code>(*a).x</code>.</li><li>In the tidyverse collection of R packages, <code>x %&gt;% f(y)</code> is equivalent to <code>f(x, y)</code>.</li></ul><p>A programming language is typically divided into a compact core language, <strong>a rich set of syntax defined in terms of that core (Derived Forms)</strong>, and a comprehensive standard library. This makes the language maintainable for engineers while making it convenient for users.</p><h3 id="Type-Ascription"><a href="#Type-Ascription" class="headerlink" title="Type Ascription"></a>Type Ascription</h3><p><strong>Type Ascription</strong> is an assertion within source code that a term has a particular type. This can lead to cleaner, easier-to-understand code documentation. </p><h2 id="Important-Derived-Forms"><a href="#Important-Derived-Forms" class="headerlink" title="Important Derived Forms"></a>Important Derived Forms</h2><ul><li>Tuple</li><li>Record (Struct, Rows in a Database) - a collection of Fields, possibly of different Types</li><li>Variant (Datatype, Tagged Union, Discriminated Union, Disjoint Union)<ul><li>A data structure to hold a Term that could take on “several different, but fixed Types.”</li><li>Contains a Value field and a Tag field</li><li>Widely used for defining recursive data structures (e.g. Trees containing Leaves and Internal Nodes)</li></ul></li><li>List</li></ul><h2 id="Curry-Howard-Correspondence"><a href="#Curry-Howard-Correspondence" class="headerlink" title="Curry-Howard Correspondence"></a>Curry-Howard Correspondence</h2><p>The Curry-Howard Correspondence, independently discovered by logicians Haskell Curry in 1958 and William Howard in 1969, states that “proofs in a given subset of mathematics are exactly programs from a particular programming language”. Specifically,</p><ul><li>Types correspond to logical formulas.<ul><li>A Term having a Type can be understood as evidence that the Type is inhabited. For example, <code>3110: int</code> is evidence that <code>int</code> is inhabited.</li><li>Logical Atoms $a$, $b$ correspond to whether Types <code>A</code>, <code>B</code> are inhabited.<ul><li><code>true</code> corresponds to a Type that is always inhabited. The simplest of them all is the Unit Type.</li><li><code>false</code> corresponds to a Type that is never inhabited - the Zero Type.</li></ul></li><li>Conjunction $a \land b$ corresponds to a Type inhabited when both Types <code>A</code> and <code>B</code> are inhabited - <code>Tuple[A, B]</code>.</li><li>Disjunction $a \lor b$ with the added condition that <strong>you know which one of $a$, $b$ is true when $a \lor b$ is true</strong> corresponds to a Type that is inhabited when one of <code>A</code>, <code>B</code> is inhabited, and you know which one is inhabited - <code>Variant[A, B]</code>.</li><li>Implication $a \rightarrow b$ corresponds to a Type that, when inhibited, ensures <code>B</code> must be inhabited when <code>A</code> is inhabited - a Function Type, <code>A -&gt; B</code>.</li></ul></li><li>Programs correspond to proofs.</li><li>Analyzing the types of expressions evaluated during the execution of a program corresponds to simplifying a proof.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Type_theory">https://en.wikipedia.org/wiki/Type_theory</a></li><li><a href="https://en.wikipedia.org/wiki/Bottom_type">https://en.wikipedia.org/wiki/Bottom_type</a></li><li><a href="https://en.wikipedia.org/wiki/Typing_environment">https://en.wikipedia.org/wiki/Typing_environment</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/277197/is-there-a-reason-to-have-a-bottom-type-in-a-programming-language">https://softwareengineering.stackexchange.com/questions/277197/is-there-a-reason-to-have-a-bottom-type-in-a-programming-language</a></li><li><a href="https://stackoverflow.com/questions/32505911/what-is-the-role-of-bottom-%E2%8A%A5-in-haskell-function-definitions">https://stackoverflow.com/questions/32505911/what-is-the-role-of-bottom-%E2%8A%A5-in-haskell-function-definitions</a></li><li><a href="https://doc.rust-lang.org/std/primitive.never.html">https://doc.rust-lang.org/std/primitive.never.html</a></li><li><a href="https://en.wikipedia.org/wiki/Unit_type">https://en.wikipedia.org/wiki/Unit_type</a></li><li><a href="https://en.wikipedia.org/wiki/Top_type">https://en.wikipedia.org/wiki/Top_type</a></li><li><a href="https://cs3110.github.io/textbook/chapters/adv/curry-howard.html#types-correspond-to-propositions">https://cs3110.github.io/textbook/chapters/adv/curry-howard.html#types-correspond-to-propositions</a></li><li><a href="https://wiki.haskell.org/Curry-Howard-Lambek_correspondence">https://wiki.haskell.org/Curry-Howard-Lambek_correspondence</a></li><li><a href="https://www.pédrot.fr/slides/inria-junior-02-15.pdf">https://www.pédrot.fr/slides/inria-junior-02-15.pdf</a></li><li><a href="https://math.stackexchange.com/questions/2686280/what-do-logicians-mean-by-type">https://math.stackexchange.com/questions/2686280/what-do-logicians-mean-by-type</a></li><li><a href="https://homepages.inf.ed.ac.uk/stg/NOTES/node35.html">https://homepages.inf.ed.ac.uk/stg/NOTES/node35.html</a></li><li><a href="https://cs.wellesley.edu/~cs251/s02/scheme-intro.pdf">https://cs.wellesley.edu/~cs251/s02/scheme-intro.pdf</a></li><li><a href="https://cs.brown.edu/~sk/Publications/Papers/Published/pk-resuarging-types/paper.pdf">https://cs.brown.edu/~sk/Publications/Papers/Published/pk-resuarging-types/paper.pdf</a></li><li><a href="https://en.wikipedia.org/wiki/Syntactic_sugar">https://en.wikipedia.org/wiki/Syntactic_sugar</a></li><li><a href="https://www.wikidata.org/wiki/Q73072308">https://www.wikidata.org/wiki/Q73072308</a></li><li><a href="https://stackoverflow.com/questions/36389974/what-is-type-ascription">https://stackoverflow.com/questions/36389974/what-is-type-ascription</a></li><li><a href="https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md">https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md</a></li><li><a href="https://medium.com/@andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427">https://medium.com/@andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427</a></li><li><a href="https://docs.scala-lang.org/style/types.html">https://docs.scala-lang.org/style/types.html</a></li><li><a href="https://futhark-lang.org/examples/type-ascriptions.html">https://futhark-lang.org/examples/type-ascriptions.html</a></li><li><a href="https://en.wikipedia.org/wiki/Record_(computer_science)">https://en.wikipedia.org/wiki/Record_(computer_science)</a></li><li><a href="https://en.m.wikipedia.org/wiki/List_(abstract_data_type)">https://en.m.wikipedia.org/wiki/List_(abstract_data_type)</a></li></ul><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>An Introduction Rule describes how Elements of the Type can be Created, and is akin to a description of a Constructor. Similarly, an Elimination Rule describes how Elements of the Type can be used in an Expression, and is akin to a description of an Overloaded Operator.</p><p>A lot of papers propose Typing Rules that don’t make much sense in isolation, but can be plugged into other Type Systems to add a Feature (i.e., allow the non-intrusive addition of other Typing Rules).</p><p>Well-designed Type Systems provide guarantees on a program’s behavior (i.e., guarantee predictable runtime behavior).</p><p>C introduced types, not for verification, but to determine how much space a variable would take up in memory.</p><p>Uniqueness of Typing (i.e., a Term can only have one Type) doesn’t hold when there is Subtyping.</p><p>Curry Style allows representing errors explicitly and describing the type of errors, which is suitable for languages where things can go wrong. In comparision, Church Style does not allow errors</p><p>The Erasure Property is built upon the assumption that the Execution of the Program doesn’t rely on Types.</p><p>Type Ascription woule be beneficial for giving hints to the Type Inference&#x2F;Type Checking Algorithm.</p><p>Usually, Desugaring happens before Type Checking, as the Type System does not directly handle the Syntactic Sugar. </p><p>Tuples are also called Sum Types, and Variants are also called Product Types. This is based on how many possible values the Tuple or Variant Type has. For example, <code>std::pair&lt;char, bool&gt;</code> has <code>256 * 2 = 512</code> values, <code>std::variant&lt;char, bool&gt;</code> has <code>256 + 2 = 258</code> values, and <code>std::optional&lt;char&gt;</code> has <code>256 + 1 = 257</code> values.</p><p>Enums can be seen as Variants where each value is associated with the Unit Type.</p><p>Tuples and Records are distinct Types because Compilers implement them differently</p><p>Programming in Dynamically Typed Programming is akin to programming with variables which are Variants of all possible types.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Modules Within PySide6 for Cross-platform GUI Building and System API Calling</title>
    <link href="/2023/01/02/Modules-Within-PySide6-for-Cross-platform-GUI-Building-and-System-API-Calling/"/>
    <url>/2023/01/02/Modules-Within-PySide6-for-Cross-platform-GUI-Building-and-System-API-Calling/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Brief-Introduction-to-Qt"><a href="#A-Brief-Introduction-to-Qt" class="headerlink" title="A Brief Introduction to Qt"></a>A Brief Introduction to Qt</h1><p>Qt is a C++ library with <a href="https://www.qt.io/qt-for-python">official Python bindings</a> that allows creating GUIs and cross-platform applications targeting different software and hardware platforms, such as Linux, Windows, macOS, Android, or embedded systems, with little to no change to the underlying codebase, while still having native capabilities, speed, and “look and feel”.</p><p>There are several advantages of using Qt, including:</p><ul><li>Well-designed object-oriented framework.</li><li>Excellent documentation.</li><li>Large user base.</li><li>Widely endorsed. Many industrial-grade cross-platform software use Qt, including Autodesk Maya, Autodesk 3ds Max, Google Earth, Mathematica, OBS Studio, QGIS, Sibelius, Teamviewer, VirtualBox, VLC media player, Wireshark, and WPS Office.</li></ul><h1 id="Modules-Within-PySide6"><a href="#Modules-Within-PySide6" class="headerlink" title="Modules Within PySide6"></a>Modules Within PySide6</h1><p>To aid use, we have summarized the relevant modules of <a href="https://www.qt.io/qt-for-python">PySide6</a>, Qt’s official Python bindings.</p><ul><li><code>PySide6.QtCore</code>: Qt’s essential classes, including platform-independent command-line parsing, multithreading, date and time utilities, object serialization, etc. <strong>Most of these features have already been introduced into the C++ and Python standard libraries.</strong> However, we should pay attention to <strong>Qt’s event handling mechanism</strong> - a mechanism for emitting events in the form of objects across threads (known as signals), and handling these events in designated functions (known as slots).</li></ul><h2 id="Modules-Related-to-Building-GUIs"><a href="#Modules-Related-to-Building-GUIs" class="headerlink" title="Modules Related to Building GUIs"></a>Modules Related to Building GUIs</h2><p>The modules of PySide6 directly related to building GUIs are as follows:</p><ul><li><code>PySide6.QtGui</code>: Classes used internally by Qt’s user interface technologies, including classes for windowing system integration, event handling, OpenGL and OpenGL ES integration, 2D graphics, basic imaging, fonts, and text.</li><li><code>PySide6.QtWidgets</code>: <strong>Provides a set of UI elements to create classic desktop-style user interfaces. All UI elements, including user-defined ones, inherit from <code>PySide6.QtWidgets.QtWidget</code>.</strong></li><li><code>PySide6.QtMultimediaWidgets</code>: Provides multimedia-related widgets and controls.</li><li><code>PySide6.QtOpenGL</code>, <code>PySide6.QtOpenGLWidgets</code>: Used to support the OpenGL widget class, which operates similarly to other Qt widgets with the exception that it opens an OpenGL display buffer whose contents can be rendered using the OpenGL API.</li><li><code>PySide6.QtPdf</code>, <code>PySide6.QtPdfWidgets</code>: Classes for rendering pages from PDF documents.</li><li><code>PySide6.QtWebEngineCore</code>, <code>PySide6.QtWebEngineWidgets</code>: Provides a Chromium web browser engine as well as C++ classes to render web content and interact with it.</li></ul><h2 id="Modules-Related-to-System-API-Calling"><a href="#Modules-Related-to-System-API-Calling" class="headerlink" title="Modules Related to System API Calling"></a>Modules Related to System API Calling</h2><p>Qt is more than a GUI framework. It also provides a cross-platform way of doing a lot of stuff that desktop applications often need to do - calling into system APIs, especially platform-specific multimedia APIs not covered by the POSIX standard and&#x2F;or the C++ and Python standard libraries.</p><p><img src="https://cdn.vectorstock.com/i/1000x1000/31/10/multimedia-design-vector-4393110.webp" alt="Stock Image: Multimedia"></p><p>To better document this crucial yet often overlooked use case, we have summarized the relevant modules of PySide6.</p><ul><li><code>PySide6.QtBluetooth</code>: Enables connectivity between Bluetooth enabled devices. Currently the API is supported to different degrees on Android, iOS, macOS, Linux, and Windows.</li><li><code>PySide6.QtMultimedia</code>: Provides APIs for rendering audio and video files on screen and playing them back, as well as a thorough API for recording audio and video via system cameras and microphones.</li><li><code>PySide6.QtNfc</code>: Provides APIs for dealing with NFC Forum Tags and NFC Forum Devices, including target identification and loss, the registration of NDEF message handlers, the reading and writing of NDEF messages on NFC Forum Tags, and the sending of tag-specific commands.</li><li><code>PySide6.QtPositioning</code>: Allows developers to locate themselves using a variety of sources, such as satellite, wifi, text files, and so on. The position on a map, for instance, can be determined using that information. Additionally, it is possible to retrieve satellite data and carry out area-based monitoring. Currently the API is supported on Android, iOS, macOS, Linux, and Windows (with GPS receivers exposed as a serial port providing NMEA sentences or using Windows.Devices.Geolocation).</li><li><code>PySide6.QtPrintSupport</code>: Offers broad cross-platform printing capability, including printing to attached printers, printing to remote printers over networks, and creating PDF files.</li><li><code>PySide6.QtSensors</code>: Provides access to sensor hardware. Currently the API is supported on Android, iOS, and Windows (MSVC).</li></ul><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Qt_(software)">https://en.wikipedia.org/wiki/Qt_(software)</a></li><li><a href="https://www.quora.com/What-are-the-Pros-and-Cons-of-using-QT-framework-for-cross-platform-programming-Win-Mac">https://www.quora.com/What-are-the-Pros-and-Cons-of-using-QT-framework-for-cross-platform-programming-Win-Mac</a></li><li><a href="https://wiki.qt.io/Qt_for_Python">https://wiki.qt.io/Qt_for_Python</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
      <category>PySide6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Date and Time Types in Python</title>
    <link href="/2022/12/31/Date-and-Time-Types-in-Python/"/>
    <url>/2022/12/31/Date-and-Time-Types-in-Python/</url>
    
    <content type="html"><![CDATA[<p>There are many types in Python which can store date and time information. These types can be broadly divided into two categories:</p><h1 id="JSON-Serializable-Formats"><a href="#JSON-Serializable-Formats" class="headerlink" title="JSON Serializable Formats"></a>JSON Serializable Formats</h1><ul><li>UNIX Timestamp (e.g. <code>0</code>)</li><li>ISO 8601 String (e.g. <code>&#39;1970-01-01T00:00:00&#39;</code>)</li></ul><p>UNIX Timestamp has its roots in the system time of Unix operating systems. It is now widely used in databases, programming languages, file systems, and other computer operating systems. It counts the number of seconds that have passed since the Unix epoch began on January 1, 1970 at 00:00:00 UTC, minus any modifications made for leap seconds.</p><p>ISO 8601 is an international standard for the transmission and interchange of time- and date-related information on a global scale. Dates in the Gregorian calendar, hours based on the 24-hour timekeeping system, with an optional UTC offset, time intervals, and combinations of these are covered by ISO 8601. The standard offers a clear, unambiguous manner of expressing calendar dates and times in international communications, notably to prevent numeric dates and times from being misinterpreted when such data is sent between nations.</p><p>As the categorization suggests, these formats can be used in JSON serialization, and are widely adopted in data exchange formats and APIs. For example, Stripe APIs use UNIX Timestamps, while Twitter and Dropbox APIs use ISO 8601 Strings. UNIX Timestamps are easier and more efficient to handle, while ISO 8601 Strings have the virtue of being human-readable.</p><h1 id="Widely-Used-In-Memory-Data-Structures"><a href="#Widely-Used-In-Memory-Data-Structures" class="headerlink" title="Widely Used In Memory Data Structures"></a>Widely Used In Memory Data Structures</h1><ul><li><code>datetime.datetime</code> (e.g. <code>datetime.datetime(1970, 1, 1, 0, 0)</code>)</li><li><code>datetime.date</code> (e.g. <code>datetime.date(1970, 1, 1)</code>)</li><li><code>pandas.Timestamp</code> (e.g. <code>Timestamp(&#39;1970-01-01 00:00:00&#39;)</code>)</li></ul><p>As the categorization suggests, these formats are in-memory, structured representations of date and time information.</p><p><code>datetime.datetime</code> and <code>datetime.date</code> are types implemented (and widely used) in the Python Standard Library. <code>datetime.date</code> represents a date (year, month, day) in an idealized calendar, which is the existing Gregorian calendar infinitely stretched in both directions, while <code>datetime.datetime</code> also combines the data from a time object (hour, minute, second, microsecond).</p><p><code>pandas.Timestamp</code> is implemented in <code>pandas</code>. It is the <code>pandas</code> replacement for <code>datetime.datetime</code>, and is the type used for the entries that make up a <code>pandas.DatetimeIndex</code>, and other time series-oriented data structures in <code>pandas</code>. Furthermore, it is also widely used across the Python Ecosystem for Data Science, such as being used by <code>matplotlib</code> as the <code>xticks</code> for plotting a <code>pandas.Series</code> with a <code>pandas.DatetimeIndex</code>, as shown below.</p><p><img src="https://i.stack.imgur.com/gLpr4.png" alt="`pandas.Timestamp` is the type used for the entries that make up a `pandas.DatetimeIndex`, and is used by `matplotlib` as the `xticks` for plotting a `pandas.Series` with a `pandas.DatetimeIndex`"></p><h1 id="Converting-Between-These-Types"><a href="#Converting-Between-These-Types" class="headerlink" title="Converting Between These Types"></a>Converting Between These Types</h1><p>With so many types in Python which can store date and time information, it is important to know how to convert between them. The following State Diagram depicts how we should perform the conversions.</p><pre><code class=" mermaid">stateDiagram    state &quot;UNIX Timestamp&quot; as UNIXTimestamp: 0    state &quot;ISO 8601 String&quot; as ISO8601String: &#x27;1970-01-01T00:00:00&#x27;    state &quot;datetime.datetime&quot; as DatetimeDatetime: datetime.datetime(1970, 1, 1, 0, 0)    state &quot;datetime.date&quot; as DatetimeDate: datetime.date(1970, 1, 1)    state &quot;pandas.Timestamp&quot; as PandasTimestamp: Timestamp(&#x27;1970-01-01 00:00:00&#x27;)      UNIXTimestamp --&gt; DatetimeDatetime: datetime.datetime.fromtimestamp function    UNIXTimestamp --&gt; PandasTimestamp: constructor    ISO8601String --&gt; DatetimeDatetime: isoformat method    ISO8601String --&gt; PandasTimestamp: constructor    DatetimeDatetime --&gt; UNIXTimestamp: datetime.datetime.timestamp function    DatetimeDatetime --&gt; ISO8601String: datetime.datetime.fromiso function    DatetimeDatetime --&gt; DatetimeDate: date method    DatetimeDatetime --&gt; PandasTimestamp: constructor    DatetimeDate --&gt; PandasTimestamp: pandas.Timestamp constructor    PandasTimestamp --&gt; UNIXTimestamp: timestamp method    PandasTimestamp --&gt; ISO8601String: isoformat method    PandasTimestamp --&gt; DatetimeDatetime: to_pydatetime method</code></pre><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a></li><li><a href="https://en.wikipedia.org/wiki/ISO_8601">https://en.wikipedia.org/wiki/ISO_8601</a></li><li><a href="https://dev.to/xngwng/do-you-prefer-unix-epoch-a-number-or-iso-8601-a-string-for-timestamps--28ll">https://dev.to/xngwng/do-you-prefer-unix-epoch-a-number-or-iso-8601-a-string-for-timestamps--28ll</a></li><li><a href="https://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp">https://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp</a></li><li><a href="https://www.dataquest.io/blog/tutorial-time-series-analysis-with-pandas/">https://www.dataquest.io/blog/tutorial-time-series-analysis-with-pandas/</a></li><li><a href="https://www.programiz.com/python-programming/datetime/timestamp-datetime">https://www.programiz.com/python-programming/datetime/timestamp-datetime</a></li><li><a href="https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date">https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date</a></li><li><a href="https://stackoverflow.com/questions/969285/how-do-i-translate-an-iso-8601-datetime-string-into-a-python-datetime-object">https://stackoverflow.com/questions/969285/how-do-i-translate-an-iso-8601-datetime-string-into-a-python-datetime-object</a></li><li><a href="https://www.programiz.com/python-programming/datetime/timestamp-datetime">https://www.programiz.com/python-programming/datetime/timestamp-datetime</a></li><li><a href="https://pynative.com/python-iso-8601-datetime/">https://pynative.com/python-iso-8601-datetime/</a></li><li><a href="https://docs.python.org/3/library/datetime.html">https://docs.python.org/3/library/datetime.html</a></li><li><a href="https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python">https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html">https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html</a></li><li><a href="https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python">https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python</a></li><li><a href="https://stackoverflow.com/questions/41046630/set-time-formatting-on-a-datetime-index-when-plotting-pandas-series">https://stackoverflow.com/questions/41046630/set-time-formatting-on-a-datetime-index-when-plotting-pandas-series</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Social Media Strategy (tentative)</title>
    <link href="/2022/12/31/Social-Media-Strategy-tentative/"/>
    <url>/2022/12/31/Social-Media-Strategy-tentative/</url>
    
    <content type="html"><![CDATA[<p>Social media accounts are windows that exhibit our image to the public, and we must pay attention to them. However, on the one hand, the use of social media should complement, and not negatively affect, our routine work, study, and life patterns; on the other hand, different social media platforms generally differ in terms of appropriate content to display. After a period of observation and reflection, we have developed the following social media strategy to address these issues, as depicted in the Bipartite Graph below.</p><pre><code class=" mermaid">stateDiagramstate &quot;Life Moments&quot; as LifeMomentsstate &quot;Reflections on Life&quot; as ReflectionsOnLifestate &quot;Work Moments&quot; as WorkMomentsstate &quot;Reflections on Work&quot; as ReflectionsOnWorkstate &quot;Reflections on Development&quot; as ReflectionsOnDevelopmentstate &quot;Detailed Explanations&quot; as DetailedExplanationsstate &quot;Planning&quot; as Planningstate &quot;Instagram&quot; as Instagramstate &quot;小红书&quot; as XiaoHongShustate &quot;WeChat&quot; as WeChatstate &quot;QQ&quot; as QQstate &quot;LinkedIn&quot; as LinkedInstate &quot;Blog&quot; as Blog    LifeMoments --&gt; Instagram    LifeMoments --&gt; XiaoHongShu    LifeMoments --&gt; WeChat    LifeMoments --&gt; QQ        ReflectionsOnLife --&gt; XiaoHongShu    ReflectionsOnLife --&gt; Twitter    ReflectionsOnLife --&gt; WeChat    ReflectionsOnLife --&gt; QQ    WorkMoments --&gt; Twitter    WorkMoments --&gt; WeChat    WorkMoments --&gt; QQ    ReflectionsOnWork --&gt; Twitter    ReflectionsOnWork --&gt; WeChat    ReflectionsOnWork --&gt; QQ    ReflectionsOnDevelopment --&gt; LinkedIn        DetailedExplanations --&gt; Blog        Planning --&gt; Blog</code></pre><p>In addition, a pain point we will encounter is that we will post some content to both Chinese and English social media platforms. To overcome this problem, we can first write a Chinese (or English) version and use automated tools such as Google Translate and DeepL before manually touching up the machine-translated version.</p><p>Furthermore, to boost the following of our social media accounts, when we need to share the content posted on social media with others via private chat, we can share the link of the content posted to social media instead of copying and pasting the content itself.</p>]]></content>
    
    
    <categories>
      
      <category>Planning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Command-line HTTP Servers for Rapid File Sharing</title>
    <link href="/2022/12/26/Command-line-HTTP-Servers-for-Rapid-File-Sharing/"/>
    <url>/2022/12/26/Command-line-HTTP-Servers-for-Rapid-File-Sharing/</url>
    
    <content type="html"><![CDATA[<p>Sometimes, we need an ad-hoc, quick-and-dirty way of sharing files with others while maintaining complete control of the data transmission.</p><ul><li>We should not store our data on any third-party servers.</li><li>The connections established through the network should be point-to-point.</li></ul><p>Being supported by virtually every Internet-capable device and from both command-line tools (such as wget and curl) and graphical Web browsers, the HTTP protocol is one of our best bets. Thus, we have compiled a list of command-line HTTP servers that enable rapid file sharing and compare their features.</p><h1 id="python3-m-http-server"><a href="#python3-m-http-server" class="headerlink" title="python3 -m http.server"></a><a href="https://docs.python.org/dev/library/http.server.html">python3 -m http.server</a></h1><p>The Python standard library has a barebones built-in HTTP server. Not recommended for production.</p><ul><li>Language: Python</li></ul><h1 id="mjpclab-x2F-go-http-file-server"><a href="#mjpclab-x2F-go-http-file-server" class="headerlink" title="mjpclab&#x2F;go-http-file-server"></a><a href="https://github.com/mjpclab/go-http-file-server">mjpclab&#x2F;go-http-file-server</a></h1><p>Simple command line based HTTP file server to share local file system.</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>Frontend Features:<ul><li>File Upload</li><li>File Delete</li><li>Create Subdirectory</li><li>Download the Current Directory as an Archive</li></ul></li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTP Strict Transport Security (HSTS)</li><li>HTTPS</li></ul></li><li>GitHub Stars: 175</li><li>Language: Go</li></ul><h1 id="mar10-x2F-wsgidav"><a href="#mar10-x2F-wsgidav" class="headerlink" title="mar10&#x2F;wsgidav"></a><a href="https://github.com/mar10/wsgidav">mar10&#x2F;wsgidav</a></h1><p>A generic and extendable WebDAV server written in Python and based on WSGI.</p><ul><li>Features:<ul><li>HTTP Range Requests</li></ul></li><li>GitHub Stars: 640</li><li>Language: Python</li><li>Multithreaded</li><li>WebDAV Server</li></ul><h1 id="TheWaWaR-x2F-simple-http-server"><a href="#TheWaWaR-x2F-simple-http-server" class="headerlink" title="TheWaWaR&#x2F;simple-http-server"></a><a href="https://github.com/TheWaWaR/simple-http-server">TheWaWaR&#x2F;simple-http-server</a></h1><p><img src="https://github.com/TheWaWaR/simple-http-server/raw/master/screenshot.png" alt="Screenshot"></p><ul><li>Features:<ul><li>Cross-Origin-Embedder-Policy (COEP)</li><li>Cross-Origin Resource Sharing (CORS) </li><li>Cross-Origin-Opener-Policy (COOP)</li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTPS</li><li>Frontend Features:<ul><li>File Upload</li></ul></li></ul></li><li>GitHub Stars: 785</li><li>Language: Rust</li><li>Multithreaded</li></ul><h1 id="http-party-x2F-http-server"><a href="#http-party-x2F-http-server" class="headerlink" title="http-party&#x2F;http-server"></a><a href="https://github.com/http-party/http-server">http-party&#x2F;http-server</a></h1><p><code>http-server</code> is a simple, zero-configuration command-line static HTTP server. It is powerful enough for production usage, but it’s simple and hackable enough to be used for testing, local development and learning.</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>HTTP Basic Authentication</li><li>HTTP Range Requests</li><li>HTTPS</li></ul></li><li>GitHub Stars: 12.4k</li><li>Language: node.js</li></ul><h1 id="EstebanBorai-x2F-http-server"><a href="#EstebanBorai-x2F-http-server" class="headerlink" title="EstebanBorai&#x2F;http-server"></a><a href="https://github.com/EstebanBorai/http-server">EstebanBorai&#x2F;http-server</a></h1><p>Simple and configurable command-line HTTP server</p><ul><li>Features:<ul><li>Cross-Origin Resource Sharing (CORS)</li><li>HTTP Basic Authentication</li><li>HTTPS</li><li>GZip Compression</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Efficient scalable thread-safety-violation detection: finding thousands of concurrency bugs during testing</title>
    <link href="/2022/11/27/Paper-Reading-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/"/>
    <url>/2022/11/27/Paper-Reading-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://dl.acm.org/doi/10.1145/3341301.3359638">here</a>.</p><p>This paper presents Thread Safety Violation Detection (TSVD), a tool that dynamically detects thread safety violations with low runtime overhead, and which is compatible with real-world, distributed-developed code employing different synchronization mechanisms. The tool frames thread safety violations as two methods, with one of them being a write operation, occurring concurrently. It infers thread safety violations using a very creative approach. First, it instruments the program and detects method calls that access objects behind thread-safety contracts. Later on, during the execution of the program, TSVD injects delays into threads with method calls accessing those objects and monitors whether another thread also accesses the same objects during the delay. As this may incur significant overhead, the tool uses two strategies to determine when to inject delays - keeping track of “near misses”, where the two method calls of two threads occur within a time threshold apart from each other, and inferring “happens before” relations, to rule out two accesses which are causally related.</p><p>The tool was tested on 43000 .NET programs in Microsoft teams, and its bug-finding capability outperformed both existing tools and configuring TSVD to emulate the strategies of existing tools, which shows the feasibility of TSVD.</p><p>There are two questions that come to mind after reading this paper:</p><ul><li>How does the tool acquire the information on which methods are thread-unsafe?</li><li>The approach the tool uses to infer thread safely - injecting delays and monitoring the behavior of other threads - sounds very interesting to me. Have there been any other applications of such an approach?</li><li>What is the sensitivity of the relevant parameters used in TSVD to its effectiveness and efficiency? Is there any guide on how to properly adjust these parameters?</li></ul><hr><p>Feedback from the Class Discussion</p><p>The proposed approach can handle different concurrency models, such as:</p><ul><li>async</li><li>task-based</li><li>thread-based</li></ul><p>But can it handle unstructured concurrency?</p><p>The approach generalizes data race for objects and data structures at the method-level (e.g. there cannot be two simultaneous calls to add() for a <code>List</code> class).</p><p>Using delays can handle many more cases than reasoning about thread scheduling. It is a “simple thing” which works for many cases (akin to fuzzing).</p><p>The approach requires manually specifying read and write APIs. Is it possible to create a semi-automatic approach starting from contracts labeled for standard library APIs?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Hybrid dynamic data race detection</title>
    <link href="/2022/11/23/Paper-Reading-Hybrid-dynamic-data-race-detection/"/>
    <url>/2022/11/23/Paper-Reading-Hybrid-dynamic-data-race-detection/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/781498.781528">here</a>.</p><p>The paper proposes a hybrid approach to dynamically (at runtime) data races in multithreaded Java programs. It first proposes two specific detection approaches, each with its strengths and weaknesses. The first is lockset-based detection, which identifies a data race when multiple threads use a shared memory location without holding a shared lock object. Such an approach is fast but may lead to false positives. As a result, the paper proposes another approach, happens-before detection, which uses several heuristics to reason about relations between events and infer whether a potential race has occurred at a particular memory location. In comparison, this approach is more computationally expensive and may lead to false negatives. Considering that neither approach is sound, they combine the two approaches by first using lockset-based detection to identify potential data races before using happens-before detection to reason whether these are probable. The paper then conducts an experimental study of their hybrid approach on various Java programs, demonstrating its effectiveness and efficiency.</p><p>I like this paper’s idea of combining a pessimistic and optimistic approach when doing program analysis. Are there any other works that use such an idea?</p><p>However, I have a question concerning the applicability of the hybrid approach in real life. Although pessimistic, shouldn’t lockset-based detection be enough to stamp out all potential data races by providing programmers with feedback to add relevant locks to prevent such possible data races? This is relevant to the requirements for defensive programming. Or are there design patterns where multiple threads can safely use a shared memory location without holding a common lock and not lead to data races?</p><hr><p>Feedback from the Class Discussion</p><p>Difference Between Race Condition and Data Race:</p><ul><li>Race Condition: There are multiple threads, and the behavior of program depends on thread scheduling.</li><li>Data Race: Different from race condition. This frequently happens when you parallelize a program that shouldn’t be parallelized. Data race can be solved by using locks, but there may still be race coditions.</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-1</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span> &#123;<br>    x = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-2</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    x = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Modelling in the Paper:</p><ul><li>Lamport Timestamps&#x2F;Vector Clocks</li><li>Thread events: statement executions in threads. A thread event is dependent on previous thread events. This is captured used using the happens-before formal definition in the paper, but leads to false negatives.</li><li>Thread communications: signals (enforce order) and locks (mutually exclusive).</li><li>Message send&#x2F;receive: enqueue and dequeue.</li></ul><p>Architecure-dependednt atomic operations can also be a lock-free solution (e.g. C++’s atomic).</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Lightweight Verification of Array Indexing</title>
    <link href="/2022/11/16/Paper-Reading-Lightweight-Verification-of-Array-Indexing/"/>
    <url>/2022/11/16/Paper-Reading-Lightweight-Verification-of-Array-Indexing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/3213846.3213849">here</a>.</p><h1 id="Summary-of-the-Paper"><a href="#Summary-of-the-Paper" class="headerlink" title="Summary of the Paper"></a>Summary of the Paper</h1><p>The authors propose a methodology to detect out-of-bound array accesses statically. They first define that criteria that ideal techniques for detecting out-of-bound array accesses should satisfy, before analyzing the insufficiency of existing academic and industrial approaches, and presenting their own approach, Index Checker, implemented for Java.</p><p>Index Checker reduces checking array bonds to identifying 7 kinds of knowledge, which concern array index and array length, and form a hierarchy. It models such hierarchical knowledge as a Type System, requires the user to write “Type” Annotations at procedure boundaries, and verifies that values have the given “Type” at runtime. This is implemented using Checker Framework, an “industrial-strength, open-source tool for building Java type systems”.</p><p>The authors evaluate Index Checker on 3 large-scale, well-tested Java projects (Google Guava, JFreeChart, Plume-lib), and compare Index Checker with 3 other approaches (FindBugs, KeY, and Clousot), proving the effectiveness of Index Checker (scalability, finding bugs in well-tested programs, and low false positive rate). They also assess the burden of writing type annotations for Index Checker.</p><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul><li>What is the rationale behind the 7 kinds of knowledge concerning array index and array length proposed in the paper?</li><li>I am not very familiar with Type Theory, which may have impeded my understanding of the value of the paper. What are the benefits of using Type Systems and Type Inference, and using Type Annotations to capture known constraints? Is it just to leverage the power of Checker Framework, an “industrial-strength, open-source tool for building Java type systems”, for sound inference? Or are there any further benefits?</li><li>No matter what the benefits are, from this paper, modeling hierarchical knowledge as a Type System, using Type Annotations to capture known constraints, and using Type Inference to verify such constraints sounds like a very innovative technique with many potential use cases. Have there been any other applications of such a technique?</li></ul><hr><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>The hierarchy of knowledge is derived from Exploratory Data Analysis (trying stuff until it works, see Section 2.8).</p><p>“Subtype” is a kind of Comparable Partial Ordering (‘&lt;’). The Types in the Bottom have more information, while the Types in the Top have less information.</p><p>In Java, aside from Inheritance, another form of Subtyping is Function Subtyping. e.g. Comparator (to compare two Dog’s we can pass a function that compares two Animal’s) the inputs can be more general types.</p><p>Rules define what to do when a Pattern is encountered; however, it takes a (nontrivial) search to determine the order to apply the rules.</p><p>Fixed Point: Convergence of Information.</p><p>Reach a Fixed Point: Iterate until Convergence.</p><p>The Paper uses Subtyping to implement Widening.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Modular Checking for Buffer Overflows in the Large</title>
    <link href="/2022/11/13/Paper-Reading-Modular-Checking-for-Buffer-Overflows-in-the-Large/"/>
    <url>/2022/11/13/Paper-Reading-Modular-Checking-for-Buffer-Overflows-in-the-Large/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/1134285.1134319">here</a>.</p><h1 id="Background-Information"><a href="#Background-Information" class="headerlink" title="Background Information"></a>Background Information</h1><h2 id="Datalog"><a href="#Datalog" class="headerlink" title="Datalog"></a>Datalog</h2><ul><li>Declarative Programming Language which began as a Query Language for Relational Databases, and is now used in Data Integration, Information Extraction, Program Analysis, Cloud Computing, Machine Learning, etc.</li><li>Akin to SQL in many aspects.<ul><li>Not Turing Complete.</li><li>Used as a Domain Specific Language.</li><li>No Canonical Implementation, many different Implementations exist for different Applications (c.f. SQLite, MySQL, PostgreSQL, etc. for SQL).</li></ul></li><li>Follows the ‘Logic Programming’ Paradigm.<ul><li>A Program consists of Constants, Variables, Facts, and Rules (based on First Order Logic, in a form similar to “a new Fact A is true if B, C, and D are already known to be true”).</li><li>The Execution of a Program is <em>iteratively inferring new Facts given the Rules</em>.</li><li>Maps very nicely to many problems encountered during Program Analysis.</li></ul></li></ul><h1 id="Summary-of-the-Paper"><a href="#Summary-of-the-Paper" class="headerlink" title="Summary of the Paper"></a>Summary of the Paper</h1><p>The authors proposed a Methodology for detecting possible Buffer Overflow-based Security Exploits in C code and providing developers with instant feedback during the build process. The Methodology prefers usability over accuracy, and should be used alongside other tools in a Swiss Cheese Model against Security Exploits.</p><p>First, the authors proposed a Simple Annotations Language for annotating Pointers passed as parameters to and returned from Functions, to denote Preconditions and Postconditions of Function Execution. The authors propose that for new code, annotation should be inserted manually, and code should be fully annotated before being checked in to Version Control.</p><p>For legacy codebases and&#x2F;or third-party code without such Annotations, the authors propose an Inference Engline, SALInfer, which tries to infer such Annotations, preferring Coverage over Accuracy. SALInfer supports specifying Inference Algorithms using Datalog.</p><p>Finally, the authors propose a modular checker, ESPX, which tries to infer if a program is potentially vulnerable to Buffer Overflow-based Security Exploits by statically analyzing the annotations within the program’s code. The confidence of the inference results vary based on the extent and quality of the annotations.</p><h1 id="Questions-Regarding-the-Paper"><a href="#Questions-Regarding-the-Paper" class="headerlink" title="Questions Regarding the Paper"></a>Questions Regarding the Paper</h1><ul><li>What is the relevance of such a technique to “safe” programming languages that do not allow using overflowable buffers?</li><li>The authors state that “control over annotation insertion is given to individual developers”. However, developers might be reluctant to insert Annotations, and inserting Annotations can negatively affect developer productivity. Furthermore, the quality of the inserted Annotations is not guaranteed. Last but not least, inferring Annotations for legacy codebases and&#x2F;or third-party code without such Annotations prefers Coverage over Accuracy, which may not lead to sound results. Considering all these real concerns, the practical usability of this tool is seriously compromised.</li><li>The authors did an evaluation on an unnamed Microsoft product. With little information regarding the product being disclosed, such an evaluation is far from convincing, and I suspect that there might be manipulation of some kind within the evaluation.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Precise Interprocedural Dataflow Analysis via Graph Reachability</title>
    <link href="/2022/11/07/Paper-Reading-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/"/>
    <url>/2022/11/07/Paper-Reading-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/199448.199462">here</a>.</p><p>To be honest, I found the paper to be almost unreadable due to it being full of unfamiliar concepts and abstract formalizations. I tried my best to do some studying into the topic so that I can understand the problem that they are trying to solve, and important aspects of their algorithm, better.</p><h1 id="Graph-Reachability"><a href="#Graph-Reachability" class="headerlink" title="Graph Reachability"></a>Graph Reachability</h1><p>Graph Reachability means whether it is possible to get from one vertex to another vertex within a graph.</p><p>In an Undirected Graph $G(V, E)$, Graph Reachability between <em>one pair of nodes</em> can be calculated using Breadth-First Search, while Graph Reachability between <em>all pair of nodes</em> can be reduced to calculating the Connected Components of the Undirected Graph, which is an efficient algorithm with $O(|V| + |E|)$ time complexity.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/38/Equivalentie.svg" alt="Connected Components within an Undirected Graph"></p><p>In a Directed Graph, Graph Reachability between <em>one pair of nodes</em> can also be calculated using Breadth-First Search. <strong>However, there is no efficient algorithm that can calculate Graph Reachability between <em>all pair of nodes</em> for all Directed Graphs.</strong></p><p>For <em>any</em> Directed Graph, calculating Graph Reachability between <em>all pair of nodes</em> can be reduced to calculating <strong>All Pairs Shortest Distance</strong> using the Floyd-Warshall Algorithm, which has an $O({|V|}^3)$ time complexity.</p><p>More efficient algorithms are only applicable to Planar Directed Graphs.</p><h1 id="Data-Flow-Analysis"><a href="#Data-Flow-Analysis" class="headerlink" title="Data Flow Analysis"></a>Data Flow Analysis</h1><p>Constant Propogation (determining whether variables at a given point in the program are guaranteed to have constant values) and Live Variable Analysis (determining at a given point in the program, which variables might be used before being overwritten) are two commonly encountered examples of Data Flow Analysis.</p><p>Given a program’s Control Flow Graph, Data Flow Analysis:</p><ul><li>Associates each Node of the Control Flow Graph with Information concerning the Variables within that Node (known as <em>Dataflow Fact</em>‘s, usually a Mapping between Variables and their Values or Properties)</li><li>Models the effect of executing a Node with a <em>Dataflow Function</em>.</li></ul><p>In most Data Flow Analysis problems, we take one of the following approaches to obtain the Dataflow Facts for each Node:</p><ul><li>Summarizing paths entering the Node from the Start, such as in Constant Propogation. Known as “Forward Problem”‘s.</li><li>Summarizing paths exiting the Node from the Exit, such as in Live Variable Analysis. Known as “Backward Problem”‘s.</li></ul><p>How we summarize paths is known as the <em>Confluence Operator</em>.</p><p>Data Flow Analysis problems can also be divided into “may” problems and “must” problems.</p><ul><li>In “may” problems, the Dataflow Facts for each Node include information about what may be true. An example is Live Variable Analysis, where we determine whether a variable <em>may</em> be used before being overwritten in a given point in the program.</li><li>In “must” problems, the Dataflow Facts for each Node include information about what must be true. An example is Constant Propogation, where we determine whether a variable <em>must</em> have a given value in a given point in the program.</li></ul><p>Many interesting Data Flow Analysis problems, such as Live Variable Analysis, can be modeled as GEN&#x2F;KILL problems, or bit-vector problems, in which:</p><ul><li>A set of variables, $KILL[n]$, is defined at Node $n$.</li><li>A set of variables, $GEN[n]$, is used at Node $n$.</li><li>We use Union or Intersection to summarize paths entering a Node to obtain the Dataflow Facts for the Node.</li></ul><h1 id="Interprocedural-Dataflow-Analysis"><a href="#Interprocedural-Dataflow-Analysis" class="headerlink" title="Interprocedural Dataflow Analysis"></a>Interprocedural Dataflow Analysis</h1><p>The goal of Interprocedural Dataflow Analysis is to capture an Abstraction of the Effect of calling a Procedure in Dataflow Analysis.</p><p>A naive approach to Interprocedural Dataflow Analysis is to reduce it to Intraprocedural Dataflow Analysis in some way.</p><ul><li>Procedure Inlining<ul><li>Exponentially increases the Control Flow Graph</li><li>Cannot handle recursion</li></ul></li><li>Context Sensitive Procedure Inlining<ul><li>Uses Context Information (often an Approximation of the Call Stack) to distinguish between different Calls of the same Procedure, and reduce the number of inlined Procedures.</li></ul></li></ul><hr><p>However, even after research, I have failed to understand the more complicated approaches (as well as the approaches proposed in this Paper).</p><p>I can only get the point that the author shows that many Interprocedural Dataflow Analysis problems, in which:</p><ul><li>A finite set of Dataflow Facts</li><li>Dataflow Functions distribute over the Confluence Operator (which I don’t fully understand)</li></ul><p>including GEN&#x2F;KILL problems, or bit-vector problems, can be reduced to a Graph Reachability Problem on a Directed Graph.</p><p>Furthermore, I believe the main contribution of this paper is theoretical, but what is its value in real-world Dataflow Analysis problems, especially considering that the Time Complexity of Graph Reachability Problems on Directed Graphs are high?</p><p>I honestly hope that I can get some insight into these approaches during our class on Monday. Thank you!</p><hr><h1 id="Feedback-from-the-Class-Discussion"><a href="#Feedback-from-the-Class-Discussion" class="headerlink" title="Feedback from the Class Discussion"></a>Feedback from the Class Discussion</h1><p>Some of the paper’s idea comes from Abstract Interpretation. It is nice theoretically, but it is far from implementation.</p><p>Graph Reachability in the context of Interprocedure Analysis is also known as Context-Free Language Reachability and Dyck Reachability.</p><p><strong>In the context of this paper, there are multiple Dataflow Functions, one for each Node in the Control Flow Graph. Given a Node in the Control Flow Graph, we use Pattern Matching to determine what its Dataflow Function is.</strong> Lambdas are used to represent these Dataflow Functions. Explanation for the notations: $\lambda <parameters>.&lt;return_value&gt;$ means <code>def f(&lt;parameters&gt;): return &lt;return_value&gt;</code>.</p><p>In the context of this paper, we require all Dataflow Functions to be distributive over the Meet Function (Confluence Function). This means that, given the Meet Function $\Pi$ and a Dataflow Function $f$, $f(X<del>\Pi</del>Y) &#x3D; f(X)<del>\Pi</del>f(Y)$ for any two Dataflow Facts $X, Y$. </p><p>Each Dataflow Function can be visualized using a Graph Representation. The Edges represent Dependencies between Facts of the Variables in the Old Dataflow Facts and Facts of the Variables in the New Dataflow Facts.</p><p><img src="https://picx1.zhimg.com/v2-f2b6351350543806f3a1b5f709071f78_1440w.jpg?source=172ae18b" alt="Graph Representation of Dataflow Functions, `x` is Shorthand for the Facts of `x`"></p><p>Worklist Algorithm: an Algorithm which takes Objects from a Worklist (a Queue of some sort) one at a time, processes it in some way, and perhaps further adds new Objects to the Worklist, until some Target is reached. Example: Breadth First Search.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Mining Input Grammars from Dynamic Taints</title>
    <link href="/2022/11/02/Paper-Reading-Mining-Input-Grammars-from-Dynamic-Taints/"/>
    <url>/2022/11/02/Paper-Reading-Mining-Input-Grammars-from-Dynamic-Taints/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/2970276.2970321">here</a>.</p><p>A program usually accepts a formal language as input. Inferring the grammar of this formal language is an important task with many use cases.</p><ul><li>Helps humans understand the structure of the formal language.<ul><li>Manually writing valid inputs</li><li>Reverse Engineering</li></ul></li><li>Generate inputs for testing and fuzzing</li></ul><p>The authors propose Autogram, a method that infers a Context Free Grammar given a set of sample inputs and a Java program that accepts that set of inputs and uses it in some way. Autogram adapts a Dynamic Taining-based approach: </p><ul><li>It monitors the data flow of each character within the input, with “the Input Fragment it came from” as the taint.</li><li>It traces method entries, method exits, field accesses, and array accesses within the execution of the program.</li><li>From such a trace, the Dynamic Call Tree is reconstructed, and the sets of Intervals (Input Fragments) processed by functions, stored in variables, and returned by functions is derived.</li><li>This is used to build an Interval Tree, and the Interval Tree is refined into a Pure Input Tree free of conflicting overlaps (resulting from parsers using lookaheads).</li><li>The pure input tree is assumed to be a Parse Tree, and Production Rules are derived from it. The leaf nodes are considered to be Terminals, and Regular Expressions matching them are learned.</li></ul><p>The authors then conduct an experimental study concerning the accuracy and completeness of the inferred Context Free Grammars using “parts of the Java Standard API that are used to process URLs and property files”, and “open source projects that implement support for CSV, INI, and JSON formats”.</p><hr><p>However, I had more questions than answers after reading this paper.</p><ul><li>One of the use cases that the authors mentioned is “the grammar vastly simplifies the creation of parsing programs that decompose existing inputs into their constituents”. Why don’t we directly extract the parsing logic out of the program Autogram runs on?</li><li>The type of Context Free Grammar inferred by Autogram seems to be an LL(1) Grammar. This type of Grammar is only able to represent simple Grammars, and does not support for Left Recursion, which is pervasive in real-world Grammars. Why don’t they infer an LALR(1) Grammar, which is both simple and expressive (it supports representing may real-world Programming Languages). Perhaps, a Hidden Markov Model could be trained to infer the Transitions between the States within the LALR(1) Parse Table should an LALR(1) Grammar be inferred?</li><li>In the current implementation of Autogram, tracing is efficient, as the authors have mentioned: “millions of calls result in traces of a few Megabytes”. However, the current implementation incurs a ~100x performance overhead, and there is a lot of room for performance optimization. Maybe ideas that we have discussed for TaintCheck and Qsym (direct Binary Analysis, preinstrumenting Bytecode, JIT compilation etc.) could be used here?</li><li>The specific process of refining an Interval Tree into a Pure Interval Tree free of conflicting overlaps is not described clearly in the paper. Why don’t the author present an example with figures showing the manipulation of nodes within the Interval Tree during this process? The author also mentions applying “a simple heuristic that assumes left to right processing of the input” to resolve possible ambiguities associated with parsers using lookaheads. However, what is the rationale behind this “simple heuristic”?</li><li>The specific process of deriving Production Rules from the Pure Interval Tree is also unclear. What do the authors mean by “We can thus check if nodes are compatible and can be used to derive productions for for the same nonterminal symbol”? What is the meaning of “compatible” in this context?</li><li>The programs used in the experimental study are all open-source programs of very high code quality (containing accurately named variables and functions). However, how well does Autogram work with closed-source programs, and&#x2F;or programs with low code quality, containing obscure variable and function names? This is frequently the situation we encounter when we try to reverse engineer the (often closed-source and&#x2F;or obscure) structure of a program’s input, one of the major use cases of Autogram.</li></ul><p>Also some inspiration and ideas I got from the paper:</p><ul><li>The author mentions that “dynamic tainting allows us to precisely identify which parts of a programs input are read, stored and processed at any point in time”. Could this technique be used in a Fuzzing context to identify which bits generated by a Coverage-Guided Fuzzer are used in which sections of a fuzzed program?</li><li>The logic of building an Interval Tree is very interesting, and it reads like the “Subset Tree” mentioned in the KLEE paper. I conject that both these Tree Structures could be generalized and used in a much wider range of contexts.</li></ul><hr><p>Feedback from the Class Discussion</p><ul><li>A Context Free Grammar may not capture the structure of binary files.</li><li>How does the approach compare to unsupervised parsing in NLP or fine-tuning language models, especially with a lot of input?</li><li>Is it possible to use feedback to improve the mined grammar?</li><li>From one tree, we infer one set of grammar rules; from 1000 trees, we infer 1000 sets of grammar rules. They are merged together to derive the final Context Free Grammar.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Various Solutions for Different Types of Reverse Proxying</title>
    <link href="/2022/10/30/Various-Solutions-for-Different-Types-of-Reverse-Proxying/"/>
    <url>/2022/10/30/Various-Solutions-for-Different-Types-of-Reverse-Proxying/</url>
    
    <content type="html"><![CDATA[<p>There are some situations in which we have to expose a locally running web service to the Internet. This is know as Reverse Proxying. Depending on the situation in hand, there are multiple ways to do this:</p><h1 id="Server-with-Public-IP-Available"><a href="#Server-with-Public-IP-Available" class="headerlink" title="Server with Public IP Available"></a>Server with Public IP Available</h1><p>In this case, the Server is also known as a Jump Server.</p><h2 id="Client-Accessible-from-Server"><a href="#Client-Accessible-from-Server" class="headerlink" title="Client Accessible from Server"></a>Client Accessible from Server</h2><p>Run a port-forwarding tool such as <code>socat</code> on the Server.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat TCP-LISTEN:&lt;Port the Server listens on&gt;,fork,reuseaddr TCP:&lt;IP address of the Client&gt;:&lt;Port of the Service on the Client&gt;<br></code></pre></td></tr></table></figure><h2 id="Client-Inaccessible-from-Server"><a href="#Client-Inaccessible-from-Server" class="headerlink" title="Client Inaccessible from Server"></a>Client Inaccessible from Server</h2><p>Use <a href="https://github.com/rofl0r/nat-tunnel">nat-tunnel</a> on both the Server and the Client.</p><p>Or, use <a href="https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/">Reverse SSH Tunneling</a> on the Client.</p><h3 id="Reverse-SSH-Tunneling"><a href="#Reverse-SSH-Tunneling" class="headerlink" title="Reverse SSH Tunneling"></a>Reverse SSH Tunneling</h3><h3 id="Before-Tunneling"><a href="#Before-Tunneling" class="headerlink" title="Before Tunneling"></a>Before Tunneling</h3><p>On the Server:</p><ul><li>Update the sshd config file (<code>/etc/ssh/sshd_config</code>). Set <code>GatewayPorts</code> to <code>yes</code>.</li><li>Restart the SSH Service.</li><li>Make sure the Port the Server listens on allows Inbound Traffic.</li></ul><h3 id="To-Tunnel"><a href="#To-Tunnel" class="headerlink" title="To Tunnel"></a>To Tunnel</h3><p>On the Client:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh [-f] [-N] [-T] -R &lt;Port the Server listens on&gt;:localhost:&lt;Port of the Service on the Client&gt; [How you connect to the Server (e.g. `-i key-pair.pem &lt;username&gt;@&lt;domain&gt;`)]<br></code></pre></td></tr></table></figure><ul><li><code>-f</code> tells the SSH to background itself after it authenticates, saving you time by not having to run something on the remote server for the tunnel to remain alive.</li><li><code>-N</code> if all you need is to create a tunnel without running any remote commands then include this option to save resources.</li><li><code>-T</code> useful to disable pseudo-tty allocation, which is fitting if you are not trying to create an interactive shell.</li><li><code>-R</code> tells the tunnel to answer on the remote side.</li></ul><h1 id="Server-with-Public-IP-Unavailable"><a href="#Server-with-Public-IP-Unavailable" class="headerlink" title="Server with Public IP Unavailable"></a>Server with Public IP Unavailable</h1><p>Use a commercial service such as <code>ngrok</code> on the Client.</p><p>References:</p><ul><li><a href="https://en.wikipedia.org/wiki/Reverse_proxy">https://en.wikipedia.org/wiki/Reverse_proxy</a></li><li><a href="https://www.kvm.la/1328.html">https://www.kvm.la/1328.html</a></li><li><a href="https://blog.csdn.net/weixin_35867652/article/details/104362302">https://blog.csdn.net/weixin_35867652/article/details/104362302</a></li><li><a href="https://www.hostinger.com/tutorials/how-to-set-up-nginx-reverse-proxy/">https://www.hostinger.com/tutorials/how-to-set-up-nginx-reverse-proxy/</a></li><li><a href="https://stevessmarthomeguide.com/understanding-port-forwarding/">https://stevessmarthomeguide.com/understanding-port-forwarding/</a></li><li><a href="https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/">https://jfrog.com/connect/post/reverse-ssh-tunneling-from-start-to-end/</a></li><li><a href="https://linuxhint.com/ssh-port-forwarding-linux/">https://linuxhint.com/ssh-port-forwarding-linux/</a></li><li><a href="https://www.ssh.com/academy/ssh/tunneling-example">https://www.ssh.com/academy/ssh/tunneling-example</a></li><li><a href="https://superuser.com/questions/1408427/remote-port-forwarding-through-a-jump-server">https://superuser.com/questions/1408427/remote-port-forwarding-through-a-jump-server</a></li><li><a href="https://unix.stackexchange.com/questions/436290/single-step-ssh-port-forwarding-not-working-but-only-works-when-ssh-port-forward?rq=1&amp;newreg=def5dfc9fb43466d8685fd7639eb17cc">https://unix.stackexchange.com/questions/436290/single-step-ssh-port-forwarding-not-working-but-only-works-when-ssh-port-forward?rq=1&amp;newreg=def5dfc9fb43466d8685fd7639eb17cc</a></li><li><a href="https://www.opensourceforu.com/2021/09/how-to-do-reverse-tunnelling-with-the-amazon-ec2-instance/">https://www.opensourceforu.com/2021/09/how-to-do-reverse-tunnelling-with-the-amazon-ec2-instance/</a></li><li><a href="https://superuser.com/questions/1194105/ssh-troubleshooting-remote-port-forwarding-failed-for-listen-port-errors">https://superuser.com/questions/1194105/ssh-troubleshooting-remote-port-forwarding-failed-for-listen-port-errors</a></li><li><a href="https://docs.hevodata.com/getting-started/connection-options/connecting-through-reverse-ssh/">https://docs.hevodata.com/getting-started/connection-options/connecting-through-reverse-ssh/</a></li><li><a href="https://www.youtube.com/watch?v=TZ6W9Hi9YJw">https://www.youtube.com/watch?v=TZ6W9Hi9YJw</a></li><li><a href="https://blog.devolutions.net/2017/03/what-is-reverse-ssh-port-forwarding/">https://blog.devolutions.net/2017/03/what-is-reverse-ssh-port-forwarding/</a></li><li><a href="https://chenhuijing.com/blog/tunnelling-services-for-exposing-localhost-to-the-web/">https://chenhuijing.com/blog/tunnelling-services-for-exposing-localhost-to-the-web/</a></li><li><a href="https://johackim.com/how-to-expose-local-server-behind-firewall">https://johackim.com/how-to-expose-local-server-behind-firewall</a></li><li><a href="https://gabrieltanner.org/blog/port-forwarding-frp/">https://gabrieltanner.org/blog/port-forwarding-frp/</a></li><li><a href="https://www.techiediaries.com/public-localhost/">https://www.techiediaries.com/public-localhost/</a></li><li><a href="https://superuser.com/questions/121435/is-it-possible-to-host-a-web-server-from-behind-a-nat/1360660">https://superuser.com/questions/121435/is-it-possible-to-host-a-web-server-from-behind-a-nat/1360660</a></li><li><a href="https://medium.com/tech-learnings/how-to-expose-a-local-server-to-the-internet-without-any-additional-tools-ae49e6b8fe93">https://medium.com/tech-learnings/how-to-expose-a-local-server-to-the-internet-without-any-additional-tools-ae49e6b8fe93</a></li><li><a href="https://serverfault.com/questions/282959/how-do-i-reach-my-internal-server-on-the-external-ip">https://serverfault.com/questions/282959/how-do-i-reach-my-internal-server-on-the-external-ip</a></li><li><a href="https://superuser.com/questions/624925/how-to-access-internal-valid-ip-through-internet">https://superuser.com/questions/624925/how-to-access-internal-valid-ip-through-internet</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Computer Networking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software</title>
    <link href="/2022/10/29/Paper-Reading-Dynamic-Taint-Analysis-for-Automatic-Detection-Analysis-and-Signature-Generation-of-Exploits-on-Commodity-Software/"/>
    <url>/2022/10/29/Paper-Reading-Dynamic-Taint-Analysis-for-Automatic-Detection-Analysis-and-Signature-Generation-of-Exploits-on-Commodity-Software/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://valgrind.org/docs/newsome2005.pdf">here</a>.</p><p>To combat worms spread by the Internet exploiting software vulnerabilities, the paper proposes TaintCheck, a dynamic taint analysis technique for automatic detection of exploits on software.</p><p>Summary of TaintCheck:</p><ul><li>TaintCheck directly operates on an arbitrary executable and does not require its source code. It uses Valgrind to translate basic blocks being executed into Valgrind’s RISC-like instruction set (UCode), inserts UCode instructions for instrumentation, and passes the modified UCode back to Valgrind for execution.</li><li>TaintCheck by default considers data originating from the network as “untrusted” and taints it. It keeps track of “the propagation of tainted data as the program executes”, which involves monitoring data movement instructions and arithmetic instructions, with the exception of constant functions such as <code>xor eax, eax</code>.</li><li>To accomplish this, TaintCheck associates “each byte of memory” with a Taint data structure. Different instances of such a data structure are “chained” to record “how tainted data is propagated”.</li><li>TaintCheck checks whether tainted data is used in ways it considers illegitimate, such as being used as a return address, a function pointer, a format string, and (optionally) as an argument of a system call. When such illegitimate uses are detected, it is possible to collect information about a software vulnerability, especially “the execution path from tainted data’s entry and its use in a probable exploit”.</li></ul><p>The paper also proposes a new semantic-based automatic signature generation approach on top of TaintCheck.</p><hr><p>There are several questions that came to my mind when I was reading this paper:</p><ul><li>The paper mentions that “the current implementation slows program execution between 1.5 and 40 times”, but also mentions that “the prototype has not been optimized”, and proposes optimization techniques. Why didn’t the authors implement these optimization techniques and conduct experiments on the optimized TaintCheck?</li><li>There is no doubt that using Valgrind to translate basic blocks being executed into UCode greatly simplifies dynamic taint analysis on an arbitrary executable, as TaintCheck deals with an RISC-like instruction set instead of raw machine code. However, this incurs significant overhead. Would directly performing dynamic taint analysis on machine code at runtime using a dynamic binary instrumentation tool such as Intel Pin boost performance (like the case of QSym)? What about generating UCode, inserting instructions for instrumentation, and passing the modified UCode back to Valgrind <em>before the executable is executed</em>?</li><li>What is the overhead of using the Taint data structure? Would the total size of all Taint data structures explode for long-running processes? And why do they use this Taint data structure, instead of using a conventional Data Flow Graph?</li><li>What is the list of constant functions that TaintCheck supports? Is it representative, and is it extensible?</li><li>Are the ways tainted data is used considered by TaintCheck to be illegitimate representative of real exploits? How well can TaintCheck discriminate from “illegitimate” uses with intentional uses, and&#x2F;or uses with checks? Specifically, the paper mentions that TaintCheck can “untaint the data immediately after it has been sanity checked”, but how is this situation detected?</li><li>In the evaluation section, why are the benchmarks used in assessing “compatibility and false positives” different from those used in assessing “attack detection” on actual exploits?</li><li>What does a “signature” look like, and how is it used to filter attacks?</li></ul><hr><p>Feedback from the Class Discussion</p><ul><li>Performance is not a priority. <strong>The paper is more of a proof-of-concept, and even “reads like a grant proposal”</strong>, especially Section 6.</li><li>The “taint data structure” includes more information than a dataflow graph (snapshots of the stacks etc.). It can also use a <strong>“memory arena”</strong> instead of vanilla heap allocation to improve performance.</li><li>Some of the detected attacks may not be present in “safe”, managed languages.</li><li>Due to the large overhead, the technique cannot be used to handle requests in production, but requests can be forked to it instead.</li><li>Dynamic taint analysis can have applications outside of the security domain.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python in a Functional Style: Closures, Generators, and Coroutines</title>
    <link href="/2022/10/28/Python-in-a-Functional-Style-Closures-Generators-and-Coroutines/"/>
    <url>/2022/10/28/Python-in-a-Functional-Style-Closures-Generators-and-Coroutines/</url>
    
    <content type="html"><![CDATA[<hr><!-- _class: lead --><h1 id="Python-in-a-Functional-Style-Closures-Generators-and-Coroutines"><a href="#Python-in-a-Functional-Style-Closures-Generators-and-Coroutines" class="headerlink" title="Python in a Functional Style: Closures, Generators, and Coroutines"></a>Python in a Functional Style: Closures, Generators, and Coroutines</h1><p>Jifeng Wu</p><p>2022-10-28</p><hr><!-- header: Contents --><ul><li>Closures👈</li><li>Generators</li><li>Coroutines</li></ul><hr><!-- header: Closures --><p>All Python functions are <strong>closures</strong>.</p><ul><li>Function code.</li><li>Execution environment of function code (variables it depend on).</li></ul><p>A nested function can be returned. This is a common design pattern for creating <strong>tailored functions</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_greeting_function</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting_function</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hello, <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> greeting_function<br></code></pre></td></tr></table></figure><hr><p>All Python functions are <strong>closures</strong>.</p><ul><li>Function code.</li><li>Execution environment of function code (variables it depend on).</li></ul><p>A nested function can be returned. This is a common design pattern for creating <strong>tailored functions</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a = get_greeting_function(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a()<br>Hello, A<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b = get_greeting_function(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b()<br>Hello, B<br></code></pre></td></tr></table></figure><hr><p>Look into a closure’s <code>cell_contents</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__<br>(&lt;cell at <span class="hljs-number">0x7f3c81849ca8</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c8185ac70</span>&gt;,)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__[<span class="hljs-number">0</span>]<br>&lt;cell at <span class="hljs-number">0x7f3c81849ca8</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c8185ac70</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__[<span class="hljs-number">0</span>].cell_contents<br><span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__<br>(&lt;cell at <span class="hljs-number">0x7f3c81849c18</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c82f18e30</span>&gt;,)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__[<span class="hljs-number">0</span>]<br>&lt;cell at <span class="hljs-number">0x7f3c81849c18</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c82f18e30</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__[<span class="hljs-number">0</span>].cell_contents<br><span class="hljs-string">&#x27;B&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>Should an inner function <strong>use an outer function’s local variable</strong> (instead of <strong>shadowing it</strong>), that local variable should be declared <code>nonlocal</code> within the inner function. Not using <code>nonlocal</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer_function</span>():<br>    string = <span class="hljs-string">&#x27;Hello&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_function</span>():<br>        <span class="hljs-comment"># Shadows the local variable `string` of `outer_function`</span><br>        string = <span class="hljs-string">&#x27;World&#x27;</span><br>    inner_function()<br>    <span class="hljs-keyword">return</span> string<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>outer_function()<br><span class="hljs-string">&#x27;Hello&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>Should an inner function <strong>use an outer function’s local variable</strong> (instead of <strong>shadowing it</strong>), that local variable should be declared <code>nonlocal</code> within the inner function. Using <code>nonlocal</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer_function</span>():<br>    string = <span class="hljs-string">&#x27;Hello&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_function</span>():<br>        <span class="hljs-comment"># Uses the local variable `string` of `outer_function`</span><br>        <span class="hljs-keyword">nonlocal</span> string<br>        string = <span class="hljs-string">&#x27;World&#x27;</span><br>    inner_function()<br>    <span class="hljs-keyword">return</span> string<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>outer_function()<br><span class="hljs-string">&#x27;World&#x27;</span><br></code></pre></td></tr></table></figure><hr><p><strong>Creating and returning a nested function based on a function argument</strong> is widely used in Python, called <strong>decorating a function</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cached</span>(<span class="hljs-params">function</span>):<br>    cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cached_function</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-keyword">nonlocal</span> function, cache<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">in</span> cache:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cache hit with args: <span class="hljs-subst">&#123;args&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> cache[args]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cache miss with args: <span class="hljs-subst">&#123;args&#125;</span>&#x27;</span>)<br>            result = function(*args)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Writing f(<span class="hljs-subst">&#123;args&#125;</span>) =&gt; <span class="hljs-subst">&#123;result&#125;</span> to cache&#x27;</span>)<br>            cache[args] = result<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> cached_function<br></code></pre></td></tr></table></figure><hr><p>Python even has special syntatical support for this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: fib(<span class="hljs-number">5</span>)                                                                                       <br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">5</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">4</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">3</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">2</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">1</span>,)<br>Writing f((<span class="hljs-number">1</span>,)) =&gt; <span class="hljs-number">1</span> to cache<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">0</span>,)<br>Writing f((<span class="hljs-number">0</span>,)) =&gt; <span class="hljs-number">0</span> to cache<br>Writing f((<span class="hljs-number">2</span>,)) =&gt; <span class="hljs-number">1</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">1</span>,)<br>Writing f((<span class="hljs-number">3</span>,)) =&gt; <span class="hljs-number">2</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">2</span>,)<br>Writing f((<span class="hljs-number">4</span>,)) =&gt; <span class="hljs-number">3</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">3</span>,)<br>Writing f((<span class="hljs-number">5</span>,)) =&gt; <span class="hljs-number">5</span> to cache<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>$O(n)$ time complexity.</p><hr><p>LeetCode problem: Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. </p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">1</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;()&quot;</span>]<br></code></pre></td></tr></table></figure><hr><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/grammar.png" alt="bg left contain"></p><p>We write a Context Free Grammar and analyze it:</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">S -&gt; S S&#x27; | <span class="hljs-type">S</span>&#x27; .<br>S&#x27; -&gt; ( S ) | <span class="hljs-type">( ) .</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://mdaines.github.io/grammophone/#">https://mdaines.github.io/grammophone/#</a></p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s_generator</span>(<span class="hljs-params">number_of_parenthesis</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s_generator(<span class="hljs-subst">&#123;number_of_parenthesis&#125;</span>)&#x27;</span>)<br>    <br>    return_value = []<br>    <br>    <span class="hljs-comment"># s -&gt; ss .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> ss_string <span class="hljs-keyword">in</span> ss_generator(number_of_parenthesis):<br>            return_value.append(ss_string)<br>    <br>    <span class="hljs-comment"># s -&gt; s ss .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt;= <span class="hljs-number">2</span>: <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, number_of_parenthesis):<br>            <span class="hljs-keyword">for</span> s_string, ss_string <span class="hljs-keyword">in</span> itertools.product(<br>                s_generator(i),<br>                ss_generator(number_of_parenthesis - i)<br>            ):<br>                return_value.append(s_string + ss_string)<br>    <br>    <span class="hljs-keyword">return</span> return_value<br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ss_generator</span>(<span class="hljs-params">number_of_parenthesis</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ss_generator(<span class="hljs-subst">&#123;number_of_parenthesis&#125;</span>)&#x27;</span>)<br>    <br>    return_value = []<br>    <br>    <span class="hljs-comment"># ss -&gt; ( ) .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis == <span class="hljs-number">1</span>:<br>        return_value.append(<span class="hljs-string">&#x27;()&#x27;</span>)<br>    <span class="hljs-comment"># ss -&gt; ( s ) .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> s_string <span class="hljs-keyword">in</span> s_generator(number_of_parenthesis - <span class="hljs-number">1</span>):<br>            return_value.append(<span class="hljs-string">&#x27;(&#x27;</span> + s_string + <span class="hljs-string">&#x27;)&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> return_value<br></code></pre></td></tr></table></figure><hr><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: s_generator(<span class="hljs-number">3</span>)                                                                               <br>s_generator(<span class="hljs-number">3</span>)<br>ss_generator(<span class="hljs-number">3</span>)<br>s_generator(<span class="hljs-number">2</span>)<br>ss_generator(<span class="hljs-number">2</span>)<br>s_generator(<span class="hljs-number">1</span>)<br>ss_generator(<span class="hljs-number">1</span>)<br>Out[<span class="hljs-number">4</span>]: [<span class="hljs-string">&#x27;((()))&#x27;</span>, <span class="hljs-string">&#x27;(()())&#x27;</span>, <span class="hljs-string">&#x27;()(())&#x27;</span>, <span class="hljs-string">&#x27;(())()&#x27;</span>, <span class="hljs-string">&#x27;()()()&#x27;</span>]<br><br>In [<span class="hljs-number">5</span>]: s_generator.cache_info()                                                                     <br>Out[<span class="hljs-number">5</span>]: CacheInfo(hits=<span class="hljs-number">3</span>, misses=<span class="hljs-number">3</span>, maxsize=<span class="hljs-literal">None</span>, currsize=<span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">6</span>]: ss_generator.cache_info()                                                                    <br>Out[<span class="hljs-number">6</span>]: CacheInfo(hits=<span class="hljs-number">3</span>, misses=<span class="hljs-number">3</span>, maxsize=<span class="hljs-literal">None</span>, currsize=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><hr><p>Closures also provide an efficient mechanism for <strong>maintaining state between several calls</strong>. Traditional (OOP) approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Countdown</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.n = n<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next_value</span>(<span class="hljs-params">self</span>):<br>        old_value = self.n<br>        self.n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> old_value<br></code></pre></td></tr></table></figure><hr><p>Closure-based approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next_value</span>():<br>        <span class="hljs-keyword">nonlocal</span> n<br>        old_value = n<br>        n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> old_value<br>    <br>    <span class="hljs-keyword">return</span> get_next_value<br></code></pre></td></tr></table></figure><hr><p>This is not only clean but also <strong>fast</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_object_oriented_approach</span>():<br>    c = Countdown(<span class="hljs-number">1_000_000</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = c.next_value()<br>        <span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_functional_approach</span>():<br>    get_next_value = countdown(<span class="hljs-number">1_000_000</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = get_next_value()<br>        <span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">5</span>]: %timeit test_object_oriented_approach()<br><span class="hljs-number">182</span> ms ± <span class="hljs-number">2.61</span> ms per loop (mean ± std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">1</span> loop each)<br><br>In [<span class="hljs-number">6</span>]: %timeit test_functional_approach()<br><span class="hljs-number">96.8</span> ms ± <span class="hljs-number">1.18</span> ms per loop (mean ± std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">10</span> loops each)<br></code></pre></td></tr></table></figure><p>Why?</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">9</span>]: c = Countdown(<span class="hljs-number">1_000_000</span>)<br>In [<span class="hljs-number">10</span>]: dis(c.next_value)<br>  <span class="hljs-number">6</span>           <span class="hljs-number">0</span> LOAD_FAST                <span class="hljs-number">0</span> (self)<br>              <span class="hljs-number">2</span> LOAD_ATTR                <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">4</span> STORE_FAST               <span class="hljs-number">1</span> (old_value)<br><br>  <span class="hljs-number">7</span>           <span class="hljs-number">6</span> LOAD_FAST                <span class="hljs-number">0</span> (self)<br>              <span class="hljs-number">8</span> DUP_TOP<br>             <span class="hljs-number">10</span> LOAD_ATTR                <span class="hljs-number">0</span> (n)<br>             <span class="hljs-number">12</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)<br>             <span class="hljs-number">14</span> INPLACE_SUBTRACT<br>             <span class="hljs-number">16</span> ROT_TWO<br>             <span class="hljs-number">18</span> STORE_ATTR               <span class="hljs-number">0</span> (n)<br><br>  <span class="hljs-number">8</span>          <span class="hljs-number">20</span> LOAD_FAST                <span class="hljs-number">1</span> (old_value)<br>             <span class="hljs-number">22</span> RETURN_VALUE<br></code></pre></td></tr></table></figure><p>12 instructions, 2 <code>LOAD_ATTR</code> instructions, 1 <code>STORE_ATTR</code> instruction.</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">11</span>]: get_next_value = countdown(<span class="hljs-number">1_000_000</span>)<br>In [<span class="hljs-number">12</span>]: dis(get_next_value)<br>  <span class="hljs-number">4</span>           <span class="hljs-number">0</span> LOAD_DEREF               <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">2</span> STORE_FAST               <span class="hljs-number">0</span> (old_value)<br><br>  <span class="hljs-number">5</span>           <span class="hljs-number">4</span> LOAD_DEREF               <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">6</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)<br>              <span class="hljs-number">8</span> INPLACE_SUBTRACT<br>             <span class="hljs-number">10</span> STORE_DEREF              <span class="hljs-number">0</span> (n)<br><br>  <span class="hljs-number">6</span>          <span class="hljs-number">12</span> LOAD_FAST                <span class="hljs-number">0</span> (old_value)<br>             <span class="hljs-number">14</span> RETURN_VALUE<br></code></pre></td></tr></table></figure><p>8 instructions, NO <code>LOAD_ATTR</code>, <code>STORE_ATTR</code> instructions.</p><hr><!-- header: Contents --><ul><li>Closures</li><li>Generators👈</li><li>Coroutines</li></ul><hr><!-- header: Generators --><p>When we define a function containing the <code>yield</code> keyword, we define a generator. Defining a generator allows the user to define a <strong>custom iterator</strong> in the style of defining a function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p>We create a <strong>generator object</strong> when we call a generator definition. The generator object can be used like any iterator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: c = countdown(<span class="hljs-number">5</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">5</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> c:<br>   ...:     <span class="hljs-built_in">print</span>(value)<br>   ...:<br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p>When we call <code>next()</code> on a generator object, it will execute code, until it encounters a <code>yield</code> statement. The <code>yield</code> statement tells the generator object to <strong>return a value, and continue execution from here when <code>next()</code> is called again</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: c = countdown(<span class="hljs-number">5</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">yield</span> n<br></code></pre></td></tr></table></figure><hr><p>When we call <code>next()</code> on a generator object, it will execute code, until it encounters a <code>yield</code> statement. The <code>yield</code> statement tells the generator object to <strong>return a value, and continue execution from here when <code>next()</code> is called again</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   n -= <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>   <span class="hljs-keyword">yield</span> n<br></code></pre></td></tr></table></figure><hr><p>This is called <strong>lazy evaluation</strong>. This can dramatically boost performance and reduce memory usage in some applications. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_comments_from_file</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fp:<br>            <span class="hljs-comment"># strip whitespace</span><br>            stripped_line = line.strip()<br>            <span class="hljs-comment"># check if the line is empty after stripping whitespace</span><br>            <span class="hljs-keyword">if</span> stripped_line:<br>                <span class="hljs-comment"># check if the line is a comment</span><br>                <span class="hljs-keyword">if</span> stripped_line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>:<br>                    <span class="hljs-comment"># if it is, yield it</span><br>                    <span class="hljs-keyword">yield</span> stripped_line<br></code></pre></td></tr></table></figure><hr><p>This will <strong>NOT</strong> read the whole file into memory. Only when the user calls <code>next()</code> on the generator object, will the generator read the file <strong>LINE BY LINE</strong> (with only <strong>ONE LINE</strong> of the file in memory at once), and return the next comment line.</p><p>This is an efficient way of extracting comments from GB-sized files (such as logs).</p><hr><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><p>Python provides many functions for creating an iterator from another iterator. For example:</p><ul><li><code>itertools.permutations(iterable [, r])</code></li><li><code>itertools.combinations(iterable, r)</code></li><li><code>itertools.product(iter1, iter2, iterN, [repeat=1])</code></li></ul><hr><p>Widely used in algorithms: <code>itertools.permutations(iterable [,r])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br><br>In [<span class="hljs-number">2</span>]: numbers = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br>In [<span class="hljs-number">3</span>]: permutations_of_two_numbers_iterator = itertools.permutations(numbers, r=<span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">4</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">5</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><hr><p>Widely used in algorithms: <code>itertools.combinations(iterable ,r)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br>In [<span class="hljs-number">2</span>]: numbers = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">for</span> first, second <span class="hljs-keyword">in</span> itertools.combinations(numbers, <span class="hljs-number">2</span>):<br>   ...:     <span class="hljs-built_in">print</span>(first, second)<br>   ...:<br><span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><p>Widely used in algorithms: <code>itertools.product(iter1, iter2, iterN, [repeat=1])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br>In [<span class="hljs-number">2</span>]: first_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>In [<span class="hljs-number">3</span>]: second_list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>In [<span class="hljs-number">4</span>]: third_list = [<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>]<br><br>In [<span class="hljs-number">5</span>]: it = itertools.product(first_list, second_list, third_list)<br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-literal">True</span>)<br>In [<span class="hljs-number">7</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-literal">False</span>)<br>In [<span class="hljs-number">8</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">8</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><!-- header: Contents --><ul><li>Closures</li><li>Generators</li><li>Coroutines👈</li></ul><hr><!-- header: Coroutines --><p>Starting from Python 2.5, the <code>yield</code> statement can be used as an <strong>right value</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">captured_input = <span class="hljs-keyword">yield</span> value_to_yield<br></code></pre></td></tr></table></figure><p>Generators defined like this can <strong>accept sent input</strong> while providing output. These generators are called <strong>coroutines</strong>.</p><hr><p>The concept of coroutines was proposed in the 60s, but only gained traction in recent years.</p><p>Coroutines can be seen as a combination of <strong>subroutines</strong> and <strong>threads</strong>.</p><ul><li>Can <strong>pause and restart</strong> during execution.</li><li>Controlled by <strong>itself</strong> instead of the operating system.</li><li>Different coroutines run within a thread are <strong>concurrent</strong> instead of <strong>parallel</strong>.</li></ul><hr><p>Simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_mean</span>():<br>    current_input = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-built_in">sum</span> = current_input<br>    count = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br>        <br>        <span class="hljs-built_in">sum</span> += current_input<br>        count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p>Simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">3</span>]: updater = update_mean()<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(updater)<br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">current_input = <span class="hljs-keyword">yield</span><br></code></pre></td></tr></table></figure><p>And the coroutine waits for an input to be sent.</p><hr><p>Send an input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">5</span>]: updater.send(<span class="hljs-number">2</span>)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure><p>The coroutine receives the input, and executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span> = current_input<br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br></code></pre></td></tr></table></figure><p>And the coroutine waits for an input to be sent.</p><hr><p>Send an input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">6</span>]: updater.send(<span class="hljs-number">4</span>)<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">3.0</span><br></code></pre></td></tr></table></figure><p>The coroutine receives the input, and executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-built_in">sum</span> += current_input<br>    count += <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br></code></pre></td></tr></table></figure><p>And the coroutine waits again for an input to be sent.</p><hr><p>More complicated example: set-associative cache simulation</p><ul><li><p><code>number_of_cache_sets</code> * Set</p><ul><li><code>number_of_ways_of_associativity</code> * Block<ul><li><code>block_size_in_bytes</code> * Byte</li></ul></li></ul></li><li><p>The whole set-associative cache is a coroutine receiving <code>(address, is_write)</code> tuples as input, and calculating <code>(cache_hit, writeback_address)</code> tuples as output.</p><ul><li>It models <strong>each set</strong> as a coroutine receiving <code>(tag, is_write)</code> tuples as input, and calculating <code>(cache_hit, writeback_address)</code> tuples as output.<ul><li>Different coroutine definitions for round-robin, LRU, etc.</li></ul></li></ul></li></ul><hr><p>The whole set-associative cache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cache_coroutine</span>(<span class="hljs-params">cache_set_coroutine_function, block_size_in_bytes, number_of_ways_of_associativity, number_of_cache_sets</span>):<br>    <span class="hljs-comment"># create cache_set_coroutine_list and activate each cache_set_coroutine</span><br>    cache_set_coroutine_list = [ cache_set_coroutine_function(number_of_ways_of_associativity) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_of_cache_sets) ]<br>    <span class="hljs-keyword">for</span> cache_set_coroutine <span class="hljs-keyword">in</span> cache_set_coroutine_list:<br>        <span class="hljs-built_in">next</span>(cache_set_coroutine)<br>    <br>    <span class="hljs-comment"># get function_to_split_address and function_to_merge_address</span><br>    function_to_split_address, function_to_merge_address = get_functions_to_split_and_merge_address(<br>        block_size_in_bytes,<br>        number_of_cache_sets<br>    )<br>    <br>    <span class="hljs-comment"># receive address, is_write</span><br>    <span class="hljs-comment"># yields nothing</span><br>    address, is_write = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># splits address</span><br>        tag, cache_set_index, offset = function_to_split_address(address)<br>        <br>        <span class="hljs-comment"># send (tag, is_write) to the appropriate cache_set_coroutine</span><br>        cache_hit, victim_tag, writeback_required = cache_set_coroutine_list[cache_set_index].send((tag, is_write))<br>        <br>        <span class="hljs-comment"># create writeback_address if (victim_tag is not None) and writeback_required</span><br>        <span class="hljs-keyword">if</span> (victim_tag <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>) <span class="hljs-keyword">and</span> writeback_required:<br>            writeback_address = function_to_merge_address(victim_tag, cache_set_index, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            writeback_address = <span class="hljs-literal">None</span><br>        <br>        <span class="hljs-comment"># receive address, is_write</span><br>        <span class="hljs-comment"># yield cache_hit, writeback_address</span><br>        address, is_write = <span class="hljs-keyword">yield</span> cache_hit, writeback_address<br></code></pre></td></tr></table></figure><hr><p>Cache Set with LRU replacement policy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lru_cache_set_coroutine</span>(<span class="hljs-params">associativity</span>):<br>    tag_list = [ <span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity) ]<br>    dirty_bit_list = [ <span class="hljs-literal">False</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity) ]<br>    <br>    indices_in_lru_order = OrderedDict()<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        indices_in_lru_order[index] = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-comment"># receive first tag and is_write</span><br>    tag, is_write = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        cache_hit = <span class="hljs-literal">False</span><br>        victim_tag = <span class="hljs-literal">None</span><br>        writeback_required = <span class="hljs-literal">False</span><br>        <br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># find tag_index</span><br>            tag_index = tag_list.index(tag)<br>            <br>            <span class="hljs-comment"># tag_index found</span><br>            cache_hit = <span class="hljs-literal">True</span><br>            <br>            <span class="hljs-keyword">if</span> is_write:<br>                dirty_bit_list[tag_index] = <span class="hljs-literal">True</span><br>            <br>            <span class="hljs-comment"># move tag_index to the end of indices_in_lru_order</span><br>            indices_in_lru_order.move_to_end(tag_index)<br>        <br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-comment"># tag_index not found</span><br>            <span class="hljs-comment"># get index_of_victim from indices_in_lru_order</span><br>            index_of_victim, _ = indices_in_lru_order.popitem(last=<span class="hljs-literal">False</span>)<br>            <br>            victim_tag = tag_list[index_of_victim]<br>            <br>            <span class="hljs-keyword">if</span> dirty_bit_list[index_of_victim]:<br>                writeback_required = <span class="hljs-literal">True</span><br>            <br>            tag_list[index_of_victim] = tag<br>            <br>            <span class="hljs-keyword">if</span> is_write:<br>                dirty_bit_list[index_of_victim] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                dirty_bit_list[index_of_victim] = <span class="hljs-literal">False</span><br>            <br>            <span class="hljs-comment"># insert index_of_victim to the end of indices_in_lru_order</span><br>            indices_in_lru_order[index_of_victim] = <span class="hljs-literal">None</span><br>            <br>        <span class="hljs-comment"># receive tag and is_write</span><br>        <span class="hljs-comment"># yield (cache_hit, victim_tag, writeback_required)</span><br>        tag, is_write = <span class="hljs-keyword">yield</span> (cache_hit, victim_tag, writeback_required)<br></code></pre></td></tr></table></figure><hr><ul><li>Suppose our cache has only <em>eight</em> blocks and each block contains <em>four</em> words.</li><li>The cache is <em>2-way</em> set associative, so there are four sets of two blocks.</li><li>The write policy is <em>write-back</em> and write-allocate.</li><li><em>LRU replacement</em> is used.</li></ul><blockquote><p><a href="https://courses.cs.washington.edu/courses/cse378/02sp/sections/section9-3.html">https://courses.cs.washington.edu/courses/cse378/02sp/sections/section9-3.html</a></p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">3</span>]: cache = cache_coroutine(lru_cache_set_coroutine, block_size_in_bytes=<span class="hljs-number">4</span> *<br>   ...:  <span class="hljs-number">2</span>, number_of_ways_of_associativity=<span class="hljs-number">2</span>, number_of_cache_sets=<span class="hljs-number">4</span>)          <br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(cache)                                                             <br><br>In [<span class="hljs-number">5</span>]: cache.send((<span class="hljs-number">0</span>, <span class="hljs-literal">True</span>))                                                   <br>Out[<span class="hljs-number">5</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">6</span>]: cache.send((<span class="hljs-number">64</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">7</span>]: cache.send((<span class="hljs-number">4</span>, <span class="hljs-literal">True</span>))                                                   <br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-literal">True</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">8</span>]: cache.send((<span class="hljs-number">40</span>, <span class="hljs-literal">True</span>))                                                  <br>Out[<span class="hljs-number">8</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">9</span>]: cache.send((<span class="hljs-number">68</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">9</span>]: (<span class="hljs-literal">True</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">10</span>]: cache.send((<span class="hljs-number">128</span>, <span class="hljs-literal">True</span>))                                                <br>Out[<span class="hljs-number">10</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-number">0</span>)<br><br>In [<span class="hljs-number">11</span>]: cache.send((<span class="hljs-number">0</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">11</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: The Fundamentals of Writing Questions</title>
    <link href="/2022/10/26/Paper-Reading-The-Fundamentals-of-Writing-Questions/"/>
    <url>/2022/10/26/Paper-Reading-The-Fundamentals-of-Writing-Questions/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://www.wiley.com/en-us/Internet,+Phone,+Mail,+and+Mixed+Mode+Surveys:+The+Tailored+Design+Method,+4th+Edition-p-9781118456149">here</a>.</p><p>This part of the book addresses the problem of crafting survey questions that respondents are willing to answer and respond to accurately. It first discusses issues to consider when designing survey questions, then presents the structure of a survey question and different question formats, before providing specific guidelines on wording survey questions.</p><h2 id="Issues-to-consider-when-designing-survey-questions"><a href="#Issues-to-consider-when-designing-survey-questions" class="headerlink" title="Issues to consider when designing survey questions"></a>Issues to consider when designing survey questions</h2><ul><li>What concepts to measure<ul><li>Recommended: Adopt established measures from existing surveys</li></ul></li><li>What data to collect<ul><li>Factual information: precise, readily available</li><li>Opinion: requires time to formulate, strongly influenced by context</li><li>Behavior: better memory of recent, memorable events compared with distant, mundane events</li></ul></li><li>What question format to use<ul><li>Different cognitive information processing for aural and visual surveys</li></ul></li><li>What mode to adopt<ul><li>The presence of an interviewer may speed up surveys, but may induce social desirability and acquiescence, leading to interviewer bias.</li><li>Lack of standardization among different interviewers may lead to interviewer variance.</li></ul></li><li>What to modify (from existing surveys)<ul><li>no changes or only minimal changes when replicating or comparing results<ul><li>questions should also be asked in a similar fashion</li></ul></li></ul></li><li>How to motivate respondents<ul><li>think about the cognitive process respondents go through</li><li>pay attention to the context and wording</li></ul></li></ul><h2 id="The-structure-of-a-survey-question"><a href="#The-structure-of-a-survey-question" class="headerlink" title="The structure of a survey question"></a>The structure of a survey question</h2><ul><li>Question stem</li><li>Additional instructions</li><li>Answer spaces or choices</li></ul><h2 id="Different-question-formats"><a href="#Different-question-formats" class="headerlink" title="Different question formats"></a>Different question formats</h2><ul><li>Open-ended<ul><li>rich, detailed</li><li>more prone to skipping</li><li>requires lengthy data processing</li></ul></li><li>Closed-ended<ul><li>nominal or ordinal categories</li><li>set of answer choices known in advance</li><li>easy to analyze</li></ul></li><li>Partially closed-ended<ul><li>closed-ended with “other” response</li><li>respondents more likely to select the options instead of “other”</li></ul></li></ul><h2 id="Specific-guidelines-on-wording-survey-questions"><a href="#Specific-guidelines-on-wording-survey-questions" class="headerlink" title="Specific guidelines on wording survey questions"></a>Specific guidelines on wording survey questions</h2><ul><li>Choose the appropriate question format.</li><li>Make sure the question applies to the respondent.</li><li>Ask one question at a time.</li><li>Make sure the question is technically accurate.</li><li>Use simple, familiar and specific words.</li><li>Use short, simple sentences that take a question form.</li><li>Avoid double negatives.</li><li>Organize questions in a more straightforward, comprehensible way.</li></ul><p>Also sprinkled throughout the section is the notion that the crafter should get into a respondent’s state of mind when crafting survey questions, and also test the survey questions to evaluate their quality.</p><p>This section is very comprehensive and convincing, as the author supports his arguments by analyzing specific examples from actual surveys, and also frequently quoting previous work on the topic. From such a chapter we can gain a deep understanding of the nature of survey questions, especially the underlying cognitive, psychology and sociology problems, as well as the best practices within the domain, and we can also refer to this chapter as a guide and checklist when we craft survey questions ourselves.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)</title>
    <link href="/2022/10/25/Paper-Reading-All-You-Ever-Wanted-to-Know-About-Dynamic-Taint-Analysis-and-Forward-Symbolic-Execution-but-might-have-been-afraid-to-ask/"/>
    <url>/2022/10/25/Paper-Reading-All-You-Ever-Wanted-to-Know-About-Dynamic-Taint-Analysis-and-Forward-Symbolic-Execution-but-might-have-been-afraid-to-ask/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1109/SP.2010.26">here</a>.</p><p>Forward symbolic execution and dynamic taint analysis are quickly becoming “staple techniques in security analyses”. </p><ol><li>Dynamic taint analysis runs a program and observes which computations are affected by predefined taint sources such as user input.</li><li>Dynamic forward symbolic execution automatically builds a logical formula describing a program execution path, which reduces the problem of reasoning about the execution to logic, allowing us to reason about the behavior of a program on many different inputs at one time.</li><li>The two analyses can be used in conjunction to build formulas representing only the parts of an execution that depend upon tainted values.</li></ol><p>Forward symbolic execution:</p><ol><li>Test Case Generation (automatically generate inputs to test programs, generate inputs that cause two implementations of the same protocol to behave differently)</li><li>Automatic Input Filter Generation (input filters that detect and remove exploits from the input stream)</li></ol><p>Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the USENIX Symposium on Operating System Design and Implementation, 2008.</p><p>Cristian Cadar, Vijay Ganesh, Peter Pawlowski, David Dill, and Dawson Engler. EXE: A system for automatically generating inputs of death using symbolic execution. In Proceedings of the ACM Conference on Computer and Communications Security, October 2006.</p><p>Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed automated random testing. In Proceedings of the ACM Conference on Programming Language Design and Implementation, 2005.</p><p>Dynamic taint analysis:</p><ol><li>Unknown Vulnerability Detection (misuses of user input)</li><li>Automatic Network Protocol Understanding. Dynamic taint analysis has been used to automatically understand the behavior of network protocols when given an implementation of the protocol.</li><li>Malware Analysis (analyze how information flows through a malware binary, explore trigger-based behavior, and detect emulators)</li></ol><p>However, there has been little effort to formally define them and summarize critical issues that arise when applying these techniques in “typical security contexts”.</p><p>The authors formalize the runtime semantics of dynamic taint analysis and forward symbolic execution by using SIMPIL (Simple Intermediate Language), which is “representative of internal representations used by compilers and is powerful enough to express typical languages”.</p><hr><p>Concepts:</p><ul><li>Statements: assignments, assertions, jumps, conditional jumps.</li><li>Expressions: constants, variables, binary operators, unary operators, get_input.</li><li>Execution state: the list of program statements, the current memory state, the current value for variables, the program counter, the current statement.</li></ul><p>Notation:</p><ul><li>$\Sigma$: list of program statements<ul><li>$\Sigma[v_1]$: statement at $pc &#x3D; v_1$.</li></ul></li><li>$\mu$: memory state<ul><li>$\mu[v_1]$: memory content at address $v_1$</li></ul></li><li>$\Delta$: register state (values of all variables)<ul><li>$\Delta[x]$: value of variable $x$</li><li>$\Delta[x \leftarrow 10]$: setting the value of variable $x$ to 10</li></ul></li><li>$pc$: program counter.</li><li>$\mu, \Delta \vdash e \Downarrow v$: Given memory state $\mu$ and register state $\Delta$, the value of expression $e$ is $v$.</li><li>$\Sigma, \mu, \Delta, pc, EXPRESSION \rightsquigarrow \Sigma, \mu’, \Delta’, pc’, {EXPRESSION}’$: Given list of program statements $\Sigma$, memory state $\mu$, register state $\Delta$, program counter $pc$, executing expression $EXPRESSION$ leads to new memory state $\mu’$, new register state $\Delta’$, new program counter $pc’$, and the next expression is ${EXPRESSION}’$.</li></ul><p>Other high-level language constructs such as functions or scopes can be easily represented using these constructs.</p><hr><p>Dynamic taint analysis tracks values in a program dependent on data derived from a “taint source” at runtime. As it is conducted at runtime, it can be expressed by extending SIMPIL.</p><p>Dynamic taint analysis is conducted in different ways (i.e., under different “taint policies”) for different applications. The differences lie in “how new taint is introduced to a program”, “how taint propagates as instructions execute”, and “how taint is checked during execution”. The author presents the example of the “tainted jump policy” for attack detection, points out several challenges it faces, and analyzes the proposed solutions.</p><ul><li>“Distinguishing between memory addresses and cells is not always appropriate”. An alternative “tainted addresses policy” could be used, but this may also overtaint.</li><li>Information flow can occur through control dependencies in addition to dataflow dependencies. This requires “reasoning about multiple paths”, while pure dynamic taint analysis “executes on a single path at a time”. Solutions include “supplementing dynamic analysis with static analysis” and “using heuristics”.</li><li>Taint is only added and never removed (i.e., “sanitized”), leading to the problem of “taint spread”, reducing precision. Well-known constant functions (i.e. using XOR to zero out registers in x86 code) can be checked. In addition, we can consider the outputs of some functions like cryptographic hash functions as untainted, due to limited influence of input on output. This can be quantified (Newsome  et al.) to automatically recognize such cases. Furthermore, values can be untainted “if the program logic performs sanitization itself” (e.g., index bounds checking).</li></ul><p>In conclusion, this paper is an useful introductory paper in forward symbolic execution and dynamic taint analysis, and I have mainly learned the following two things from the paper:</p><ul><li>The idea of formalizing runtime semantics using RISC-like bytecode</li><li>An introduction to dynamic taint analysis - what it is, what it can do, and what challenges it faces</li></ul><hr><p>Feedback from the Class Discussion</p><ul><li>What is the difference between a statement and an expression? A statement can modify program state when it is executed, while an expression doesn’t modify program state.</li><li>In the formalism of SIMPIL, we determine which expression to evaluate by <strong>pattern-matching the rule</strong>.</li><li>LLVM has a dataflow sanitization pass, which may be useful for implementing taint analysis.</li><li>Dynamic program analysis only looks at a single path. If we are to <strong>prove something about a program</strong>, static program analysis would be a better direction.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: ReCrash: Making Software Failures Reproducible by Preserving Object States</title>
    <link href="/2022/10/25/Paper-Reading-ReCrash-Making-Software-Failures-Reproducible-by-Preserving-Object-States/"/>
    <url>/2022/10/25/Paper-Reading-ReCrash-Making-Software-Failures-Reproducible-by-Preserving-Object-States/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1007/978-3-540-70592-5_23">here</a>.</p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Reproduction is key to finding and fixing software problems and verifying proposed solutions, but reproduction can be difficult.</p><ul><li>Nondeterminism: A problem may depend on timing (e.g., context switching), memory layout (e.g., hash codes), or random number generators.</li><li>Remote detection: A problem may be discovered by someone other than the developer, and it may depend on implicit program inputs such as user GUI actions, environment variables, the state of the file system, operating system behavior, etc. This information may be easy to miss, difficult to collect, or confidential.</li><li>Test case complexity: The exposing execution might be complex, and the buggy method might be called multiple times before the bug is triggered.</li></ul><hr><h1 id="Proposed-Solution-ReCrash"><a href="#Proposed-Solution-ReCrash" class="headerlink" title="Proposed Solution: ReCrash"></a>Proposed Solution: ReCrash</h1><p>ReCrash maintains a <strong>shadow stack</strong> with copies of the receiver and arguments to each method during execution of the target program.</p><ul><li>Several copy strategies</li><li>Several optimizations</li></ul><p>When the program crashes, ReCrash serializes the shadow stack, and generates <strong>unit tests</strong> by calling <strong>each</strong> method on the shadow call stack with their receiver and arguments.</p><ul><li>Calling the method at top of the call stack may not provide enough context.</li><li>Calling a method closer to the bottom provides more context, but is less likely to reproduce the original failure.</li></ul><hr><h1 id="Proposed-Solution-ReCrash-1"><a href="#Proposed-Solution-ReCrash-1" class="headerlink" title="Proposed Solution: ReCrash"></a>Proposed Solution: ReCrash</h1><p>Assumption:</p><ul><li>It is possible to reproduce many failures with only some of the information available on entry to the methods on the stack at the time of the failure.<ul><li>Many bugs are dependent on small parts of the heap.</li><li>Good object-oriented style encapsulates important state nearby.</li><li>Good object-oriented style avoids excessive use of globals.</li></ul></li><li>ReCrash has access to and will store any parts of the global state or environment that are passed as method arguments.</li></ul><p><strong>Question: What if global state is read or written in the method?</strong></p><hr><h1 id="Monitoring-Phase"><a href="#Monitoring-Phase" class="headerlink" title="Monitoring Phase"></a>Monitoring Phase</h1><ul><li>Several copy strategies</li><li>Several optimizations<ul><li>Monitoring fewer methods</li><li>Second-chance mode</li></ul></li></ul><hr><h1 id="Copy-Strategies"><a href="#Copy-Strategies" class="headerlink" title="Copy Strategies"></a>Copy Strategies</h1><p>An argument may be side-effected between the method entry and the point of the failure in the method. Copying strategies:</p><ul><li>Reference: copying only the reference to the argument.</li><li>Shallow: copying the argument itself.</li><li>Depth-i: copying all the state reachable with $\le i$ dereferences from the argument.</li><li>Deep-copy: copying the entire state.</li></ul><p>Options:</p><ul><li>Used-fields: deeper copying on fields that are used (read or written) in the method.</li></ul><p>ReCrash always uses the reference strategy for immutable parameters. </p><hr><h1 id="Monitoring-Fewer-Methods"><a href="#Monitoring-Fewer-Methods" class="headerlink" title="Monitoring Fewer Methods"></a>Monitoring Fewer Methods</h1><p>Dosen’t monitor methods that cannot be used in the generated tests, or are unlikely to expose problems.</p><ul><li>non-public methods</li><li>empty methods</li><li>simple methods such as getters and setters (no more than 6 opcodes)</li></ul><hr><h1 id="Second-chance-Mode"><a href="#Second-chance-Mode" class="headerlink" title="Second-chance Mode"></a>Second-chance Mode</h1><ul><li>ReCrash initially monitors no method calls.</li><li>Each time a failure occurs, ReCrash enables method argument monitoring for all methods found on the stack trace.</li><li>Efficient, but requires a failure to be repeated twice. If the developer doesn’t mind missing the first time a failure happens, and the failure occurs relatively often, second chance mode is a good fit.</li></ul><p><strong>Question: could recording all inputs provided to the program be used in tandom with second-chance mode (such that the failure is probable to happen the second time)?</strong></p><hr><h1 id="Test-Generation-Phase"><a href="#Test-Generation-Phase" class="headerlink" title="Test Generation Phase"></a>Test Generation Phase</h1><p>ReCrash generates a test for each of the methods in the shadow stack.</p><ul><li>Restores the state of the arguments that were passed to a method.</li><li>Invokes the method the same way it was invoked in the original execution. Only tests that end with the same exception as the original failure are saved.</li><li>Storing more than one test that ends with the same failure is useful. Some tests reproduce a failure, but would not help the developer understand, fix, or check her solution.</li></ul><hr><h1 id="Experimental-Study"><a href="#Experimental-Study" class="headerlink" title="Experimental Study"></a>Experimental Study</h1><p>Subject programs:</p><ul><li>Javac-jsr308: the OpenJDK Java compiler, extended with JSR308 (“Annotations on Java Types”), with four crashes provided by the developers.</li><li>SVNKit: a subversion  client, with three crash examples from bug reports.</li><li>Eclipsec: a Java compiler included in the Eclipse JDT, with a crash found in the Eclipse bug database.</li><li>BST: a toy subject program used by Csallner in evaluating CnC, with three crashes found by CnC.</li></ul><hr><h1 id="Experimental-Study-1"><a href="#Experimental-Study-1" class="headerlink" title="Experimental Study"></a>Experimental Study</h1><p>For each subject program:</p><ul><li>Run PIDASA for parameter immutability classification.</li><li>For different argument copying strategies, with and without second-chance mode:<ul><li>Run ReCrash on inputs that made the subject programs crash.</li><li>Count how many test cases reproduced each crash.</li></ul></li></ul><p><strong>Question: how useful would ReCrash be in reality where it is unknown whether the subject projects could crash, and which inputs would make the subject programs crash?</strong></p><hr><h1 id="Experimental-Study-2"><a href="#Experimental-Study-2" class="headerlink" title="Experimental Study"></a>Experimental Study</h1><p>Research questions:</p><ul><li>How reliably can ReCrashJ reproduce crashes?</li><li>What is the size of the stored deep copy of the shadow stack?</li><li>Are the tests generated by ReCrash useful for debugging?<ul><li>Like a <strong>case study</strong>: an analysis of two crashes, and comments from developers</li></ul></li><li>What is the overhead (time and memory) of running ReCrash?</li></ul><p>Aspects assessed:</p><ul><li>different argument copying strategies</li><li>with and without second-chance mode</li></ul><hr><h1 id="How-reliably-can-ReCrash-reproduce-crashes"><a href="#How-reliably-can-ReCrash-reproduce-crashes" class="headerlink" title="How reliably can ReCrash reproduce crashes?"></a>How reliably can ReCrash reproduce crashes?</h1><p>ReCrash was able to reproduce the crash in all cases.</p><ul><li>For some crashes, every candidate test case reproduces the crash.</li><li>For other crashes, only a subset of the generated test cases reproduces the crash.</li></ul><p>In most cases, simply copying references is enough to reproduce crashes. In other cases, using the shallow copying strategy with used-fields was necessary.</p><hr><h1 id="What-is-the-size-of-the-stored-deep-copy-of-the-shadow-stack"><a href="#What-is-the-size-of-the-stored-deep-copy-of-the-shadow-stack" class="headerlink" title="What is the size of the stored deep copy of the shadow stack?"></a>What is the size of the stored deep copy of the shadow stack?</h1><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/subject_programs_and_crashes_used_in_our_experimental_study.png" alt="Subject Programs and Crashes Used in our Experimental Study"></p><p><strong>Question: why isn’t it compared with the program size and the program memory usage?</strong></p><hr><h1 id="An-analysis-of-two-crashes"><a href="#An-analysis-of-two-crashes" class="headerlink" title="An analysis of two crashes"></a>An analysis of two crashes</h1><p>Eclipsec bug e1:</p><ul><li>Eclipsec crashes in callee <code>canBeInstantiated</code> because an earlier if statement in the caller <code>resolveType</code> failed to set a boolean flag <code>hasError</code> to true.</li><li>The test case for <code>canBeInstantiated</code> will reproduce the crash, but is not helpful.</li><li>Demonstrates importance of generating tests for multiple methods on the stack.</li></ul><p>Javac-jsr308 bug j4:</p><ul><li>Compiling source code containing an annotation with too many arguments results in an index-out-of-bounds exception in method <code>visitMethodInvocation</code>. </li><li>The generated test does not require the whole source code and encodes only the necessary minimum to reproduce the crash.</li><li>Useful when the compiler crash happens in the field, and the user cannot provide the entire source code for debugging.</li></ul><hr><h1 id="Comments-from-Developers"><a href="#Comments-from-Developers" class="headerlink" title="Comments from Developers"></a>Comments from Developers</h1><p>We gave the tests for j1-4 to two Javac-jsr308 developers and asked for comments about the tests’ usefulness, receiving positive responses.</p><ul><li>I often have to climb back up through a stack trace when debugging. ReCrash seems to generate a test method for multiple levels of the stack, making it useful.</li><li>I find that you wouldn’t have to wait for the crash to occur again useful.</li><li>When I set a break point, the break point maybe be executed multiple times before the error. Using ReCrash, I was able to jump (almost directly) to the necessary breakpoint.</li></ul><p><strong>Question: Why only analyze two crashes and ask only two developers?</strong></p><hr><h1 id="What-is-the-overhead-time-and-memory-of-running-ReCrash"><a href="#What-is-the-overhead-time-and-memory-of-running-ReCrash" class="headerlink" title="What is the overhead (time and memory) of running ReCrash?"></a>What is the overhead (time and memory) of running ReCrash?</h1><h2 id="Time-overhead"><a href="#Time-overhead" class="headerlink" title="Time overhead"></a>Time overhead</h2><p>Non second-chance mode:</p><ul><li>Copying only the references can be expensive (11%-42%), and shallow copying with used-fields is similar (13%–60%). Usable for in-house testing.</li><li>Deep copying is completely unusable (12,000%-638,000%).</li></ul><p>Second-chance mode:</p><ul><li>A barely noticeable 0%–1.7% under copying only the references and shallow copying with used-fields, after a crash has already been observed.</li></ul><hr><h1 id="What-is-the-overhead-time-and-memory-of-running-ReCrash-1"><a href="#What-is-the-overhead-time-and-memory-of-running-ReCrash-1" class="headerlink" title="What is the overhead (time and memory) of running ReCrash?"></a>What is the overhead (time and memory) of running ReCrash?</h1><h2 id="Memory-overhead"><a href="#Memory-overhead" class="headerlink" title="Memory overhead"></a>Memory overhead</h2><p>Non second-chance mode:</p><ul><li>0.2M–4.7M (2.6%-90.3%) under shallow copying with used-fields.</li></ul><p>Second-chance mode:</p><ul><li>negligible</li></ul><hr><h1 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h1><p>ReCrashJ is usable in real software deployment</p><ul><li>Simple to implement</li><li>Scalable</li><li>Generates simple, helpful test cases that effectively reproduce failures</li><li>Time and memory overhead (13%–60%, 2.6%-90.3%) under non second-chance mode and shallow copying with used-fields usable for in-house testing</li><li>Extremely efficient under second-chance mode</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Evolutionary Generation of Whole Test Suites</title>
    <link href="/2022/10/24/Paper-Reading-Evolutionary-Generation-of-Whole-Test-Suites/"/>
    <url>/2022/10/24/Paper-Reading-Evolutionary-Generation-of-Whole-Test-Suites/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1109/QSIC.2011.19">here</a>.</p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Automatically deriving test cases for realistically sized programs:</p><ul><li>Select one coverage goal (e.g., program branch) at a time, and derive a test case that exercises this particular goal.<ul><li>Solving path constraints generated with symbolic execution &#x2F; dynamic symbolic execution</li><li>Meta-heuristic search techniques</li><li>Mutation testing</li></ul></li><li>Alternative approaches not directly aimed to achieve code coverage<ul><li>Randoop<ul><li>incrementally generate sequences of function calls to find buggy test sequences</li><li>requires automated oracles (e.g. developer-written assertions and exceptions)</li></ul></li></ul></li></ul><hr><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><p>Many coverage goals are unreachable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt;= values.length) &#123;<br>        resize();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt; values.length) &#123;<br>        values[size++] = x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// UNREACHABLE</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="Problems-1"><a href="#Problems-1" class="headerlink" title="Problems"></a>Problems</h1><p>Some coverage goals are more difficult to satisfy than others.</p><p>The order of coverage goals is important: a lucky choice can result in a good test suite, while an unlucky choice can result in a waste of resources.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt;= values.length) &#123;<br>        <span class="hljs-comment">// HARD</span><br>        resize();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// EASY</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt; values.length) &#123;<br>        values[size++] = x;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="Problems-2"><a href="#Problems-2" class="headerlink" title="Problems"></a>Problems</h1><p>Satisfying a particular coverage goal frequently entails satisfying further coverage goals by accident.</p><p>The order of coverage goals is important.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// May imply coverage in `push` and `resize`</span><br>        <span class="hljs-keyword">return</span> values[size];<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyStackException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="Our-Solution-EvoSuite"><a href="#Our-Solution-EvoSuite" class="headerlink" title="Our Solution: EvoSuite"></a>Our Solution: EvoSuite</h1><ul><li>Optimize an entire test suite at once instead of considering distinct test cases.</li><li>Evolve a population of test suites towards satisfying a coverage criterion.</li><li>Assume automated oracles are not available, and require the outputs of the test cases to be manually verified.<ul><li>The generated test suites should be of manageable size.</li></ul></li></ul><p>Solves the problem of:</p><ul><li>difficult and unreachable coverage goals</li><li>order of coverage goals</li><li>accidentally satisfying further coverage goals</li></ul><hr><h1 id="Our-Solution-EvoSuite-1"><a href="#Our-Solution-EvoSuite-1" class="headerlink" title="Our Solution: EvoSuite"></a>Our Solution: EvoSuite</h1><p>Questions:</p><ul><li>We are interested in sequences in OOP. Should coverage in terms of a new ordering seen in the last $n$ function calls in the sequence should make more sense? (Praveen)</li><li>It seems like Evosuite offloads the responsibility of adding in correct assertions to the developers. How easy is it for the developers to do this, especially when compared with manually writing all of the test suite? (Shizuko, ToTo, Larry)</li></ul><hr><h1 id="EvoSuite-Modeling"><a href="#EvoSuite-Modeling" class="headerlink" title="EvoSuite Modeling"></a>EvoSuite Modeling</h1><p>Population 1 .. M Test Suite 1 .. N Test Case 1 .. L Statement</p><p>Four types of statements are modeled.</p><ul><li>Primitive statements: numeric variables (e.g. <code>int var0 = 54;</code>)</li><li>Constructor statements: new instances of a class (e.g. <code>Stack var1 = new Stack();</code>). All parameters of the constructor call have to be values of previous statements.</li><li>Field statements: public fields of objects (e.g. <code>int var2 = var1.size;</code>). If the field is non-static, then the source object of the field has to be a value of a previous statement.</li><li>Method statements: public methods of objects (e.g. <code>int var3 = var1.pop();</code>). The source object and all parameters have to be values of previous statements.</li></ul><hr><h1 id="EvoSuite-Modeling-1"><a href="#EvoSuite-Modeling-1" class="headerlink" title="EvoSuite Modeling"></a>EvoSuite Modeling</h1><p>The set of available classes, their public constructors, methods, and fields are extracted from the given software under test.</p><p>An optimal solution is a test suite that covers all the feasible branches&#x2F;methods and is minimal in the number of statements.</p><hr><h1 id="EvoSuite-Process-Overview"><a href="#EvoSuite-Process-Overview" class="headerlink" title="EvoSuite Process Overview"></a>EvoSuite Process Overview</h1><ul><li>Randomly generate a set of initial test suites.</li><li>Evolve using evolutionary search towards satisfying a coverage criterion.</li><li>Minimize the best resulting test suite.</li></ul><p>Questions:</p><ul><li>How are test suites randomly generated? The author discusses “sampling”. Where are we sampling from? (Larry, Jifeng)</li></ul><hr><h1 id="Evolutionary-Search"><a href="#Evolutionary-Search" class="headerlink" title="Evolutionary Search"></a>Evolutionary Search</h1><ul><li>Test Suite Fitness Function</li><li>Crossover</li><li>Accepting the Mutated Offspring</li><li>Bloat Control</li></ul><hr><h1 id="Test-Suite-Fitness-Function"><a href="#Test-Suite-Fitness-Function" class="headerlink" title="Test Suite Fitness Function"></a>Test Suite Fitness Function</h1><p>Covering all branches $B$ and methods $M$ of a program.</p><ul><li>To estimates how close a test suite $T$ is to covering all branches $B$ of a program, for each branch $b$, <strong>minimal branch distance</strong> $d_{min}(b, T)$ is measured. If the branch predicate is $x \ge 10$, and during execution, $x &#x3D;&#x3D; 5$, then the minimal branch distance is $10 - 5 &#x3D; 5$.</li><li>The minimal branch distance is then normalized to get the <strong>branch distance</strong> $d(b, T) &#x3D; f(d_{min}(b, T))$, where $f(x) &#x3D; \frac{x}{x + 1}$.</li></ul><p>$fitness(T) &#x3D; |M| - |M_T| + \sum_{b \in B}{d(b, T)}$</p><p>If execution exceeds a time limit of 5 minutes, maximum fitness is automatically assigned.</p><hr><h1 id="Test-Suite-Fitness-Function-1"><a href="#Test-Suite-Fitness-Function-1" class="headerlink" title="Test Suite Fitness Function"></a>Test Suite Fitness Function</h1><p>Questions:</p><ul><li>What does branch distance actually mean? Why do we use it? (Eric, Rut, Yayu, Udit, Jifeng)</li><li>Doesn’t $\sum_{b \in B}{d(b, T)}$ already consider that branch distances are maximal in unvisited methods? Why do we need an additional $|M| - |M_T|$ term? Furthermore, different methods could have a different number of branches. Should the branch distance sum for all branches within a method be normalized? (Jifeng)</li></ul><hr><h1 id="Crossover"><a href="#Crossover" class="headerlink" title="Crossover"></a>Crossover</h1><p>Rank selection based on the fitness function is used to select two parent test suites $P_1$ and $P_2$ for crossover. In case of ties, smaller test suites are assigned better ranks.</p><p>During crossover:</p><ul><li>a random value $\alpha$ is chosen from $(0, 1)$</li><li>the first offspring test suite $O_1$ will contain the first $\alpha |P_1|$ test cases from $P_1$ and the last $(1 - \alpha)|P_2|$ test cases from $P_2$</li><li>the second offspring test suite $O_2$ will contain the first $\alpha |P_2|$ test cases from $P_2$ and the last $(1 - \alpha)|P_1|$ test cases from $P_1$</li><li>because test cases are independent, $O_1$ and $O_2$ will always be valid</li></ul><hr><h1 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h1><p>The two offspring test suites $O_1$ and $O_2$ are then mutated.</p><p>When a test suite T is mutated, each of its <strong>test cases</strong> is mutated with probability $\frac{1}{|T|}$.</p><p>If a test case $t$ is mutated, <strong>remove statements</strong>, <strong>change statements</strong>, and <strong>insert statements</strong> are each applied with probability $\frac{1}{3}$. Then, a number of new random test cases are added to $T$.</p><hr><h1 id="Remove-Statements"><a href="#Remove-Statements" class="headerlink" title="Remove Statements"></a>Remove Statements</h1><ul><li>If a test case $t$ contains $n$ statements, each statement is removed with probability $\frac{1}{n}$.</li><li>If the removed statement $s_i$ is subsequently used by $s_j (j &gt; i)$, try to replace this use with another statement before $s_j$.<ul><li>If this is not possible, recursively remove $s_j$.</li></ul></li><li>If all statements have been removed from $t$, remove $t$ from $T$.</li></ul><hr><h1 id="Change-Statements"><a href="#Change-Statements" class="headerlink" title="Change Statements"></a>Change Statements</h1><ul><li>If a test case $t$ contains $n$ statements, each statement is changed with probability $\frac{1}{n}$.</li><li>If the changed statement $s_i$ is a primitive statement, its numeric value is changed by a random value.</li><li>Otherwise, a method, field, or constructor with the same return type is randomly chosen.</li></ul><hr><h1 id="Insert-Statements"><a href="#Insert-Statements" class="headerlink" title="Insert Statements"></a>Insert Statements</h1><ul><li>With probability $p$, a new statement is inserted at a random position in the test case.</li><li>With probability $p^2$, a second statement is inserted, and so on.</li></ul><hr><p>Questions:</p><ul><li>What are the justifications for the probabilities? (Kevin)</li><li>Can we change the probabilities used in the mutation and insertion by using method calls they kept track of and variables generated in each iteration? (Joyce)</li><li>When deleting, if the statement is chosen from the beginning few statements, is there a high probability that many&#x2F;multiple following statements would be removed? Because an initial statement usually has a higher probability of containing an initialization&#x2F;declaration function. (Rut)</li><li>Why is the probability of inserting the first, second, etc. statement different? This is not the case with remove statements and change statements. (Jifeng)</li><li>To mutate and generate test cases, the GA algorithm should have knowledge of the programming language constructs, fields &amp; methods of the software under test, etc. Does this require a significant engineering effort? (Udit)</li></ul><hr><h1 id="Accepting-the-Mutated-Offspring"><a href="#Accepting-the-Mutated-Offspring" class="headerlink" title="Accepting the Mutated Offspring"></a>Accepting the Mutated Offspring</h1><p>The coverage achieved by the Mutated Offspring is measured by the Test Suite Fitness Function.</p><p>Conditions for accepting the mutated offspring:</p><ul><li>The coverage achieved by the Mutated Offspring <strong>exceeds that achieved by its parents</strong>, or is on par with that achieved by its parents, <strong>and that the mutated offspring are shorter</strong>.</li><li>Their length do not exceed <strong>twice</strong> that of the Test Suite with the best coverage in the community.</li></ul><hr><h1 id="Accepting-the-Mutated-Offspring-1"><a href="#Accepting-the-Mutated-Offspring-1" class="headerlink" title="Accepting the Mutated Offspring"></a>Accepting the Mutated Offspring</h1><p>Questions:</p><ul><li>Are the parents removed before adding the children? (Rut)</li><li>Compared with the single branch strategy, only the crossover is different, and the mutation is done in the same way. (Tarcisio)</li></ul><hr><h1 id="Bloat-Control"><a href="#Bloat-Control" class="headerlink" title="Bloat Control"></a>Bloat Control</h1><p>A <strong>variable size representation</strong> could lead to bloat, where <strong>small negligible improvements in the fitness value are obtained with larger solutions.</strong></p><p>This is a <strong>very common problem in Genetic Programming</strong>.</p><p>The following measures are used for bloat control:</p><ul><li>Limit the maximum number $N$ of test cases within a test suite and the maximum number of statements $L$ within a test case. (still need to choose comparatively larger $N$ and $L$ and then reduce their length during&#x2F;after the search to dramatically boost coverage)</li><li>Crossover selection policy</li><li>Mutated offspring acception policy</li></ul><hr><h1 id="Bloat-Control-1"><a href="#Bloat-Control-1" class="headerlink" title="Bloat Control"></a>Bloat Control</h1><p>Questions:</p><ul><li>Does coverage-guided fuzzing, which uses a variant of Genetic Programming, suffer from bloat? If so, could any measures be applied to solve this problem? (Jifeng)</li><li>How to reduce the length during&#x2F;after the search? (Yayu, Jifeng)</li></ul><hr><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>EvoSuite is compared with the traditional single branch approach on top of EvoSuite infrastructure.</p><ul><li>Offspring is generated using the crossover function, but is conducted on two sequences of statements.<ul><li>Because there are dependencies between statements, the statements of the second part are appended one at a time, trying to satisfy dependencies with existing values, generating new values if necessary.</li></ul></li><li>The traditional approach level plus normalized branch distance fitness function is used.</li></ul><p>The two approaches are compared on five open source libraries and a subset of an industrial case study project previously used by Arcuri et al. The units are testable without complex interactions with external resources and are not multithreaded.</p><hr><h1 id="Evaluation-1"><a href="#Evaluation-1" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>“Best practices” based on past experience are used for EvoSuite:</p><ul><li>Population size: 80</li><li>Maximum test suite size $N &#x3D; 100$</li><li>Maximum test case size $L &#x3D; 80$</li><li>The initial test suites are generated with 2 test cases each</li><li>Initial probability for test case insertion: 0.1</li><li>Crossover probability: 3 &#x2F; 4</li><li>Initial probability for statement insertion: 0.5</li></ul><hr><h1 id="Evaluation-2"><a href="#Evaluation-2" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>The search operators for test cases make use of only the type information in the test cluster, and so difficulties can arise when method signatures are imprecise. To overcome this problem for container classes, we always put Integer objects into container classes, and cast returned Object instances back to Integer.</p><p>As the length of test cases can vary greatly and longer test cases generally have higher coverage, we decided to take the number of executed statements as execution limit. The search is performed until either a solution with 100% branch coverage is found, or $k &#x3D; 1,000,000$ statements have been executed as part of the fitness evaluations.</p><hr><h1 id="Evaluation-3"><a href="#Evaluation-3" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>Questions:</p><ul><li>Why not compare EvoSuite to any other (non genetic-testing based) approach? (Zack)</li><li>Why “the units are testable without complex interactions with external resources and are not multithreaded”? (Marie)</li><li>Is there a justification for these “best practices”? (Praveen, Kevin, Madonna, Jifeng)</li><li>Do the “best practices” overfit the 5 open-source libraries? (Joyce)</li><li>Why the choice of an Integer? And does it work in practice? Given that the internals of the program might be expecting something else? (Rut)</li></ul><hr><h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><ul><li>Whole test suite generation achieves higher coverage than single branch test case generation.</li><li>Whole test suite generation produces smaller test suites than single branch test case generation.</li></ul><hr><h1 id="Results-1"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h1><p>Questions:</p><ul><li>While we have focused on branch coverage in this paper, the findings also carry over to other test criteria is an unwarranted extrapolation. (Zack)</li><li>Evosuite claims that the test cases are smaller, but how much smaller? (not obvious from Figure 7) (ToTo)</li><li>High coverage test suite does not necessary mean high bug-finding abilities.</li><li>How does the performance compare to other tools? (ToTo, Praveen, Kevin, Madonna)</li><li>The authors did not evaluate EvoSuite against a human in software engineering. Whether EvoSuite will improve the ability to test software from a software developer’s point of view is unknown. (Marie)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Personal Website Design Considerations</title>
    <link href="/2022/10/20/Personal-Website-Design-Considerations/"/>
    <url>/2022/10/20/Personal-Website-Design-Considerations/</url>
    
    <content type="html"><![CDATA[<h1 id="Hosting"><a href="#Hosting" class="headerlink" title="Hosting"></a>Hosting</h1><p>We host our personal website on <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">GitHub Pages</a>, a static site hosting service. Considerations:</p><ul><li>No need to buy&#x2F;rent and set up infrastructure, such as Elastic Computing instances, Domain Name, Content Distribution Network, Load Balancer, DDoS protection</li><li>Hosted directly from GitHub repository</li><li>Our personal website meets its limitations:<ul><li>Non-commercial.</li><li>No confidential information.</li><li>Published GitHub Pages sites may be no larger than 1 GB.</li><li>GitHub Pages sites have a soft bandwidth limit of 100 GB per month.</li><li>GitHub Pages sites have a soft limit of 10 builds per hour.</li></ul></li></ul><p>Implications:</p><ul><li>Static pages.</li><li>Limit content of our personal website to text and lightweight multimedia, such as vector graphics and vector PDFs. Use raster graphics sparingly, and avoid heavyweight multimedia such as audio and video.</li><li>Do not rebuild too frequently (&gt;10 builds per hour).</li></ul><h1 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h1><p>Our personal website uses the <a href="https://hexo.io/">Hexo</a> blog framework. Considerations:</p><ul><li>Support for GitHub Flavored Markdown.</li><li>Easy-to-use CLI.</li><li>One-command deploy to GitHub Pages.</li><li>Support for two types of pages (Posts and Pages), adequate for a personal website.</li><li>Huge library of spectacular, feature-packed and customizable themes.</li></ul><h1 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h1><p>Our personal website uses the <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> theme for Hexo. Considerations:</p><ul><li>Appropriate Features<ul><li>Support for <a href="https://github.com/YunYouJun/yunyoujun.github.io/issues/105">many third-party commenting systems</a>.</li><li>Mathjax support, renders equations like $E&#x3D;mc^2$.</li><li>Mermaid support.</li><li>Social network links.</li></ul></li><li>Extremely Detailed Documentation.</li><li>Actively Maintained.</li></ul><h1 id="Our-Considerations-When-Writing-Posts"><a href="#Our-Considerations-When-Writing-Posts" class="headerlink" title="Our Considerations When Writing Posts"></a>Our Considerations When Writing Posts</h1><ul><li>Make the Markdown file as self-contained as possible. This includes:<ul><li>Using third-party pictures from the Internet with stable URLs whenever possible.</li><li>Utilize fluid’s support for Mermaid, and use Mermaid to describe and render in real-time diagrams such as Flowcharts, Sequence Diagrams, Class Diagrams, State Diagrams, and Mindmaps whenever possible, as opposed to including diagrams generated using other tools.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Planning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Feedback-Directed Random Test Generation</title>
    <link href="/2022/10/18/Paper-Reading-Feedback-Directed-Random-Test-Generation/"/>
    <url>/2022/10/18/Paper-Reading-Feedback-Directed-Random-Test-Generation/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1109/ICSE.2007.37">here</a>.</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The authors present Randoop, a feedback-directed random unit test generator for object-oriented programs which generates sequences of method calls that create and mutate objects, and uses feedback obtained from executing the sequences to guide the search towards new sequences.</p><h1 id="Logic-of-Randoop"><a href="#Logic-of-Randoop" class="headerlink" title="Logic of Randoop"></a>Logic of Randoop</h1><p>Randoop builds sequences incrementally starting from an empty set of sequences. In each iteration, it generates and executes a new sequence.</p><h2 id="Sequence-Generation"><a href="#Sequence-Generation" class="headerlink" title="Sequence Generation"></a>Sequence Generation</h2><p>First, it selects a method randomly among the public methods of classes.</p><p>Second, it finds arguments to provide to the method.</p><ul><li>If an argument is a primitive type, select a primitive value from a fixed pool of values.</li><li>If an argument is a reference type, select an extensible value of the corresponding type from a previously generated sequence in $nonErrorSeqs$ and put the previous generated sequence into a temporary list if possible, or select null otherwise.</li></ul><p>Third, a new sequence is formed by concatenating the sequences in the temporary list and the randomly selected method.</p><p>Fourth, the new sequence is checked whether it has been generated before. If so, the process is repeated.</p><p>Furthermore, the authors considers that repeated calls to a method may increase code coverage (e.g. reach code that increases the capacity of a container object, or reach code that goes down certain branches). Thus, with a probability $p &#x3D; 0.1$, instead of appending a single call of a chosen method, a maximum of $N &#x3D; 100$ calls are appended.</p><h2 id="Sequence-Execution"><a href="#Sequence-Execution" class="headerlink" title="Sequence Execution"></a>Sequence Execution</h2><p>After a new sequence is generated, each method call in the sequence is executed, and after each call, contracts are checked.</p><p>Default contracts checked by Randoop include:</p><ul><li>method throws no NullPointerException if no input parameter was null</li><li>method throws no AssertionError</li><li>o.equals(o) returns true and throws no exception</li><li>o.hashCode() throws no exception</li><li>o.toString() throws no exception</li></ul><p>If at least one contract is violated, the sequence is put in $errorSeqs$, and no values within the sequence can be extended. If all contracts are not violated, the sequence is put in $nonErrorSeqs$, and all values within the sequence are checked whether they can be extended. If the value has been encountered before, is null, or an exception occurs when executing the sequence leading to the value, the value cannot be extended.</p><h1 id="Experimental-Study"><a href="#Experimental-Study" class="headerlink" title="Experimental Study"></a>Experimental Study</h1><p>The authors evaluate the effectiveness of Randoop through three experiments.</p><ol><li>Comparing the basic block and predicate coverage of Randoop and five systematic input generation techniques on four container data structures used previously to evaluate these systematic input generation techniques.</li><li>Comparing Randoop with JPF (a systematic testing technique) and undirected random testing on 14 widely-used libraries.</li><li>A case study using Randoop to find regression errors between different implementations of the Java JDK.</li></ol><p>The experimental results strongly suggest that Randoop outperforms systematic and undirected random test generation in both coverage and error detection.</p><h1 id="Personal-Thoughts"><a href="#Personal-Thoughts" class="headerlink" title="Personal Thoughts"></a>Personal Thoughts</h1><ol><li>In my opinion, a key advantage of Randoop is the “sparse, global sampling” that it performs, which “retains the benefits of random testing (scalability, simplicity of implementation)”, while avoiding undirected random testing’s pitfalls (generation of redundant or meaningless inputs), and is better adapted to large-scale library code than the “dense, local sampling” of systematic test generation.</li><li>The sequences Randoop builds are akin to seeds in coverage-guided fuzzing, and I believe the efficiency and effectiveness of Randoop may be further boosted by applying a power schedule to the built sequences, much like applying a power schedule to the seeds in coverage-guided fuzzing.</li><li>The built sequences could possibly have overlapping prefixes. Would using a tree structure be better than storing each sequence on its own?</li><li>Randoop only supports a limited number of contracts, and its error-detection ability is rather weak. It may be appropriate on library code filled with assertions and checks, but may not work well on client code where these may be sparse.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Software tools to facilitate research programming</title>
    <link href="/2022/10/18/Paper-Reading-Software-tools-to-facilitate-research-programming/"/>
    <url>/2022/10/18/Paper-Reading-Software-tools-to-facilitate-research-programming/</url>
    
    <content type="html"><![CDATA[<p>This is a paper recommended to me <a href="/2023/10/10/Conversation-with-Prof-Margo-Seltzer/">by Margo Seltzer during a conversation</a>. The original paper can be found <a href="http://users.csc.calpoly.edu/~dekhtyar/401-Fall2016/papers/guo_phd_dissertation.pdf">here</a>.</p><h1 id="Definition-and-Ubiquity-of-Research-Programming"><a href="#Definition-and-Ubiquity-of-Research-Programming" class="headerlink" title="Definition and Ubiquity of Research Programming"></a>Definition and Ubiquity of Research Programming</h1><p>Research programming is a unique form of programming where the primary objective is to derive insights from data. It’s a widespread activity. Not only is it crucial for academic advancements across various disciplines including natural sciences, engineering, and social sciences, but it also extends beyond academia. By some estimations, the number of individuals engaged in research programming dwarfs the number of professional software developers, suggesting its vast scale and significance. Moreover, even professionals in fields like science, engineering, business, finance, public policy, and journalism engage in research programming.</p><h1 id="Challenges-in-Research-Programming"><a href="#Challenges-in-Research-Programming" class="headerlink" title="Challenges in Research Programming"></a>Challenges in Research Programming</h1><h2 id="Data-Management-and-Provenance"><a href="#Data-Management-and-Provenance" class="headerlink" title="Data Management and Provenance."></a>Data Management and Provenance.</h2><ul><li>Keeping track of where each piece of data originates and ensuring it remains up-to-date is crucial. This process can be tedious and difficult, especially when large amounts of data are involved.</li><li>Organizing, naming, and managing various versions of data files present challenges.</li></ul><h2 id="Data-Preparation"><a href="#Data-Preparation" class="headerlink" title="Data Preparation:"></a>Data Preparation:</h2><ul><li>A significant portion of time is spent on data cleaning and reformatting. This task can often be labor-intensive and not directly contribute to deriving insights, yet it’s unavoidable.</li><li>The process is more than just computational number crunching. It often involves transferring data between different tools, converting data formats, and managing extensive datasets.</li></ul><h2 id="Analysis-Phase"><a href="#Analysis-Phase" class="headerlink" title="Analysis Phase"></a>Analysis Phase</h2><ul><li>The core activity involves writing and refining programs to analyze data.</li><li>Challenges arise from scripts that take excessive time to run, especially after incremental edits, and from scripts crashing due to various errors.</li><li>Managing output files, including keeping track of metadata, presents additional challenges.</li></ul><h2 id="Reflection-Phase"><a href="#Reflection-Phase" class="headerlink" title="Reflection Phase"></a>Reflection Phase</h2><ul><li>Researchers analyze outputs, take notes, hold meetings, and make comparisons. Graphs play a significant role in visualizing and interpreting results. Managing and comparing these graphical outputs is vital.</li></ul><h2 id="Dissemination-Phase"><a href="#Dissemination-Phase" class="headerlink" title="Dissemination Phase"></a>Dissemination Phase</h2><ul><li>Once the research is complete, results need to be consolidated and communicated, often in the form of reports or academic publications.</li><li>Reproducing results becomes challenging with time, especially with evolving software environments.</li><li>Sharing code and data in collaborative settings introduces its own set of challenges.</li></ul><h1 id="Distinct-Nature-of-Research-Programming-Compared-to-Traditional-Software-Engineering"><a href="#Distinct-Nature-of-Research-Programming-Compared-to-Traditional-Software-Engineering" class="headerlink" title="Distinct Nature of Research Programming Compared to Traditional Software Engineering"></a>Distinct Nature of Research Programming Compared to Traditional Software Engineering</h1><ul><li>Purpose: Unlike software engineering, which focuses on creating robust software, research programming prioritizes insights.</li><li>Environment: Research programmers work in a diverse environment using various languages and tools, making it inherently heterogeneous.</li><li>Specifications: The research programming process is more fluid and iterative, with changing specifications based on new discoveries.</li><li>Priorities: The emphasis is on quick iteration for faster discoveries rather than perfecting the code.</li><li>Expertise: A broad range of individuals, not just professional programmers, engage in research programming.</li></ul><h1 id="The-Role-of-Modern-Day-Tools"><a href="#The-Role-of-Modern-Day-Tools" class="headerlink" title="The Role of Modern-Day Tools"></a>The Role of Modern-Day Tools</h1><p>Modern tools designed for general programming can be beneficial for research programmers. However, these tools are often not optimized for the unique characteristics of research programming. A balance needs to be struck between the robustness of software engineering tools and the flexibility required for research programming.</p><h1 id="Evolution-of-Documentation-in-Research"><a href="#Evolution-of-Documentation-in-Research" class="headerlink" title="Evolution of Documentation in Research"></a>Evolution of Documentation in Research</h1><p>Historically, scientific research was documented meticulously in handwritten lab notebooks. But with the rapid pace of computational research, such traditional methods are no longer sufficient. While many research programmers use digital note-taking methods, an ideal solution would seamlessly integrate notes with source code and data files.</p><h1 id="Closing-Thought"><a href="#Closing-Thought" class="headerlink" title="Closing Thought"></a>Closing Thought</h1><p>Recognizing and understanding these challenges are the first steps. It then becomes possible to leverage techniques from various domains, such as dynamic program analysis and recommendation systems, to enhance the productivity of research programmers.</p><hr><h1 id="High-level-Comments"><a href="#High-level-Comments" class="headerlink" title="High-level Comments"></a>High-level Comments</h1><p>I am very interested in investigating existing formalizations and crystallized best practices for specific tasks in Research Programming, such as “The Grammar of Graphics” for visualization tasks, and how functional programming can synergize with them. A clean-sheet functional design has the potential to open new windows in addressing many of these challenges, especially those that lack adequate tool support. Ideally, while embracing a functional cleaniness, it should follow several aspects of the UNIX and C++ philosophies.</p><ul><li>It must be driven by actual problems and its features should be immediately useful in real world programs.</li><li>It should support and encourage the user to design and build software, even large-scale ones such as operating systems, to be tried early.</li><li>It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts. It should make it easy to make the output of every parts become the input to another, as yet unknown, parts.</li><li>Allowing a useful feature is more important than preventing every possible misuse.</li><li>It should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment.</li><li>If the programmer’s intent is unknown, it should allow the programmer to specify it by providing manual control.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Research Programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: A Practical Guide for Using Statistical Tests to Assess Randomized Algorithms in Software Engineering</title>
    <link href="/2022/10/16/Paper-Reading-A-Practical-Guide-for-Using-Statistical-Tests-to-Assess-Randomized-Algorithms-in-Software-Engineering/"/>
    <url>/2022/10/16/Paper-Reading-A-Practical-Guide-for-Using-Statistical-Tests-to-Assess-Randomized-Algorithms-in-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/1985793.1985795">here</a>.</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>There are many problems in software engineering which are undecidable and use randomized algorithms, such as automated unit test generation, random testing, and search algorithms (including Genetic Algorithms). As the outcomes of these randomized algorithms vary greatly from run to run, assessing their effectiveness is an important topic.</p><p>To uncover whether randomized algorithms are properly assessed in software engineering research, the authors conducted a small-scale systematic review on three representative software engineering venues, namely IEEE Transactions of Software Engineering (TSE), IEEE International Conference on Software Engineering (ICSE) and International Symposium on Search Based Software Engineering (SSBSE), in the year 2009. The review shows that the analyses “are either missing, inadequate, or incomplete”, and “randomness is not properly taken into account”. The authors then put forward guidelines for properly assessing randomized algorithms in software engineering research.</p><h1 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h1><dl><dt>Censoring<br>: a condition in which only the <strong>range</strong> (i.e. above a certan value, below a certain value, within an interval) of a measurement or observation is known, and its precise value is unknown.<br>: Akin to <strong>clamping</strong> in saturated arithmetic.</dt><dd>Commonly encountered in software engineering experiments when <strong>time limits</strong> are used.</dd></dl><h1 id="Assessment-Procedure-and-Guidelines"><a href="#Assessment-Procedure-and-Guidelines" class="headerlink" title="Assessment Procedure and Guidelines"></a>Assessment Procedure and Guidelines</h1><p>A novel randomized algorithm is commonly compared against an existing technique. After determing a measure to compare (e.g. source code coverage, execution time), we should run both algorithms <strong>a large enough number of times independently (the author recommends “a very high number of runs” and not the rule of thumb of $n &#x3D; 30$ in medicine and behavioral science, as human aspects are not involved</strong>. With the collected measure data, we conduct the following:</p><h2 id="Statistical-Testing"><a href="#Statistical-Testing" class="headerlink" title="Statistical Testing"></a>Statistical Testing</h2><p>We use a <strong>statistical test</strong> to assess “whether there is enough empirical evidence to claim a difference between the two algorithms”.</p><p><strong>In such a statistical test, the null hypothesis is typically “there is no difference”, and we verify whether we should reject the null hypothesis.</strong></p><h3 id="Definitions-related-to-Statistical-Testing"><a href="#Definitions-related-to-Statistical-Testing" class="headerlink" title="Definitions related to Statistical Testing"></a>Definitions related to Statistical Testing</h3><p>There are two conflicting types of error when performing statistical testing: (I) we reject the null hypothesis when it is true, and (II) we accept the null hypothesis when it is false.</p><ul><li>The <strong>p-value</strong> of a statistical test is the probability of rejecting the null hypothesis when it is true.</li><li>The <strong>significant level $\alpha$</strong> of a statistical test is the highest p-value we accept for rejecting the null hypothesis. There is a tradition of using $\alpha &#x3D; 0.05$ in the natural sciences. <strong>However, an increasing number of researchers believe that, and the author endorses that, such thresholds are arbitrary, and that researchers should “simply report p-values and let the reader decide in context”.</strong></li><li>The <strong>statistical power</strong> of a statistical test is the probability of rejecting the null hypothesis when it is false.</li></ul><h3 id="Selection-of-Statistical-Test"><a href="#Selection-of-Statistical-Test" class="headerlink" title="Selection of Statistical Test"></a>Selection of Statistical Test</h3><p>In different statistical tests, <strong>different probability distributions of the collected measures</strong> are assumed, and <strong>different aspects of the probability distributions of the collected measures</strong> are being compared. Common statistical tests include:</p><ul><li>parametric<ul><li>Student’s t-test</li><li>Welch’s t-test</li><li>F-test</li><li>ANOVA</li></ul></li><li>nonparametric<ul><li>Fisher exact test</li><li>Wilcoxon signed ranks test</li><li>Mann-Whitney U-test</li></ul></li></ul><p>When selecting a statistical test, tt is worth paying attention to the probability distributions of the collected measures:</p><ul><li>there may be a “very strong departure from normality”</li><li>the mean and variance may not exist</li><li>the data may be censored</li></ul><h2 id="Effect-Size-Measurement"><a href="#Effect-Size-Measurement" class="headerlink" title="Effect Size Measurement"></a>Effect Size Measurement</h2><p>In addition to using a statistic test to assess improvement of one algorithm over another, it is also critical to assess “the magnitude of the improvement”, for which effect size measures are used.</p><ul><li>Unstandardized effect size measures: dependent on the unit of measurement<ul><li>difference in mean</li></ul></li><li>Standardized effect size measures:<ul><li>d family &#x2F; Mahalanobis distance, <strong>assumes the normality of the data</strong></li><li>Common Language (CL) Statistic. The probability that a randomly selected score from the first population $X_1$ is greater than a randomly selected score from the second population $X_2$, $P(X_1 &gt; X_2)$.</li><li>Measure of Stochastic Superiority. A generalization of Common Language Statistic, $A_{12} &#x3D; P(X_1 &gt; X_2) + 0.5 P(X_1 &#x3D; X_2)$. <strong>Recommended.</strong></li><li>Odds ratio. A measure of “how many times greater the odds are that a member of a certain population will fall into a certain category than the odds are that a member of another population will fall into that category”. If the total number of runs is $n$, and the number of times two algorithms find optimal solutions are $n_1$ and $n_2$, then the odds ratio is $\psi &#x3D; \frac{\frac{n_1}{n - n_1}}{\frac{n_2}{n - n_2}}$. <strong>Recommended.</strong></li></ul></li></ul><h3 id="Multiple-Statistical-Tests-and-Effect-Size-Measurements"><a href="#Multiple-Statistical-Tests-and-Effect-Size-Measurements" class="headerlink" title="Multiple Statistical Tests and Effect Size Measurements"></a>Multiple Statistical Tests and Effect Size Measurements</h3><p>When comparing $k$ algorithms, we frequently would like to know the performance of each algorithm “compared against all other alternatives individually”. This incurs $\frac{k (k - 1)}{2}$ comparisons.</p><p>However, when doing multiple stastical tests, given a significant level $\alpha$ and the number of tests $n$, the probability that at least one null hypothesis is true is $1 - {(1 - \alpha)}^n$, which converges to $1$ as $n$ increases.</p><p>A remedy is the Bonferroni adjustment, in which we use an adjusted significant level $\frac{\alpha}{n}$. However, this has been “seriously criticized in the literature”, and the author recommends <strong>“simply report p-values and let the reader decide in context”</strong> instead.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Exploiting Dynamic Information in IDEs Improves Speed and Correctness of Software Maintenance Tasks</title>
    <link href="/2022/10/16/Paper-Reading-Exploiting-Dynamic-Information-in-IDEs-Improves-Speed-and-Correctness-of-Software-Maintenance-Tasks/"/>
    <url>/2022/10/16/Paper-Reading-Exploiting-Dynamic-Information-in-IDEs-Improves-Speed-and-Correctness-of-Software-Maintenance-Tasks/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/TSE.2011.42">here</a>.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The pervasive use of inheritance, interfaces, and runtime polymorphism in object-oriented software systems leads to it being unclear which concrete method is invoked at a call site. Modern IDEs such as Eclipse offer static views of the source code, but provide little help in revealing the execution paths an object-oriented software system actually takes at runtime.</p><p>In this situation, developers usually resort to debuggers or profilers. However, the information extracted by such tools are volatile, and developers cannot continuously benefit from dynamic information integrated in the static source views in the IDE.</p><p>To solve this problem, the authors propose Senseo, an Eclipse plugin that collects dynamic information by running unit and&#x2F;or system tests of the project with a customized JVM, that enriches the source views of Eclipse with dynamic information, such as:</p><ul><li>which concrete methods a particular method invokes, and how often</li><li>which methods invoke this particular method</li><li>how many objects are allocated in methods</li><li>the dynamic collaborations between different source artifacts</li><li>a visualization of the system’s Calling Context Tree</li></ul><p>These are displayed in tooltips, ruler columns, the Package Explorer, and a dedicated Collaboration Overview.</p><p>The authors conducted an experiment with 30 professional Java developers solving five typical software maintenance tasks in JEdit, an unfamiliar, medium-sized software system, measured the time and correctness of the tasks, and conducted statistical tests on the measurements. Senseo yields a significant decrease in time of 17.5 percent and a significant increase in correctness of 33.5 percent, which validates the practical usefulness of Senseo.</p><h1 id="Personal-Thoughts"><a href="#Personal-Thoughts" class="headerlink" title="Personal Thoughts"></a>Personal Thoughts</h1><p>There is no doubt that the idea of enriching the source views of an IDE with dynamic information, as well as its implementation Senseo, is of great practical value to developers writing object-oriented software systems. However, I do have a few concerns after reading the paper.</p><ul><li>To enrich the source views of Eclipse with dynamic information, Senseo runs unit and&#x2F;or system tests of the project with a customized JVM. There are several concerns here.<ul><li>The project should have unit and&#x2F;or system tests that thoroughly exercise all units in a manner resembling an actual execution of the project in production, otherwise, the dynamic information for some units may be missing and&#x2F;or inaccurate.</li><li>The unit and&#x2F;or system tests should be self-contained and not rely on interacting with the environment, such as getting input from the user, using OS services, etc. If so, a possible remedy would be to carve unit tests from such executions.</li><li>There is significant overhead in the process of collecting dynamic information. As the authors have reported: “On average (geometric mean), CCT creation alone causes an overhead of factor 2.68. CCT creation and collection of dynamic information result in an overhead of factor 9.07. The total overhead, including serialization&#x2F;transmission, is of factor 9.47.” Although the authors claim that “even though the overall overhead is high when gathering dynamic information, we do not consider this a major issue as the application does not need to run at productive speed while analyzing it”, this could be a problem for lengthy system tests, especially if units in the system tests are frequently modified, and new dynamic information has to be reacquired. Carving unit tests from such system tests would also be a possible remedy.</li></ul></li></ul><p>Furthermore, aside from the idea and implementation of the tool, something else I appreciate and have learned from this paper is the experimental study, in which two measures, the time and correctness of the tasks, are selected, and statistical tests on the measurements are conducted. This convincingly proves the effectiveness of Senseo.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Breaking the Barriers to Successful Refactoring: Observations and Tools for Extract Method</title>
    <link href="/2022/10/13/Paper-Reading-Breaking-the-Barriers-to-Successful-Refactoring-Observations-and-Tools-for-Extract-Method/"/>
    <url>/2022/10/13/Paper-Reading-Breaking-the-Barriers-to-Successful-Refactoring-Observations-and-Tools-for-Extract-Method/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1145/1368088.1368146">here</a>.</p><p>Refactoring is important to software development. Performing a refactoring is not trivial, for which refactoring tools have been developed. Nevertheless, programmers do not use refactoring tools as often as they could.</p><p>To investigate this problem, the authors focus on one type of refactoring and one specific tool - the Extract Method tool in the Eclipse IDE.</p><ul><li>Fowler reports that Extract Method is “one of the most common refactorings”, “a key refactoring” which if successful, means “you can go on [to do] more refactorings”.</li><li>The Extract Method tool in the Eclipse IDE it is a mature, non-trivial refactoring tool.</li><li>Most refactoring tool user interfaces are very similar.</li></ul><p>The authors first conject tools are non-specific and unhelpful in diagnosing problems, and undertake a formative study observing 11 programmers perform a number of Extract Method refactorings on several large, open-source projects, which suggest that programmers fairly frequently encounter a variety of errors arising from violated refactoring preconditions.</p><p>The authors further conjecture error messages were conflated, insufficiently descriptive, and discouraged programmers from refactoring, and built three visualization tools within the Eclipse IDE as solutions. Then, they conducted a study to assess whether or not the new tools overcome these usability problems by comparing the accuracy and time to complete refactoring tasks with and without the new tools, and administered a post-test questionnaire for the subjects to express their preferences. The results of the study were very positive, and subjects found the new tools superior and helpful outside of the context of the study.</p><p>Finally, the authors provide recommendations for future tools.</p><ul><li>Code Selection: A selection tool should be lightweight, task-specific, and help the programmer overcome unfamiliar&#x2F;unusual code formatting.</li><li>Displaying Violated Preconditions: quickly comprehensible, indicate location, easily distinguishable from warnings and advisories, display amount of work required, display relations between precondition violations, distinguish different types of violations.</li></ul><p>The experimental study is very concise, and there are many aspects that can be borrowed.</p><ul><li>Undertaking a formative study to verify conjections about problems within current tools, before building new tools based on the verified conjections, and evaluating them.</li><li>The visualization comparing the the accuracy and time of <strong>each participant</strong> to complete refactoring tasks with and without the new tools is accurate and straightforward.</li><li>Using a questionnaire to acquire subjective feedback complimentary to an objective evaluation.</li></ul><p>However, there are still some flaws.</p><ul><li>Only one type of refactoring (Extract Method) and one specific tool was considered. The takeaways may not apply to other types of refactoring.</li><li>Several key variates were not controlled in the formative study, such as participants were free to refactor whatever code they thought necessary.</li></ul><p>Future directions of work include:</p><ul><li>Replicating the study for other types of refactoring.</li><li>Build and assess new refactoring tools with increased usability.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing</title>
    <link href="/2022/10/11/Paper-Reading-QSYM-A-Practical-Concolic-Execution-Engine-Tailored-for-Hybrid-Fuzzing/"/>
    <url>/2022/10/11/Paper-Reading-QSYM-A-Practical-Concolic-Execution-Engine-Tailored-for-Hybrid-Fuzzing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-yun.pdf">here</a>.</p><h1 id="What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work"><a href="#What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work" class="headerlink" title="What is the problem being tackled? How was it addressed by prior work?"></a>What is the problem being tackled? How was it addressed by prior work?</h1><p>There are two notable technologies to automatically find vulnerabilities in software:</p><ul><li>Coverage-guided fuzzing, quickly explores the input space, but only good at discovering inputs leading to an execution path with loose branch conditions</li><li>Concolic execution, good at finding inputs driving the program into tight and complex branch conditions, but very expensive to formulate and solve constraints</li></ul><p>A hybrid approach, hybrid fuzzing, was recently proposed.</p><ul><li>The fuzzer will quickly explore trivial input spaces (loose conditions)</li><li>The concolic execution will solve the complex branches (tight conditions)</li><li>Still suffer from scaling to find real bugs in real-world applications. Bottlenecks are their concolic executors. The symbolic emulation is too slow in formulating path constraints, and it is often not even possible to generate constraints due to incomplete and erroneous environment models.</li></ul><h1 id="What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you"><a href="#What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?"></a>What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?</h1><p>Concolic executors adopt IR in their symbolic emulation. Although IR makes implementation easy, it incurs additional overhead and  blocks further optimization. According to our measurement with real-world software, only 30% of instructions require symbolic execution. This implies an instruction-level approach has an opportunity to reduce the number of unnecessary symbolic executions.</p><p>Concolic execution engines use snapshot techniques to reduce the overhead of re-executing a target program when exploring its multiple paths. However, in hybrid fuzzing, test cases from the fuzzer are associated with greatly different paths, rendering snapshoting inefficient. Furthermore, snapshots cannot reflect external status, and solving this problem through full system concolic execution or external environment modeling is expensive and&#x2F;or inaccurate.</p><p>Concolic execution tries to guarantee soundness by collecting complete constraints. However, this can be expensive, and also over-constrain a path, limiting finding future paths.</p><p>To solve these problems, Qsym uses Intel Pin along with a coverage-guided fuzzer:</p><ul><li>Get input test cases and validate newly produced test cases (potentially unsound) from the fuzzer.</li><li>Employ instruction-level taint tracking, and only symbolically execute tainted instructions.</li><li>Generate more relaxed (incomplete) forms of constraints that can be easily solved (can result in unsound test cases, but quickly checked with fuzzer).</li><li>Fast execution makes re-execution much preferable to snapshoting for repetitive concolic testing.</li><li>Considers external environments as “black-boxes” and simply executes them concretely (can result in unsound test cases, but quickly checked with fuzzer).</li><li>Chooses the last constraint of a path for optimistic solving. It typically has a very simple form, and avoids solving irrelevant constraints repeatedly tested by fuzzers. <strong>This can be applied to other domains to speed up symbolic execution, if the domain has an efficient validator like a fuzzer.</strong></li><li>If a basic block has been executed too frequently in a context (a call stack of the current execution), Qsym stops generating further constraints from it. Extremely suitable for loops. <strong>This can directly be applied to other concolic executors as a heuristic path exploration strategy.</strong></li></ul><h1 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h1><p>A series of experiments are conducted.</p><ol><li>To highlight the effectiveness, we applied QSYM to non-trivial programs that are large in size and well-tested - all applications and libraries tested by OSS-Fuzz.</li><li>To show how effectively our concolic executor can assist a fuzzer in discovering new code paths, we measured the achieved code coverage during the fuzzing process using Qsym and AFM with a varying number of input seed files. We selected libpng as a fuzzing target because it contained various narrow-ranged checks.</li><li>To show the performance benefits of QSYM’s symbolic emulation, we used the DARPA CGC dataset to compare QSYM with Driller, which placed third in the CGC competition.</li><li>To evaluate the effect of optimistic solving, we compared Qsym with others using the LAVA dataset, a test suite that injects hard-to-find bugs in Linux utilities to evaluate bug-finding techniques.</li><li>To show the effect of basic block pruning, we evaluated Qsym with and without this technique with four widely-used open-source programs - libjpeg, libpng, libtiff, and file.</li><li>The author then analyzes new bugs found by Qsym.</li></ol><p>These experiments comprehensively assess different innovations and support the notion that Qsym “scales to find real bugs in real-world applications”. However, I do have some questions concerning the experimental study, stated below.</p><h1 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?</h1><p>Qsym generates more relaxed (incomplete) forms of constraints that can be easily solved. Specifically how this is done is not clear.</p><p>Questions concerning the experimental study:</p><ol><li>The experiments “to highlight the effectiveness” and “to show the performance benefits of QSYM’s symbolic emulation” seem to be redundant.</li><li>To show how effectively our concolic executor can assist a fuzzer in discovering new code paths, we compared Qsym with AFM on libpng, because it contained various narrow-ranged checks. The benchmark appears to be cherry-picked. This is also the case with “to show the effect of basic block pruning”.</li><li>Why are completely different datasets used in different experiments?</li></ol><h1 id="Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper"><a href="#Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper" class="headerlink" title="Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?"></a>Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?</h1><p>The coverage-guided fuzzer used within Qsym is “vanilla” AFL. Other coverage-guided fuzzers exist that enhance AFL. How Qsym can complement these fuzzers can be a direction for future research.</p><p>Unlike other IR-based executors, QSYM cannot test programs targeting other architectures. We plan to overcome this limitation by improving QSYM to work with architecture specifications, rather than a specific architecture implementation. <strong>(Is taint analysis on IR+JIT also a possible solution?)</strong></p><p>QSYM currently supports only memory, arithmetic, bitwise, and vector instructions. Other instructions, including floating-point operations, remain to be supported.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Semantic Fuzzing with Zest</title>
    <link href="/2022/10/11/Paper-Reading-Semantic-Fuzzing-with-Zest/"/>
    <url>/2022/10/11/Paper-Reading-Semantic-Fuzzing-with-Zest/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/3293882.3330576">here</a>.</p><h1 id="What-is-the-problem-being-tackled"><a href="#What-is-the-problem-being-tackled" class="headerlink" title="What is the problem being tackled?"></a>What is the problem being tackled?</h1><p>The paper tackles the problem of generating random, syntactically valid inputs to exercise various code paths in the semantic analysis stages of programs and leveraging feedback to generate new inputs via mutations.</p><h1 id="How-was-it-addressed-by-prior-work"><a href="#How-was-it-addressed-by-prior-work" class="headerlink" title="How was it addressed by prior work?"></a>How was it addressed by prior work?</h1><p>On one hand, QuickCheck-like random-input generators allow generating random, syntactically valid inputs. On the other hand, coverage-guided fuzzing tools such as AFL and libFuzzer randomly mutate known byte sequences to produce new byte sequences, and if the mutated byte sequences lead to new code coverage in the test program, they are saved for subsequent mutation.</p><h1 id="What-are-the-innovation-s-proposed-in-this-paper"><a href="#What-are-the-innovation-s-proposed-in-this-paper" class="headerlink" title="What are the innovation(s) proposed in this paper?"></a>What are the innovation(s) proposed in this paper?</h1><p>The paper proposes Zest, a technique for automatically guiding QuickCheck-like random-input generators to exercise various code paths in the semantic analysis stages of programs. It first converts a QuickCheck-like random-input generator to a parametric generator, which can generate a syntactically valid input from a byte sequence. It then uses a coverage-guided fuzzing technique with the parametric generator in order to produce syntactically valid input that can increase code coverage in the semantic analysis stages.</p><h1 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h1><p>The authors integrated Zest into the open-source JQF framework and evaluated Zest on five real-world Java benchmarks, comparing it to QuickCheck and AFL. They evaluated the three techniques on two fronts:</p><ol><li>The amount of code coverage achieved in the semantic analysis stage after a fixed amount of time.</li><li>Their effectiveness in triggering bugs in the semantic analysis stage.</li></ol><p>QuickCheck and Zest make use of generators for synthesizing syntactically valid input, and do not exercise code paths corresponding to parse errors in the syntax analysis stage. In contrast, AFL performs mutations directly on raw input strings, and spends most of its time testing error paths within the syntax analysis stages.</p><p>The experimental results suggest that when given QuickCheck-like random-input generators, Zest excels at exercising semantic analyses and is very effective at discovering semantic bugs.</p><p>The paper’s evaluation matches well with the proposed problem statement, as the experimental design accurately assesses factors directly correlated with the problem of “generating random, syntactically valid inputs to exercise various code paths in the semantic analysis stages of programs and leveraging feedback to generate new inputs via mutations”, and the experimental results support the effectiveness of the proposed approach.</p><h1 id="Which-technical-innovations-are-most-compelling-to-you"><a href="#Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="Which technical innovations are most compelling to you?"></a>Which technical innovations are most compelling to you?</h1><p>The most compelling technical innovation is Zest’s design of generating a syntactically valid input from a byte sequence given a QuickCheck-like random-input generator, by using bytes from the byte sequence to “fill in” randomly generated primitive data types of various length (bool, char, int, etc.) required within the random-input generator. This allows bit-level mutations on byte sequences to correspond to high-level structural mutations in the space of syntactically valid inputs, enabling Zest to leverage the mature coverage-guided fuzzing algorithm originally designed for byte sequence inputs.</p><h1 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?</h1><p>The author states that the Zest algorithm “extends the CGF algorithm by keeping track of the coverage achieved by semantically valid inputs”, and that “we hypothesize that this biases the search towards generating even more valid inputs and in turn increases code coverage in the semantic analysis stage”. However, how semantically valid inputs are used is not stated in the description of the algorithm.</p><h1 id="Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome"><a href="#Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome" class="headerlink" title="Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome?"></a>Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome?</h1><p>Zest assumes the availability of QuickCheck-like random-input generators to exercise the semantic analysis classes and find semantic bugs, which may be unavailable for specialized data structures. There has also been some recent interest in automatically generating input grammars from existing inputs, using machine learning and language inference algorithms. These techniques are complementary to Zest - the grammars generated by these techniques could be transformed into parametric generators for Zest.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How We Refactor, and How We Know It</title>
    <link href="/2022/10/10/Paper-Reading-How-We-Refactor-and-How-We-Know-It/"/>
    <url>/2022/10/10/Paper-Reading-How-We-Refactor-and-How-We-Know-It/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/TSE.2011.41">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward-How-was-the-work-validated"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward-How-was-the-work-validated" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How does this work move the research forward? How was the work validated?"></a>What were the primary contributions of the paper as the author sees it? How does this work move the research forward? How was the work validated?</h1><p>In his book on refactoring, Fowler catalogs 72 different refactorings, ranging from localized changes to more global changes, and Fowler claims that refactoring produces significant benefits.</p><p>Although case studies have demonstrated that refactoring is a common practice and can improve code metrics, they tend to examine just a few software products.</p><p>To help put refactoring research on a sound scientific basis, we replicate the study in wider contexts and explore factors that previous authors may not have explored. We analyze four sets of Eclipse IDE usage data and apply different several different refactoring-detection strategies to them. We then use this data to test nine hypotheses about refactoring, casting doubt on several previously stated assumptions about how programmers refactor, while validating others.</p><ul><li>Refactoring behavior of refactoring tool developers differs from that of their users. Specifically, RENAMEs and MOVEs are more frequent among users.</li><li>About 40% of refactorings performed using a tool occur in batches (several refactorings of the same kind within a short time period).</li><li>About 90% of configuration defaults of refactoring tools remain unchanged when programmers use the tools.</li><li>messages written by programmers in commit logs do not reliably indicate the presence of refactoring.</li><li>Programmers frequently floss refactor (interleave refactoring with other types of programming activity).</li><li>About half of refactorings are not high-level, so refactoring detection tools that look exclusively for high-level<br>refactorings will not detect them.</li><li>Refactorings are performed frequently.</li><li>Almost 90% of refactorings are performed manually, and the kinds of refactorings performed with tools differ from the kinds performed manually.</li></ul><h1 id="How-could-this-research-be-extended-How-could-this-research-be-applied-in-practice"><a href="#How-could-this-research-be-extended-How-could-this-research-be-applied-in-practice" class="headerlink" title="How could this research be extended? How could this research be applied in practice?"></a>How could this research be extended? How could this research be applied in practice?</h1><p>For the toolsmith:</p><ul><li>Most kinds of refactorings will not be used as frequently as the toolsmiths hoped. Improving the under-used tools or their documentation may increase tool use.</li><li>Programmers often do not configure refactoring tools. Configuration-less refactoring tools, which have recently seen increasing support in Eclipse and other environments, will suit the majority of, but not all, refactoring situations.</li><li>30 refactorings did not have tool support, the most popular of these was MODIFY ENTITY PROPERTY, performed 8 times, which would allow developers to safely modify properties such as static or final.</li></ul><p>For researchers:</p><ul><li>Questions still remain to answer.<ul><li>Why is the RENAME refactoring tool so much more popular than other refactoring tools?</li><li>Why do some refactorings tend to be batched while others do not?</li></ul></li><li>Our experiments should be repeated in other projects and for other refactorings to validate our findings.</li></ul><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?"></a>What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?</h1><p>Of particular interest to me is the inspiration for the hypothesis the authors verify - previous literature (frequently in other software engineering domains), personal experience, anecdotes from programmers, surveys. The benefit from this is twofold. First, it provides a source of inspiration for formulating hypotheses. Second, it endorses the validity of the hypotheses.</p><ul><li>We hypothesize refactoring behavior of refactoring tool developers differs from that of their users. Toleman and Welsh assume a variant of this hypothesis - that the designers of software tools erroneously consider themselves typical tool users - and argue that the usability of software tools should be objectively evaluated.</li><li>We hypothesize that programmers typically perform refactoring in batches. Based on personal experience and anecdotes from programmers, we suspect that programmers often refactor several pieces of code because several related program elements may need to be refactored in order to perform a composite refactoring. In previous research, Murphy-Hill and Black built a refactoring tool that supported refactoring several program elements at once, on the assumption that this is common.</li><li>We hypothesize that programmers do not often configure refactoring tools. We suspect this because tweaking code manually after the refactoring may be easier than configuring the tool. In the past, we have found some limited evidence that programmers perform only a small amount of configuration of refactoring tools. When we did a small survey in September 2007 at a Portland Java Users Group meeting, 8 programmers estimated that, on average, they supply configuration information only 25% of the time.</li><li>In Xing and Stroulia’s automated analysis of the Eclipse codebase, the authors conclude that “indeed refactoring is a frequent practice”. Although flawed, this becomes one of the authors’ hypotheses.</li></ul><p>Furthermore, some hypotheses are formed from a critique of previous literature, combined with domain expertise and&#x2F;or other literature.</p><ul><li>Several researchers have used messages attached to commits into a version control as indicators of refactoring activity. However, we hypothesize that this assumption is false, because refactoring may be an unconscious activity, and because the programmer may consider it subordinate to some other activity, such as adding a feature.</li><li>Past research has often drawn conclusions based on observations of high-level refactorings. We hypothesize that in practice programmers also perform many lower-level refactorings. We suspect this because lower-level refactorings will not change the program’s interface and thus programmers may feel more free to perform them.</li></ul><p>Additionally, much of the methodology presented in this paper can be borrowed.</p><ul><li>The fourth dataset used by the authors is Eclipse CVS, the version history of the Eclipse and JUnit code bases extracted from their Concurrent Versioning System (CVS) repositories. CVS does not maintain records showing which file revisions were committed as a single transaction. The standard approach for recovering transactions is to find revisions committed by the same developer with the same commit message within a small time window; we use a 60 second time window. In our experiments, we randomly sampled from about 3400 source file commits that correspond to the same time period, the same projects, and the same developers represented in Toolsmiths. Using these data, two of the authors inferred which refactorings were performed by comparing adjacent commits manually.</li><li>Ratzinger describes the most sophisticated strategy for finding refactoring messages: searching for the occurrence of keywords such as “move” and “rename”, and excluding “needs refactoring”. We replicated Ratzinger’s experiment for the Eclipse code base to nullify Ratzinger’s conclusions.</li><li>In order for refactoring activity to be defined as frequent, we seek to apply criteria that require refactoring to be habitual and occurring at regular intervals. First, we examined the Toolsmiths data to determine how refactoring activity was spread throughout development. Second, we examined the Users data to determine how often refactoring occurred within a programming session and whether there was significant variation among the population.</li><li>We hypothesize that programmers often do not use refactoring tools, because existing tools may not have a sufficiently usable user-interface. To validate this hypothesis, we correlated the refactorings that we observed by manually inspecting Eclipse CVS commits with the refactoring tool usages in the Toolsmiths data set.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Cloning Considered Harmful: Considered Harmful</title>
    <link href="/2022/10/05/Paper-Reading-Cloning-Considered-Harmful-Considered-Harmful/"/>
    <url>/2022/10/05/Paper-Reading-Cloning-Considered-Harmful-Considered-Harmful/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/WCRE.2006.1">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-was-the-work-validated"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-was-the-work-validated" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How was the work validated?"></a>What were the primary contributions of the paper as the author sees it? How was the work validated?</h1><p>Current literature on the topic of duplicated code in software systems often considers duplication harmful to the system quality, and the reasons commonly cited for duplicating code often have a negative connotation.</p><p>While these positions are sometimes correct, during our case studies we have found that this is not universally true, and we have found several situations where code duplication seems to be a reasonable or even beneficial design option.</p><p>This paper introduces eight cloning patterns that we have uncovered during case studies on large software systems, and discusses the advantages and disadvantages associated with using them.</p><ul><li>Forking, cloning used to bootstrap development of similar solutions, with the expectation that evolution of the code will occur somewhat independently<ul><li>Hardware variation</li><li>Platform variation</li><li>Experimental variation</li></ul></li><li>Templating, directly copy behavior of existing code but appropriate abstraction mechanisms are unavailable<ul><li>Boiler-plating due to language in-expressiveness</li><li>API&#x2F;Library protocols</li><li>General language or algorithmic idioms</li></ul></li><li>Customization, currently existing code does not adequately meet a<br>new set of requirements<ul><li>Bug workarounds</li><li>Replicate and specialize</li></ul></li></ul><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-this-work-move-the-research-forward-How-could-this-research-be-extended"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-this-work-move-the-research-forward-How-could-this-research-be-extended" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does this work move the research forward? How could this research be extended?"></a>What were the main contributions of the paper as you (the reader) see it? How does this work move the research forward? How could this research be extended?</h1><p>This paper introduces the notion of categorizing high level patterns of cloning in a similar fashion to the cataloging of design patterns or anti-patterns. There are several benefits that can be gained from this characterization.</p><ol><li>It provides a flexible framework on top of which we can document our knowledge about how and why cloning occurs in software. This documentation crystallizes a vocabulary that researchers and practitioners can possibly use to communicate about cloning.</li><li>This categorization is a first step towards formally defining these patterns to aid in automated detection and classification. These classifications can then be used to define metrics concerning code quality and maintenance efforts. Automatic classifications will also provide us with better measures of code cloning in software systems and severity of the problem in general.</li></ol><h1 id="How-could-this-research-be-applied-in-practice"><a href="#How-could-this-research-be-applied-in-practice" class="headerlink" title="How could this research be applied in practice?"></a>How could this research be applied in practice?</h1><p>In each uncovered cloning pattern, the author describes its advantages, disadvantages, how it can be managed, issues to be aware of when deciding to use it as a long-term solution, as well as real examples in large software systems. These provide practical guidelines when considering a trade-off between code cloning and formulating abstractions for code reuse, as well as how to manage code cloning should it be used, when developing a software project.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Go To Statement Considered Harmful</title>
    <link href="/2022/10/04/Paper-Reading-Go-To-Statement-Considered-Harmful/"/>
    <url>/2022/10/04/Paper-Reading-Go-To-Statement-Considered-Harmful/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf">here</a>.</p><p>The author has been familiar with the observation that the quality of programmers is a decreasing function of the density of go to statements in the programs they produce, and in this paper, he explains why the use of the go to statement has negative effects.</p><p>He first remarks that the process taking place under control of the program, instead of the program itself, is the true subject matter of a programmer’s activity, and it is this process whose behavior has to satisfy the desired specifications. He then argues that our intellectual powers can better master static relations than visualize processes evolving in time, for which reason we should shorten the conceptual gap between the static program and the dynamic progress. The author continues characterizing the progress of a progress, explaining that it can be uniquely characterized by a mixed sequence of textual and&#x2F;or dynamic indices, when conditionals, procedures, and repetition clauses are considered. However, the unbridled use of the go to statement has an immediate consequence that it becomes terribly hard to find a meaningful set of coordinates in which to describe the process progress, which will in turn “make a mess of one’s program”. </p><p>However, in my opinion, although the go to statement is considered harmful, abolishing the go to statement from all “higher level” programming languages is an overstatement. As the author himself stated:</p><ul><li>The exercise to translate an arbitrary flow diagram more or less mechanically into a jump-less one, is not to be recommended. Then the resulting flow diagram cannot be expected to be more transparent than the original one.</li></ul><p>There exist situations where an “arbitrary flow diagram” has to be implemented (especially when implementing Finite-State Machines in lexers, regex engines, and protocols), and in these situations, implementing the flow diagram using go to statements is much more direct, straightforward and easier to reason about (not to mention more efficient) than mashing up structured programming constructs.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs</title>
    <link href="/2022/10/04/Paper-Reading-KLEE-unassisted-and-automatic-generation-of-high-coverage-tests-for-complex-systems-programs/"/>
    <url>/2022/10/04/Paper-Reading-KLEE-unassisted-and-automatic-generation-of-high-coverage-tests-for-complex-systems-programs/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf">here</a>.</p><h1 id="What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work"><a href="#What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work" class="headerlink" title="What is the problem being tackled? How was it addressed by prior work?"></a>What is the problem being tackled? How was it addressed by prior work?</h1><p>Many classes of errors are difficult to find without executing a piece of code. The importance of such testing, combined with the difficulty and poor performance of random and manual approaches, has led to much work in <strong>using symbolic execution to automatically generate test inputs</strong>.</p><p>It has been an open question whether the approach has any hope of consistently achieving high coverage on real applications, facing the challenges in handling code that interacts with the environment, and the exponential number of paths through code.</p><p>Traditional symbolic execution systems either cannot handle programs interacting with the environment or require a complete working model. More recent work in test generation does allow external interactions, but forces them to use entirely concrete procedure call arguments, which limits the behaviors they can explore.</p><p>For the path explosion problem, search strategies proposed in the past include Best First Search, Generational Search, and Hybrid Concolic Testing. Orthogonal to search heuristics, researchers have addressed the path explosion problem by testing paths compositionally, and by tracking the values read and written by the program.</p><h1 id="What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you"><a href="#What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?"></a>What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?</h1><p>KLEE interprets programs compiled to LLVM IR, and typically requires no source modification. It functions as a hybrid between an operating system for symbolic processes and an interpreter. Each symbolic process has a register file, stack, heap, program counter, and path condition. Unlike a normal process, storage locations for a symbolic process - registers, stack and heap objects - refer to expression trees instead of raw data values. The leaves of an expression are symbolic variables or constants, and the interior nodes come from LLVM IR operations.</p><p>Conditional branches take a boolean expression and alter the instruction pointer of the symbolic process based on whether the condition is true or false. KLEE queries the constraint solver to determine if the branch condition is either provably true or false along the current path. If so, the instruction pointer is updated to the appropriate location. Otherwise, both branches are possible. KLEE forks the symbolic process so that it can explore both paths.</p><p>The number of forked symbolic processs grows quite quickly in practice. KLEE implements the heap as an immutable map, and portions of the heap structure itself can also be shared amongst multiple symbolic processs. Additionally, this heap structure can be forked in constant time, which is important given the frequency of this operation.</p><p>Potentially dangerous operations implicitly generate branches that check if any input value exists that could cause an error. For example, a division instruction generates a branch that checks for a zero divisor. If so, KLEE solves the current path’s constraints to produce a test case that will follow the same path when rerun on an unmodified version of the checked program, and terminates the current symbolic process. KLEE will then continue execution on the false path, which adds the negation of the check as a constraint (e.g., making the divisor not zero).</p><p>The core of KLEE is an interpreter loop which selects a symbolic process to run and then symbolically executes a single instruction in the context of that symbolic process. Given more than one symbolic process, KLEE must pick which one to execute first. KLEE selects the symbolic process to run at each instruction by uses each strategy in a round robin fashion.</p><ul><li>Random Path Selection: Use a binary tree to record the program path followed for all active symbolic processs. A symbolic process is selected by traversing this tree from the root and randomly selecting the path to follow at branch points. This strategy has two important properties.<ul><li>Favors symbolic processs high in the branch tree. They have less constraints on their symbolic inputs and have greater freedom to reach uncovered code.</li><li>Avoids starvation when some part of the program is rapidly creating new symbolic processs (“fork bombing”) as it happens when a tight loop contains a symbolic condition.</li></ul></li><li>Coverage-Optimized Search: Select symbolic processs likely to cover new code in the immediate future using heuristics.</li></ul><p>This loop continues until there are no symbolic processs remaining, or a user-defined timeout is reached.</p><p>KLEE ensures that a symbolic process which frequently executes expensive instructions will not dominate execution time by running each symbolic process for a “time slice” defined by both a maximum number of instructions and a maximum amount of time.</p><p>KLEE uses STP as its constraint solver. KLEE maps every memory object in the checked code to a distinct STP array. This representation dramatically improves performance since it lets STP ignore all arrays not referenced by a given expression. Furthermore, there are tricks to simplify expressions and ideally eliminate queries before they reach STP, including:</p><ul><li>Expression Rewriting</li><li>Constraint Set Simplification</li><li>Implied Value Concretization</li><li>Constraint Independence</li><li>Counter-example Cache: Redundant queries are frequent, and a simple cache is effective at eliminating a large number of them. However, it is possible to build a more sophisticated cache due to the particular structure of constraint sets. The counter-example cache maps sets of constraints to counter-examples (i.e., variable assignments), along with a special sentinel used when a set of constraints has no solution. <strong>This mapping is stored in a custom data structure — derived from the UBTree structure of Hoffmann and Hoehler, which allows efficient searching for cache entries for both subsets and supersets of a constraint set.</strong> By storing the cache in this fashion, the counter-example cache gains three additional ways to eliminate queries.<ul><li>When a subset of a constraint set has no solution, then neither does the original constraint set.</li><li>When a superset of a constraint set has a solution, that solution also satisfies the original constraint set.</li><li>When a subset of a constraint set has a solution, it is likely that this is also a solution for the original set.</li></ul></li></ul><p>KLEE handles the environment by redirecting library calls to models that understand the semantics of the desired action well enough to generate the required constraints. The real environment can fail in unexpected ways. Such failures can often lead to unexpected and hard to diagnose bugs. To help catch such errors, KLEE will optionally simulate environmental failures by failing system calls in a controlled manner.</p><h1 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h1><p>Four sets of experiments are conducted.</p><ul><li>We do intensive runs to both get high coverage and find bugs on Coreutils and BusyBox tools, do a comparision with random tests and developer test suites, and discuss the bugs found.</li><li>To demonstrate KLEE’s applicability to bug finding, we used KLEE to check all 279 BusyBox tools and 84 MINIX tools in a series of short runs.</li><li>Thus far, we have focused on finding generic errors that do not require knowledge of a program’s intended behavior. We now show how to do much deeper checking, including verifying full functional correctness on a finite set of explored paths. We use KLEE to find deep correctness errors by cross-checking purportedly equivalent Coreutils and BusyBox tool implementations.</li><li>We have also applied KLEE to checking non-application code by using it to check the HiStar kernel.</li></ul><p>We chose line coverage as reported by gcov as a conservative measure of KLEE-produced test case effectiveness, because it is widely-understood and uncontroversial.</p><p>The results of the experiments are very positive, and convincingly prove the proposed problem statement.</p><h1 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?</h1><p>Coverage-Optimized Search tries to select symbolic processs likely to cover new code in the immediate future. It uses heuristics to compute a weight for each symbolic process and then randomly selects a symbolic process according to these weights. How these heuristics work, which is critical for performance, is not symbolic processd, and remains unclear.</p><p>KLEE ensures that a symbolic process which frequently executes expensive instructions will not dominate execution time by running each symbolic process for a “time slice” defined by both a maximum number of instructions and a maximum amount of time. Precisely how this “time slice” is calculated is also unclear.</p><p>KLEE handles the environment by redirecting library calls to models that understand the semantics of the desired action well enough to generate the required constraints. These models are written in normal C code which the user can readily customize, extend, or even replace without having to understand the internals of KLEE. However, what “understand the semantics of the desired action well enough” means is unclear.</p><h1 id="Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper"><a href="#Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper" class="headerlink" title="Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?"></a>Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?</h1><p>KLEE does not currently support symbolic floating point, longjmp, threads, and assembly code. Additionally, memory objects<br>are required to have concrete sizes. These block KLEE’s application towards floating point-heavy scientific computation and data science code, and may also limit KLEE to simple programming languages such as C, not supporting the numerous dynamics, including exception handling, within C++.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: CUTE: A Concolic Unit Testing Engine for C</title>
    <link href="/2022/10/02/Paper-Reading-CUTE-A-Concolic-Unit-Testing-Engine-for-C/"/>
    <url>/2022/10/02/Paper-Reading-CUTE-A-Concolic-Unit-Testing-Engine-for-C/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/1095430.1081750">here</a>.</p><p><strong>NOTE: I believe the paper to be written very obscurely, so I will explain the ideas of the paper in my own words.</strong></p><h1 id="What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work"><a href="#What-is-the-problem-being-tackled-How-was-it-addressed-by-prior-work" class="headerlink" title="What is the problem being tackled? How was it addressed by prior work?"></a>What is the problem being tackled? How was it addressed by prior work?</h1><p>Unit testing is a method for modular testing of a program’s functional behavior. Such testing requires specification of values for the inputs (or test inputs) to the unit. Manual specification of such values is labor intensive and cannot guarantee that all possible behaviors of the unit will be observed during the testing. </p><p>Several techniques have been proposed to automatically generate values for the inputs.</p><ul><li>Randomly choose the values over the domain of potential inputs<ul><li>Many values may lead to the same behavior and are redundant.</li><li>The probability of selecting inputs causing buggy behavior may be astronomically small.</li></ul></li><li>Symbolic Exection<ul><li>Addresses the problem of redundant executions and increases test coverage</li><li>For large or complex units, it is intractable to maintain and solve the constraints required for test generation</li></ul></li><li>Incrementally generating test inputs by combining concrete and symbolic execution<ul><li>During a concrete execution, a conjunction of symbolic constraints along the path of execution is generated. These constraints are modified and then solved to generate further test inputs to direct the program along alternative paths. If it is not feasible to solve, simply substitute random concrete values.</li><li>This problem is particularly complex for programs with dynamic data structures using pointer operations. Pointers may have aliases.</li></ul></li></ul><p>In this paper, we provide a method for representing and solving approximate pointer constraints to generate test inputs. Our method is thus applicable to a broad class of sequential programs.</p><h1 id="What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you"><a href="#What-are-the-innovation-s-proposed-in-this-paper-Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?"></a>What are the innovation(s) proposed in this paper? Which technical innovations are most compelling to you?</h1><p>We consider the execution of a function to be determined by <strong>all the stack variables, global variables, and heap objects</strong> it exercises.</p><ul><li>Only primitive types and pointer types are taken into consideration.</li><li>For structures and arrays, each member is considered to be a separate variable.</li><li>External OS services are not modelled.</li></ul><p>We associate the following <strong>properties</strong> with each stack variable, global variable, and heap object.</p><ul><li>Concrete Value</li><li>Symbolic Value</li><li>Concrete Address</li><li>Symbolic Address</li></ul><p>The branches taken within an execution can be described with a predicate sequence called a <strong>path constraint</strong>.</p><ul><li>Each predicate is described using the aforementioned stack variables, global variables, and&#x2F;or heap objects.</li><li>Symbolic values are used when available, otherwise, concrete values are used.</li><li>Predicates involving primitive types are of the form $a_1 x_1 + \dots + a_n x_n + c<del>R</del>0, R \in {&lt;, &gt;, \le, \ge, &#x3D;, \ne}$, where $a_i, \dots, a_n, c$ are integer constants. (Essentially considers only linear combinations of primitive types)</li><li>Predicates involving pointers are of the form $x<del>R</del>y$ or $x<del>R</del>NULL$, $R \in {&#x3D;, \ne}$. (Essentially considers only being able to assign to a pointer NULL or another previously known address, and does not allow converting integers to pointers)</li></ul><p>Running process of CUTE.</p><ul><li><p>while True:</p><ul><li>Execute, in the process:<ul><li>When <strong>allocating</strong> a stack variable, global variable, or heap object <strong>without initialization</strong> (incl. function parameters):<ul><li>Modify “known stack variables, global variables, and heap objects” if needed.</li><li>If its concrete value has been stored, initialize it to its stored concrete value. Otherwise, generate a random concrete value for it.</li><li>Record its concrete value and concrete address.</li></ul></li><li>When <strong>allocating</strong> a stack variable, global variable, or heap object <strong>with initialization</strong>:<ul><li>Modify “known stack variables, global variables, and heap objects” if needed.</li><li>Record its concrete value and concrete address.</li><li>Record its symbolic value and symbolic address.</li></ul></li><li>When <strong>assigning</strong> an existing stack variable, global variable, or heap object:<ul><li>Update its concrete value.</li><li>Update its symbolic value.</li></ul></li><li>When <strong>taking a branch</strong>, add a new predicate to the path constraint.</li></ul></li><li>After execution, <strong>negate the last predicate within the path constraint</strong>, and <strong>solve for the concrete values of “stack variables, global variables, and heap objects allocated without initialization”</strong>. Update their recorded concrete values.<ul><li>Solving optimizations:<ul><li>Check if the last predicate is syntactically the negation of any preceding predicate</li><li>Identify and eliminate common arithmetic subconstraints.</li><li>Identify dependencies between predicates and exploit them. The path constraints from two consecutive concolic executions, $C$ and $C’$ differ only in a small number of predicates, and their respective solutions are similar. The solver collects all the predicates in C that are dependent on the negation of the last and solves for them. In practice, we have found that the size of this set is almost one eighth the size of $C$ on average.</li></ul></li></ul></li></ul></li><li><p>Generated random concrete values:</p><ul><li>Primitive Type: random number</li><li>Pointer Type: NULL</li></ul></li></ul><p>We next consider <strong>testing of functions that take data structures as inputs</strong>. We want to test such functions with valid inputs only. There are two main approaches to obtaining valid inputs:</p><ul><li>Generating inputs with call sequences</li><li><strong>Use the functions that check if an input is a valid data structure by solving them</strong>, i.e., generating input for which they return true. Previous techniques include a search that uses purely concrete execution and a search that uses symbolic execution for primitive data but concrete values for pointers. CUTE, in contrast, uses symbolic execution for both primitive data and pointers. This allows it to solve these functions asymptotically faster than the fastest previous techniques.</li></ul><h1 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h1><p>We illustrate two case studies that show how CUTE can detect errors.</p><ol><li>We applied CUTE to test its own data structures. Our goal in this case study was to detect memory leaks in addition to standard errors such as segmentation faults, assertion violation etc.</li><li>We also applied CUTE to unit test SGLIB version 1.0.1, a popular, open-source C library for generic data structures. We chose SGLIB as a case study primarily to measure the efficiency of CUTE. We found two bugs in SGLIB using CUTE.</li></ol><p>The case studies showcase the power of CUTE’s concolic unit testing approach, and match well with the proposed problem statement.</p><h1 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?</h1><p>After execution, negate the last predicate within the path constraint, and solve for the concrete values of “stack variables, global variables, and heap objects allocated without initialization”. A solving optimization that the author proposed is “identifing and eliminating common arithmetic subconstraints”. However, how this is done is not explained.</p><h1 id="Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper"><a href="#Which-problems-remain-unsolved-after-this-paper-Do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper" class="headerlink" title="Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?"></a>Which problems remain unsolved after this paper? Do you foresee any barriers to the applicability of the technique proposed in the paper?</h1><ul><li>For structures and arrays, each member is considered to be a separate variable. Although this facilicates analysis, this could incur significant overhead and impede scalability.</li><li>External OS services are not modelled. </li><li>Predicates involving primitive types are of the form $a_1 x_1 + \dots + a_n x_n + c<del>R</del>0, R \in {&lt;, &gt;, \le, \ge, &#x3D;, \ne}$, where $a_i, \dots, a_n, c$ are integer constants. This essentially considers only linear combinations of primitive types.</li><li>The author shows preference to using the technique of “using the functions that check if an input is a valid data structure by solving them” to solve the problem of testing of functions that take data structures as inputs. However, such an approach may be impossible for object-oriented languages such as C++, in which data structures are encapsulated in classes, and the logic of validness is enforced with the constructor and public methods of the classes.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Selection and Presentation Practices for Code Example Summarization</title>
    <link href="/2022/09/28/Paper-Reading-Selection-and-Presentation-Practices-for-Code-Example-Summarization/"/>
    <url>/2022/09/28/Paper-Reading-Selection-and-Presentation-Practices-for-Code-Example-Summarization/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1145/2635868.2635877">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward-How-could-this-research-be-applied-in-practice"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward-How-could-this-research-be-applied-in-practice" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How does this work move the research forward? How could this research be applied in practice?"></a>What were the primary contributions of the paper as the author sees it? How does this work move the research forward? How could this research be applied in practice?</h1><p>Code examples are important in modern software development. As part of the first steps toward automatic source-to-source summarization, the authors studied how humans summarize examples to understand how to automate the process, and propose empirically-supported hypotheses justifying the use of specific practices.</p><p>Selection Practices</p><ul><li>Practices Related to Language Constructs</li><li>Practices Based on Query Term</li><li>Practices Considering the Human Reader<br>Presentation Practices</li><li>Trimming a Line When Needed</li><li>Compressing a Large Amount of Code</li><li>Truncating Code</li><li>Formatting Code for Readability</li><li>Improving Code</li></ul><p>The results provide a grounded basis for the development of code example summarization and presentation technology.</p><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>We chose a well-defined corpus of programming documents, The Official Android API Guides, which contains a mix of natural-language text and code fragments.</p><p>We collected 156 pairs of code examples and their summaries from 16 participants, along with over 26 hours of think-aloud verbalizations detailing the decisions of the participants during their summarization activities. We analyzed common practices behind these decisions across the hand-generated representations, as well as the rationale behind the practices.</p><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it?"></a>What were the main contributions of the paper as you (the reader) see it?</h1><p>In my opinion, aside from the obvious contributions of the paper presented by the author, there is a lot to learn from the study set-up and the conceptual framework for interpreting the results.</p><ol><li>To understand the rationale behind the practices, we instructed the participants to verbalize their thought process using the think-aloud protocol.</li><li>We distinguished practices concerning the type of content selected and the way the content was presented in a summary, because even summaries with content associated with the same part of the original fragment could vary on how to present the summary.</li><li>To make hypotheses justifying the use of different practices, we relied on a quantitative analysis of the distribution of each practice across code fragments and participants. In-lined histograms presents the distribution of observations of a given practice for the participants over the code fragments. This provides a convenient and compact assessment of the amount of evidence for a practice.</li></ol><p>Furthermore, the authors have borrowed a lot from related domains of research, including natural language generation, natural language summarization of code, etc. Some examples:</p><ol><li>The separation of content selection from presentation is typical in a natural language generation system.</li><li>The comments demonstrated a number of different ways to abstract content, including aggregating lexically and aggregating semantically - natural language generation terminology.</li><li>Seven participants injected additional natural language into the code summaries. This motivates a novel type of transformations that mix code and text. The only work we know of in this area is the natural summaries generated by Rastkar et al.</li></ol><p>This gives revelations on exploiting knowledge from related domains when doing our own research.</p><h1 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h1><p>The goal of the study was to inform the design of concise representations of source code and automatic summarization algorithms. A natural future direction is to implement these representations and algorithms, and conduct empirical studies assessing their usefulness in summarizing source code.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Finding and Understanding Bugs in C Compilers</title>
    <link href="/2022/09/24/Paper-Reading-Finding-and-Understanding-Bugs-in-C-Compilers/"/>
    <url>/2022/09/24/Paper-Reading-Finding-and-Understanding-Bugs-in-C-Compilers/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/1993316.1993532">here</a>.</p><h2 id="What-is-the-problem-being-tackled"><a href="#What-is-the-problem-being-tackled" class="headerlink" title="What is the problem being tackled?"></a>What is the problem being tackled?</h2><p>Finding compiler bugs, especially bugs in the “middle end” of a compiler that performs transformations on an intermediate representation, to improve the quality of C compilers.</p><h2 id="How-was-it-addressed-by-prior-work"><a href="#How-was-it-addressed-by-prior-work" class="headerlink" title="How was it addressed by prior work?"></a>How was it addressed by prior work?</h2><p>Compilers have been tested using randomized methods for nearly 50 years.</p><p>In 1998, McKeeman coined the term “differential testing”. His work resulted in DDT, a family of program generators that conform to the C standard at various levels. However, DDT avoided only a small subset of all undefined behaviors, and only then during test-case reduction, not during normal testing. Thus, it is not a suitable basis for automatic bug-finding.</p><p>Lindig used randomly generated C programs to find several compiler bugs related to calling conventions. His tests are self-checking, but far less expressive than Csmith.</p><p>Sheridan also used a random generator to find bugs in C compilers. Sheridan’s tool produces self-checking tests. However, it is less expressive than Csmith and it fails to avoid undefined behavior such as signed overflow.</p><p>Zhao et al. created an automated program generator for testing an embedded C++ compiler, which allows a general test requirement, such as which optimization to test, to be specified.</p><h2 id="What-are-the-innovation-s-proposed-in-this-paper"><a href="#What-are-the-innovation-s-proposed-in-this-paper" class="headerlink" title="What are the innovation(s) proposed in this paper?"></a>What are the innovation(s) proposed in this paper?</h2><p>The paper proposes Csmith, a randomized test-case generation tool which generates programs that cover a large subset of C while avoiding the undefined and unspecified behaviors that would destroy its ability to automatically find wrong-code bugs. This advances the state of the art in compiler testing.</p><p>Csmith supports compiler bug-hunting using differential testing. Csmith generates a C program, a test harness then compiles the program using several compilers, runs the executables, and compares the outputs.</p><h2 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h2><p>The authors conducted five experiments.</p><ol><li>Finding and reporting bugs in a a variety of C compilers over a three-year period. They have found and reported more than 325 bugs in mainstream C compilers including GCC, LLVM, and commercial tools.</li><li>Compiling and running one million random programs using several years’ worth of versions of GCC and LLVM, to understand how their robustness is evolving over time.</li><li>Evaluating Csmith’s bug-finding power as a function of the size of the generated C programs.</li><li>Comparing Csmith’s bug-finding power to that of four<br>previous random C program generators.</li><li>Investigating the effect of testing random programs on branch, function, and line coverage of the GCC and LLVM source code.</li></ol><p>The experiments thoroughly evaluate and demonstrate Csmith’s bug-finding power and provide guidelines for using Csmith to find bugs.</p><h2 id="Which-technical-innovations-are-most-compelling-to-you"><a href="#Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="Which technical innovations are most compelling to you?"></a>Which technical innovations are most compelling to you?</h2><p>Csmith uses randomized differential testing. This has the advantage that no oracle for test results is needed. It exploits the idea that if one has multiple, deterministic implementations of the same specification, all implementations must produce the same result from the same valid input. When two implementations produce different outputs, one of them must be faulty. Given three or more implementations, a tester can use voting to heuristically determine which implementations are wrong.</p><p>How Csmith designs the results used for differential testing is also worthwhile. A Csmith-generated program prints a value summarizing the computation performed by the program, which is implemented as a checksum of the program’s non-pointer global variables at the end of the program’s execution. Thus, if changing the compiler or compiler options causes the checksum emitted by a Csmith-generated program to change, a compiler bug has been found.</p><p>Also compelling are the mechanisms that Csmith uses to avoid generating C programs that execute undefined behaviors or depend on unspecified behaviors, including performing incremental pointer and dataflow analysis in the process of generating programs.</p><h2 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper?</h2><p>In the process of randomly generating programs, Csmith randomly selects an allowable production from its grammar for the current program point. To make the choice, it consults a probability table and a filter function specific to the current point: there is a table&#x2F;filter pair for statements, another for expressions, and so on. The table assigns a probability to each of the alternatives, where the sum of the probabilities is one.</p><p>However, how this probability table is constructed and maintained, which obviously is critical to generating high-quality random programs, is not stated in the paper, and requires clarification.</p><h2 id="Do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome-Which-problems-remain-unsolved-after-this-paper"><a href="#Do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome-Which-problems-remain-unsolved-after-this-paper" class="headerlink" title="Do you forsee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome? Which problems remain unsolved after this paper?"></a>Do you forsee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome? Which problems remain unsolved after this paper?</h2><p>The most important language features not currently supported by Csmith are strings, dynamic memory allocation, floating-point types, unions, recursion, and function pointers. These are language features that are ubiquitous in real-world programs, thus, not supporting them is a serious barrier to the applicability of Csmith. The authors plan to add some of these features to future versions of our tool.</p><p>Although Csmith-generated programs allowed discovering bugs missed by compilers’ standard test suites, branch, function, and line coverage of the GCC and LLVM source code did not significantly improve compared to the compilers’ existing test suites. ‘Coverage-guided’ fuzzing may represent a future direction of research to discover more bugs lurking in unvisited sections of compiler source code.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Do Automatically Generated Unit Tests Find Real Faults? An Empirical Study of Effectiveness and Challenges</title>
    <link href="/2022/09/22/Paper-Reading-Do-Automatically-Generated-Unit-Tests-Find-Real-Faults-An-Empirical-Study-of-Effectiveness-and-Challenges/"/>
    <url>/2022/09/22/Paper-Reading-Do-Automatically-Generated-Unit-Tests-Find-Real-Faults-An-Empirical-Study-of-Effectiveness-and-Challenges/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/ASE.2015.86">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-could-this-research-be-applied-in-practice"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-could-this-research-be-applied-in-practice" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How could this research be applied in practice?"></a>What were the primary contributions of the paper as the author sees it? How could this research be applied in practice?</h1><p>The paper conducts an empirical study of the effectiveness and challenges of automatically generated unit tests at finding real faults, and derive insights to support the development of automated unit test generators that achieve a higher fault detection rate.</p><ol><li>Improving the obtained code coverage so that faulty statements are executed in the first instance.</li><li>A high code coverage ratio does not necessarily indicate that the bug was covered. Improving the propagation of faulty program states to an observable output, coupled with the generation of more sensitive assertions, is also required.</li><li>Improving the simulation of the execution environment to detect faults that are dependent on external factors such as date and time.</li></ol><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>The authors applied three state-of-the art unit test generation tools for Java (Randoop, EvoSuite, and Agitar) to the 357 real faults in the Defects4J dataset and investigated how well the generated test suites perform at detecting these faults.</p><ol><li>To account for randomness in test generation, we generated 10 test suites for each tool and fault.</li><li>Tools may generate flaky tests, which may also fail on the fixed version. They are automatically removed.</li><li>Even if a test is not flaky, it might still fail on the buggy version for reasons unrelated to the actual fault. Such false positives are identified.</li><li>For each executed test, we collected information on whether it passed or failed, and the reason of failure.</li><li>In order to study how code coverage relates to fault detection, we measured statement coverage, and also bug coverage - whether a fault was 1) fully covered (all modified statements covered), 2) partially covered (some modified statements covered), or 3) not covered.</li></ol><p>To gain insights on how to increase the fault detection rate of test generation tools, the authors did case studies on the challenges that prevent fault detection, and studied the root causes for flaky and false-positive tests.</p><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you-How-could-this-research-be-extended"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you-How-could-this-research-be-extended" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does the work apply to you? How could this research be extended?"></a>What were the main contributions of the paper as you (the reader) see it? How does the work apply to you? How could this research be extended?</h1><p>The revelations from the case studies supporting the primary contributions of the paper as the author sees it are particularly important, as they identify specific challenges and provide plausible solutions for increasing the fault detection rate of test generation tools.</p><p>Creation of complex objects, such as a control flow graph, which often requires a certain sequence of prior method calls. Viable solutions include seeding objects observed at runtime, mining of common usage patterns of objects to guide object creation, or carving of complex object states from system tests.</p><p>Complex strings satisfying a certain syntax. Search-based tools are capable in principle of generating string inputs, but doing so can take very long. Symbolic approaches using string solvers or dedicated solvers for regular expressions are generally restricted to fixed length strings. If an input grammar is known, this can be used to generate test data more efficiently.</p><p>Complex conditions which randomly initialized inputs are unlikely to satisfy. Dynamic symbolic execution would not suffer from this problem.</p><p>Errors are not propagated. To some extent, this is the result of focusing on simple structural criteria such as branch coverage, rather than aiming to exercise more complex intra-class data flow dependencies.</p><p>Environmental dependencies and dependencies on the static state of the system under test resulting in flaky tests.</p><p>Aggressive mocking, which monitors and asserts on the internal state (e.g. the order of method calls) of the class under test, rather than testing the class on what its public method returns, and its side effects.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: The Art of Testing Less without Sacrificing Quality</title>
    <link href="/2022/09/21/Paper-Reading-The-Art-of-Testing-Less-without-Sacrificing-Quality/"/>
    <url>/2022/09/21/Paper-Reading-The-Art-of-Testing-Less-without-Sacrificing-Quality/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://www.microsoft.com/en-us/research/publication/the-art-of-testing-less-without-sacrificing-quality/">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How does this work move the research forward?"></a>What were the primary contributions of the paper as the author sees it? How does this work move the research forward?</h1><p>For large complex software products, there is a need to check that changes do not negatively impact other parts of the software and they comply with system constraints such as backward compatibility, performance, security etc. Ensuring these system constraints may require complex test procedures, but long tests conflict with strategic aims to shorten release cycles.</p><p>To accelerate test processes without sacrificing product quality, the paper develops a cost model for test executions based on historic test execution results that causes no test execution runtime overhead. The paper then presents a novel cost based test selection strategy, THEO, which skips test executions where the expected cost of running the test exceeds the expected cost of not running it, while ensuring that all tests will execute on all code changes at least once.</p><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>The paper replayed past development periods of Microsoft Windows, Office, and Dynamics with THEO. THEO would have reduced the number of test executions by up to 50%, cutting down test time by up to 47%. At the same time, product quality was not sacrificed as the process ensures that all tests are ran at least once on all code changes. Simulation shows that THEO produced an overall cost reduction of up to $2 million per development year, per product.</p><p>Furthermore, this paper have convinced an increasing number of Microsoft product teams to explore ways to integrate THEO into their actual live production test environments. This further endorses THEO’s effectiveness.</p><h1 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h1><p>The paper stated that through reducing the overall test time, THEO would also have other impacts on the product development process, such as increasing code velocity and developer satisfaction. An empirical study on the effects of cost based test selection strategies on these aspects would be a direction for extending this research.</p><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you-How-could-this-research-be-applied-in-practice"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you-How-could-this-research-be-applied-in-practice" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does the work apply to you? How could this research be applied in practice?"></a>What were the main contributions of the paper as you (the reader) see it? How does the work apply to you? How could this research be applied in practice?</h1><p>In my opinion, the main contribution of this paper, and the aspect most able to be used as a reference in other projects, is the cost model where each test execution is considered an investment and the expected test result considered as return of investment.</p><p>Several factors are considered in the cost model, with their values easily derived from past observations.</p><ol><li>$p_{TP}$, the probability the combination of test and execution context will detect a defect (true positive).</li><li>$p_{FP}$, the probability the combination of test and execution context will report a false alarm (false positive).</li><li>$engineers$, the number of engineers whose code changes passed the current code branch.</li><li>$time_{delay}$, the average time span required to fix historic defects on the corresponding code branch.</li></ol><p>When a test is executed:</p><ol><li>$cost_{machine}$: the per-minute infrastructure cost of test execution.</li><li>$cost_{inspect}$: the average cost per test inspection, equal to inspection time times the salary of the engineer. For simplicity reasons, an average cost of test inspection is used.</li></ol><p>When a test is skipped:</p><ol><li>$cost_{escaped}$: the average cost of an escaped defect, per developer and hour of delay. Defect severity is not modeled, as it cannot be determined beforehand, and all defects causing development activity to freeze on the corresponding branch must be considered severe.</li></ol><p>After collecting these data, two cost functions are calculated: the expected cost of executing a test $cost_{exec} &#x3D; cost_{machine} + p_{FP} \times cost_{inspect}$, and the expected cost for not executing a test $cost_{skip} &#x3D; p_{TP} \times cost_{escaped} \times time_{delay} \times engineers$.</p><p>Through a reasonable and tested quantization like this, objective decisions can be made, boosting the efficiency of software development.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Boosting Fuzzer Eficiency: An Information Theoretic Perspective</title>
    <link href="/2022/09/20/Paper-Reading-Boosting-Fuzzer-Eficiency-An-Information-Theoretic-Perspective/"/>
    <url>/2022/09/20/Paper-Reading-Boosting-Fuzzer-Eficiency-An-Information-Theoretic-Perspective/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.6084/m9.figshare.12415622.v2">here</a>.</p><h2 id="What-is-the-problem-being-tackled"><a href="#What-is-the-problem-being-tackled" class="headerlink" title="What is the problem being tackled?"></a>What is the problem being tackled?</h2><p>Finding a solid theoretical foundation for fuzzing and using it to boost fuzzing efficiency is a direction of research of great practical value.</p><h2 id="How-was-it-addressed-by-prior-work"><a href="#How-was-it-addressed-by-prior-work" class="headerlink" title="How was it addressed by prior work?"></a>How was it addressed by prior work?</h2><p>Previous works have proposed various heuristics to boost fuzzing efficiency, such as assigning more energy to seeds that have previously been observed to crash, that maximize execution counts to discover algorithmic complexity vulnerabilities, that exercise low-probability paths, etc. Furthermore, there has also been prior research in theoretical aspects of fuzzing, such as conducting a probabilistic analysis on the efficiency of blackbox versus whitebox fuzzing, empirically investigating the scalability of non-deterministic black- and greybox fuzzing, etc. </p><h2 id="What-are-the-innovation-s-proposed-in-this-paper"><a href="#What-are-the-innovation-s-proposed-in-this-paper" class="headerlink" title="What are the innovation(s) proposed in this paper?"></a>What are the innovation(s) proposed in this paper?</h2><p>First, the paper develops an information-theoretic foundation for non-deterministic fuzzing.</p><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h3><p>Fuzzing Heuristics remain constant throughout the fuzzing process.</p><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><dl><dt>Neighborhood</dt><dd>All inputs generated from mutating a seed.</dd></dl><dl><dt>Species</dt><dd>A branch within a program.</dd></dl><dl><dt>Species Discovery</dt><dd>Program execution traverses a previously untraversed branch when some input is provided to the program.</dd></dl><dl><dt>Incidence Frequency</dt><dd>The number of times a species is covered.</dd></dl><dl><dt>Energy</dt><dd>The probability the fuzzer chooses a seed for mutation.</dd></dl><dl><dt>Power Schedule</dt><dd>The procedure of assigning energy to a seed.</dd></dl><dl><dt>Local Species Distribution of a Seed</dt><dd>Given a seed, the probability of each species being covered, when an input generated by mutation from the seed is fed to the program.</dd></dl><h3 id="Entropy-in-the-Context-of-Fuzzing"><a href="#Entropy-in-the-Context-of-Fuzzing" class="headerlink" title="Entropy in the Context of Fuzzing"></a>Entropy in the Context of Fuzzing</h3><p>Using the metaphor of a “language” with “words” of varying frequencies, entropy in the context of fuzzing can be understood as:</p><ul><li>“Sentences” of the “language”: Program executions resulting from generated inputs.</li><li>“Words” of the “language”: Species.</li><li>Frequencies of the “words”: The frequencies of each species being traversed.</li></ul><p>Entropy can be calculated using the frequencies of the “words”, and represents the frequency distribution of the “words”. <strong>As high entropy implies that the species of the program have all been well covered, it can be used as a proxy for fuzzing efficiency.</strong></p><h3 id="Local-Entropy-of-a-Seed"><a href="#Local-Entropy-of-a-Seed" class="headerlink" title="Local Entropy of a Seed"></a>Local Entropy of a Seed</h3><p>Still using the metaphor of a “language” with “words” of varying frequencies, local entropy of a seed can be understood as:</p><ul><li>“Sentences” of the “language”: Program executions resulting from <strong>inputs within the seed’s neighborhood</strong>.</li><li>“Words” of the “language”: Species.</li><li>Frequencies of the “words”: The frequencies of each species being traversed.</li></ul><p><strong>The local entropy of a seed quantifies the information that feeding the inputs within the seed’s neighborhood into the program reveals about the species.</strong></p><p>Second, the paper presents the first entropy-based power schedule to boost the efficiency of greybox fuzzers. More energy is assigned to seeds that elicit more information about the program’s species. <strong>Thus, every time when randomly choosing a seed for mutation, each seed is assigned an energy proportional to its local entropy</strong>.</p><p>However, a new seed that has never been fuzzed will always be assigned zero energy, and they will never be chosen for mutation. To solve this problem, add-one smoothing is used for the frequency of the species.</p><p>Specifically, the frequency of species $i$ used to calculate local entropy of seed $t$:</p><p>$p_i^t &#x3D; \frac{Y_i^t + 1}{S + Y_1^t + \dots + Y_S^t}$</p><p>Where:</p><ul><li>$Y_i^t$ is the number of times species $i$ has been traversed by the neighborhood of $t$.</li><li>$S$ is the total number of species at the time of calculation.</li></ul><p>Furthermore, in the experiments, the authors noticed that the local entropies for different seeds were almost the same, because a small number of very abundant species had a huge impact on the local entropies. Thus, the authors defined an abundance threshold $\theta$ which is an upper bound for $Y_i^t$.</p><h2 id="How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement"><a href="#How-are-those-innovations-evaluated-How-does-the-paper’s-evaluation-match-with-the-proposed-problem-statement" class="headerlink" title="How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?"></a>How are those innovations evaluated? How does the paper’s evaluation match with the proposed problem statement?</h2><p>The paper provides an open-source implementation, Entropic, within LLVM libFuzzer, and presents a substantial empirical evaluation on over 250 widely-used, open-source C&#x2F;C++ programs producing over 2 CPU years worth of data.</p><p>Four research questions were asked to evaluate the hypothesis that increasing information per generated input increases fuzzer efficiency.</p><ol><li>What is the empirical coverage improvement over the baseline?</li><li>How much faster are bugs detected compared to the baseline?</li><li>How does the choice of abundance threshold influence the performance of our technique?</li><li>What is the cost of maintaining incidence frequencies?</li></ol><p>The answers to these research strongly support the hypothesis, thus the evaluation matches well with the proposed problem statement.</p><h1 id="Your-opinion-of-the-paper"><a href="#Your-opinion-of-the-paper" class="headerlink" title="Your opinion of the paper"></a>Your opinion of the paper</h1><h2 id="Which-technical-innovations-are-most-compelling-to-you"><a href="#Which-technical-innovations-are-most-compelling-to-you" class="headerlink" title="Which technical innovations are most compelling to you?"></a>Which technical innovations are most compelling to you?</h2><p>Developing an information-theoric foundation for non-deterministic fuzzing, in which entropy in the context of fuzzing is calculated using the probability distribution of species (branches). This is both intuitive and allows us to effectively use entropy, <a href="https://colah.github.io/posts/2015-09-Visual-Information/#conclusion">which has “really nice properties, and a principled origin” as a “convenient proxy”</a> for fuzzing efficiency.</p><h2 id="What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper-Which-problems-remain-unsolved-after-this-paper"><a href="#What-remains-unclear-after-reading-the-paper-Are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper-Which-problems-remain-unsolved-after-this-paper" class="headerlink" title="What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper? Which problems remain unsolved after this paper?"></a>What remains unclear after reading the paper? Are there any clarification questions whose answers would substantially change your opinion of the paper? Which problems remain unsolved after this paper?</h2><p>The paper develops an information-theoretic foundation for non-deterministic fuzzing, before presenting the first entropy-based power schedule to boost the efficiency of greybox fuzzers. I have questions regarding both aspects.</p><ol><li>Entropy is calculated using the probability distribution of species, which are branches. Is is possible to utilize a different definition of “species”?</li><li>The entropy-based power schedule assigns each seed with energy proportional to its local entropy. However, the authors noticed that the local entropies for different seeds were almost the same, because a small number of very abundant species had a huge impact on the local entropies. Thus, the authors defined an abundance threshold $\theta$ for $Y_i^t$, a task-relevant hyperparameter. Is there a better approach for calculating the local entropies?</li></ol><h2 id="Do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome"><a href="#Do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-If-so-how-could-these-barriers-be-overcome" class="headerlink" title="Do you forsee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome?"></a>Do you forsee any barriers to the applicability of the technique proposed in the paper? If so, how could these barriers be overcome?</h2><p>As stated above, regarding the entropy-based power schedule.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How Effective Developers Investigate Source Code: An Exploratory Study</title>
    <link href="/2022/09/19/Paper-Reading-How-Effective-Developers-Investigate-Source-Code-An-Exploratory-Study/"/>
    <url>/2022/09/19/Paper-Reading-How-Effective-Developers-Investigate-Source-Code-An-Exploratory-Study/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/TSE.2004.101">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How does this work move the research forward?"></a>What were the primary contributions of the paper as the author sees it? How does this work move the research forward?</h1><ol><li>The paper provides a set of detailed observations about the characteristics of effective program investigation. These observations are accompanies by hypotheses that can be validated by additional research and practical experience.</li><li>The paper’s results support the intuitive notion that developers should follow a general plan, perform focused searches in the context of this plan, and keep some form of record of their findings when investigating a program.</li><li>The paper describes a methodology and analysis technique for studying the behavior of software developers.</li></ol><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>The authors conducted a study of five developers undertaking an identical software change task on a medium-sized system, where understanding the existing software is a precursor to modification and validation.</p><p>They did a detailed qualitative analysis of a few replicated cases, rather than a statistical analysis of causality between dependent variables. Many previous studies were based on heavily abstracted characterizations of both developer behavior and success level. It involved a detailed study of the examined code, the methods used to navigate between different locations in the code, and the modified source code.</p><p>They contrasted the program investigation behavior of successful and unsuccessful developers, and isolated the factors associated with the behavior of a developer, rather than external factors (such as the influence of the workplace, the programming environment, etc.)</p><h1 id="How-could-this-research-be-applied-in-practice"><a href="#How-could-this-research-be-applied-in-practice" class="headerlink" title="How could this research be applied in practice?"></a>How could this research be applied in practice?</h1><p>Ensuring that developers in charge of modifying software systems investigate the code of the system effectively can yield important benefits such as decreasing the cost of performing software changes and increasing the quality of the change.</p><p>Understanding the nature of program investigation behavior that is associated with successful software modification tasks can help us improve the tool support and training programs offered to software developers.</p><h1 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h1><p>Researchers can reuse the authors’ strategy (stated in “How was the work validated?”) to help validate the hypotheses the authors’ proposed, or to study other aspects of programmer behavior.</p><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?"></a>What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?</h1><p>In my opinion, the main contributions of the paper include the primary contributions of the paper as the author sees it, how the work was validated, and how this research could be applied in practice. However, what is most meaningful for me is how the work was validated. Such methodology is of great reference value for conducting studies on other aspects of programmer behavior. There are many technical details within that have left a deep impression on me.</p><ol><li>Each phase was described entirely through written instructions, and the subjects were given an Eclipse training phase and an investigation phase before the modification phrase.</li><li>To record the actions of a developer in the investigation and modification phases, they recorded the developers’ screens, and transcribed the recordings into a structured list of events. Each event contains the properties time, method, navigation, and modification. </li><li>To analyze the quality of change, the authors analyzed the source code to determine the characteristics of an ideal solution, and divided the task into five subtasks. The authors examined how each subject had implemented each subtask, and characterized its quality.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Understanding the Formulation of Information Entropy</title>
    <link href="/2022/09/16/Understanding-the-Formulation-of-Information-Entropy/"/>
    <url>/2022/09/16/Understanding-the-Formulation-of-Information-Entropy/</url>
    
    <content type="html"><![CDATA[<p>NOTE: The terms “language” and “word” are used metaphorically in this document.</p><p>A “language” often has many “words”, and the frequency of each “word” varies.</p><p>If a “language” $X$ has a total of $n$ “words”, then we can encode a word with $\log_{2}{n}$ binary bits. <strong>But when transmitting the words, we want to keep the encoding of each “word” as short as possible. A common practice is that for those high-frequency “words”, we can use shorter encodings, and for those “words” that we use less frequently, we can allow longer encodings.</strong> An example is the Morse code encoding for a “language” consisting of 36 “words” - 26 Latin letters and 10 Arabic numerals.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/International_Morse_Code.svg" alt="Morse code. The &quot;word&quot; &quot;e&quot; occurs frequently, hence a short code"></p><p>So, under some optimal encoding, what limit can the weighted average encoding length of all “words” achieve?</p><p>Suppose our “language” has $n$ “words”, $x_1, x_2, \dots, x_n$, and their probability of occurrence is $p(x_1), p(x_2), \dots, p(x_n)$ (known quantities).</p><p>Assuming that the lengths of the encodings of these “words” are $L(x_1), L(x_2), \dots, L(x_n)$ respectively, the weighted average encoding length of each “word” is:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + \dots + p(x_n) L(x_n)$</p><p>How do we find the minimum value of $\bar{L}$?</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>Obviously, the encoded length of all “words” is greater than 0. But beyond that, there is a hidden constraint.</p><p><strong>We do not allow one encoding to be a prefix of another encoding, otherwise there will be ambiguity during decoding</strong>. For example, assuming that the three “words” of “A”, “B”, and “C” in the alphabet are encoded as “0”, “1”, and “01” respectively, then for For a code like “001”, should we decode it as “AAB” or “AC”?</p><p>We call a type of code which requires that there is no whole code word in the system that is a prefix of any other code word in the system as a <strong>prefix code</strong>.</p><p>This means that if we assign a shorter encoding to a “word”, it will squeeze a lot of resources out of the encoding space. For example, suppose the “word” “A” is encoded as “0”, then it would “squeeze out” “00”, “01”, etc. from the codewords.</p><p>Suppose the maximum value in $L(x_1), L(x_2), \dots, L(x_n)$ is $L_{max}$. <strong>Then the encoding of all “words” are nodes on a full binary tree with a height of $L_{max}$, and the full binary subtrees below each node have no intersection (otherwise violating the properties of the prefix code), as shown below</strong>.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/04/Kraft_inequality_example.png" alt="The encoding of all &quot;words&quot; are nodes on a full binary tree with a height of $L_{max}$, and the full binary subtrees below each node have no intersection"></p><p>It is obvious that, <strong>all the full binary subtrees below each node, at most cover all the leaves of the full binary tree with height $L_{max}$.</strong></p><p>For a “word” $x_i, i \in {1, 2, \dots, n}$, the height of the full binary subtree below it is $L_{max} - L(x_i)$, and it covers $2^{L_{max} - L(x_i)}$ leaves.</p><p>As the full binary tree with height $L_{max}$ has a total of $2^{L_{max}}$, we have:</p><p>$2^{L_{max} - L(x_1)} + 2^{L_{max} - L(x_2)} + \dots + 2^{L_{max} - L(x_n)} \le 2^{L_{max}}$</p><p>This simplifies to:</p><p>$2^{- L(x_1)} + 2^{- L(x_2)} + \dots + 2^{- L(x_n)} \le 1$</p><p>This is the Kraft-McMillan inequality.</p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p>Therefore, our overall optimization objective is:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + \dots + p(x_n) L(x_n)$</p><p>Subject to:</p><ul><li>$p(x_i) \in (0, 1), i \in {1, 2, \dots, n}$ are constants</li><li>$p(x_1) + p(x_2) + \dots + p(x_n) &#x3D; 1$</li><li>$L(x_i) &gt; 0, i \in {1, 2, \dots, n}$ are independent variables</li><li>$2^{- L(x_1)} + 2^{- L(x_2)} + \dots + 2^{- L(x_n)} \le 1$</li></ul><hr><p><strong>We can analyze the problem for the case where there are only two words $x_1, x_2$</strong>. At this point, we have:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + p(x_2) L(x_2)$</p><p>Equivalently:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + (1 - p(x_1)) L(x_2)$</p><p>Subject to:</p><ul><li>$p(x_1) \in (0, 1)$ is a constant</li><li>$L(x_i) &gt; 0, i \in {1, 2}$ are independent variables</li><li>$2^{- L(x_1)} + 2^{- L(x_2)} \le 1$</li></ul><p>Define $a_1 &#x3D; 2^{- L(x_1)}, a_2 &#x3D; 2^{- L(x_2)}$. Now we have:</p><p>$\bar{L} &#x3D; - p(x_1) \log_2{a_1} - (1 - p(x_1)) \log_2{a_2}$</p><p>Subject to:</p><ul><li>$p(x_1) \in (0, 1)$ is a constant</li><li>$0 &lt; a_i &lt;1, i \in {1, 2}$ are independent variables</li><li>$a_1 + a_2 \le 1$</li></ul><p>At this point, $\bar{L}$ can be regarded as a binary function whose independent variables are $a_1, a_2$, and the value ranges of the independent variables $a_1, a_2$ are as follows:</p><p><img src="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Value_ranges_of_a_1_a_2.png" alt="Value ranges of $a_1, a_2$"></p><p>We want to find the minimum value of $\bar{L}(a_1, a_2)$ within this range of values.</p><p>The gradient of $\bar{L}(a_1, a_2)$ is as follows:</p><p>$\nabla\bar{L}(a_1, a_2) &#x3D; {(-p(x_1) \log{2} \frac{1}{a_1}, -(1 - p(x_1)) \log{2} \frac{1}{a_2})}^T$</p><p>Within the value range of the independent variables $a_1, a_2$, $\nabla\bar{L}(a_1, a_2)$ is always less than 0, which means that <strong>with the growth of $a_1, a_2$, $\bar{L}(a_1, a_2)$ decreases</strong>. Therefore, the maximum value of <strong>$\bar{L}(a_1, a_2)$ must occur when $(a_1, a_2)$ is on the boundary line $a_1 + a_2 &#x3D; 1$</strong>.</p><p>Substituting the boundary line $a_1 + a_2 &#x3D; 1$ into $\bar{L}(a_1, a_2)$, you can get a unary function:</p><p>$\bar{L}(a_1) &#x3D; - p(x_1) \log_2{a_1} - (1 - p(x_1)) \log_2{(1 - a_1)}$</p><p>The constraints include:</p><ul><li>$p(x_1) \in (0, 1)$, constant</li><li>$0 &lt; a_1 &lt; 1$</li></ul><p>The derivative of $\bar{L}(a_1)$ is as follows:</p><p>$\frac{d \bar{L}(a_1)}{d a_1} &#x3D; \frac{\log{2} (a_1 - p(x_1))}{a_1 (1 - a_1)}$</p><p>The constraints include:</p><ul><li>$p(x_1) \in (0, 1)$ is a constant</li><li>$0 &lt; a_1 &lt; 1$</li></ul><p>When $0 &lt; a_1 &lt; p(x_1)$, $\frac{d \bar{L}(a_1)}{d a_1} &lt; 0$, $\bar{L}(a_1)$ monotonically decreases, and when $p(x_1) &lt; a_1 &lt; 1$, $\frac{d \bar{L}(a_1)}{d a_1} &gt; 0$, $\bar{L}(a_1)$ monotonically increases. Therefore, when $a_1 &#x3D; p(x_1)$, $\bar{L}(a_1)$ obtains the minimum value.</p><p>As $a_1 &#x3D; 2^{- L(x_1)}, a_2 &#x3D; 2^{- L(x_2)}$, this means that, for:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + (1 - p(x_1)) L(x_2)$</p><p>Subject to:</p><ul><li>$p(x_1) \in (0, 1)$ is a constant</li><li>$L(x_i) &gt; 0, i \in {1, 2}$ are independent variables</li><li>$2^{- L(x_1)} + 2^{- L(x_2)} \le 1$</li></ul><p><strong>$\bar{L}$’s minima occurs when $L(x_1) &#x3D; -\log_2{p(x_1)}, L(x_2) &#x3D; -\log_2{p(x_2)}$, and the minima is $- p(x_1) \log_2{p(x_1)} - p(x_2) \log_2{p(x_2)}$</strong>.</p><hr><p>Going back to the multivariate optimization problem:</p><p>$\bar{L} &#x3D; p(x_1) L(x_1) + \dots + p(x_n) L(x_n)$</p><p>Subject to:</p><ul><li>$p(x_i) \in (0, 1), i \in {1, 2, \dots, n}$ are constants</li><li>$p(x_1) + p(x_2) + \dots + p(x_n) &#x3D; 1$</li><li>$L(x_i) &gt; 0, i \in {1, 2, \dots, n}$ are independent variables</li><li>$2^{- L(x_1)} + 2^{- L(x_2)} + \dots + 2^{- L(x_n)} \le 1$</li></ul><p><strong>$\bar{L}$’s minima occurs when $L(x_i) &#x3D; -\log_2{p(x_i)}, i \in {1, 2, \dots, n}$, and the minima is $- p(x_1) \log_2{p(x_1)} - \dots - p(x_n) \log_2{p(x_n)}$</strong>.</p><h2 id="Definition-of-Information-Entropy"><a href="#Definition-of-Information-Entropy" class="headerlink" title="Definition of Information Entropy"></a>Definition of Information Entropy</h2><p>If a language “language” $X$ has $n$ “words”, $x_1, x_2, \dots, x_n$, the probability of their occurrence is $p(x_1), p(x_2), \dots, p(x_n)$, then <strong>all “words” under a certain optimal encoding, the previously calculated minimum weighted average encoding length</strong>, $- p(x_1) \log_2{p(x_1)} - \dots - p (x_n) \log_2{p(x_n)}$, is called the <strong>information entropy</strong> of the “language”, denoted as $H(X)$.</p><p>The reason why it is called “information entropy” is mainly due to the following reasons:</p><ul><li>From von Neumann’s naming suggestion for Shannon: My greatest concern was what to call it. I thought of calling it ‘information,’ but the word was overly used, so I decided to call it ‘uncertainty.’ When I discussed it with John von Neumann, he had a better idea. Von Neumann told me, ‘You should call it entropy, for two reasons. <strong>In the first place your uncertainty function has been used in statistical mechanics under that name, so it already has a name. In the second place, and more important, no one really knows what entropy really is, so in a debate you will always have the advantage.</strong></li><li>In a sense, it does reflect the frequency distribution of the “words” of “language” $X$, just as entropy in thermodynamics reflects the distribution of microscopic particles. <strong>The lower $H(X)$ is, the more the case that only a few words are used frequently in $X$; the higher $H(X)$ is, the more the case that all words in $X$ are used frequency.</strong></li></ul><h2 id="Links-to-Explanations-of-Related-Concepts"><a href="#Links-to-Explanations-of-Related-Concepts" class="headerlink" title="Links to Explanations of Related Concepts"></a>Links to Explanations of Related Concepts</h2><ul><li><a href="https://colah.github.io/posts/2015-09-Visual-Information/#cross-entropy">Cross Entropy</a></li><li><a href="https://colah.github.io/posts/2015-09-Visual-Information/#entropy-and-multiple-variables">Joint Entropy</a></li><li><a href="https://colah.github.io/posts/2015-09-Visual-Information/#mutual-information">Mutual Information</a></li></ul><h2 id="How-These-Concept-are-Applied-in-Practice"><a href="#How-These-Concept-are-Applied-in-Practice" class="headerlink" title="How These Concept are Applied in Practice"></a>How These Concept are Applied in Practice</h2><p><a href="https://colah.github.io/posts/2015-09-Visual-Information/#conclusion">https://colah.github.io/posts/2015-09-Visual-Information/#conclusion</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://colah.github.io/posts/2015-09-Visual-Information/">https://colah.github.io/posts/2015-09-Visual-Information/</a></li><li><a href="https://mbernste.github.io/posts/sourcecoding/">https://mbernste.github.io/posts/sourcecoding/</a></li><li><a href="https://en.wikipedia.org/wiki/Kraft%E2%80%93McMillan_inequality">https://en.wikipedia.org/wiki/Kraft–McMillan_inequality</a></li><li><a href="https://mathoverflow.net/questions/403036/john-von-neumanns-remark-on-entropy">https://mathoverflow.net/questions/403036/john-von-neumanns-remark-on-entropy</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Asking and Answering Questions during a Programming Change Task</title>
    <link href="/2022/09/14/Paper-Reading-Asking-and-Answering-Questions-during-a-Programming-Change-Task/"/>
    <url>/2022/09/14/Paper-Reading-Asking-and-Answering-Questions-during-a-Programming-Change-Task/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/TSE.2008.26">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it" class="headerlink" title="What were the primary contributions of the paper as the author sees it?"></a>What were the primary contributions of the paper as the author sees it?</h1><ol><li>A catalog of 44 types of questions programmers ask during software evaluation tasks, organized into four categories based on the kind and scope of information needed to answer a question.</li></ol><ul><li>Finding a focus point</li><li>Expanding a focus point</li><li>Understanding a subgraph</li><li>Over groups of subgraphs</li></ul><ol start="2"><li>A description of the observed behavior around answering these questions.</li><li>A description of how existing deployed and proposed tools do, and do not, support answering programmers’ questions.</li></ol><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>The author interviewed participants in two studies.</p><ol><li>9 participants in academia worked on a code base that was new to them.</li><li>16 participants in industry worked on a code base for which they had responsibility.</li></ol><p>The two studies have allowed us to observe programmers in situations that vary along several dimensions:</p><ul><li>the programming tools</li><li>the type of change task</li><li>the system</li><li>paired versus individual programming</li><li>prior knowledge of the code base</li></ul><p>The differences have increased the authors’ ability to generate an extensive set of questions programmers ask.</p><p>They build rather than test theory and the specific result of this process is a theoretical understanding of the situation of interest grounded in the data collected.</p><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-does-the-work-apply-to-you" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?"></a>What were the main contributions of the paper as you (the reader) see it? How does the work apply to you?</h1><p>In my opinion, aside from the final results, three important considerations learned from this paper are:</p><ol><li>Interviewing participants in two very different groups.</li><li>Developing generic versions of the questions participants asked, which slightly abstract from the specifics of a particular situation and code base. </li><li>Compared the generic questions and categorized those questions into four categories based on the kind and scope of information needed to answer a question.</li></ol><p>This is an example of extracting generalized knowledge from specific case studies, which makes it a great example to study for conducting empirical studies.</p><h1 id="How-could-this-research-be-extended-How-could-this-research-be-applied-in-practice"><a href="#How-could-this-research-be-extended-How-could-this-research-be-applied-in-practice" class="headerlink" title="How could this research be extended? How could this research be applied in practice?"></a>How could this research be extended? How could this research be applied in practice?</h1><p>The research identified clear gaps of tool support in answering programmers’ questions. </p><ol><li>Support for more refined or precise questions.</li></ol><ul><li>Some questions can he seen as more refined versions of other questions.</li><li>A programmer’s questions also often have an explicit or implicit scope.</li><li>Due to limited tool support, programmers end up asking questions more globally than they intend, and, the result sets will include many irrelevant items.</li></ul><ol start="2"><li>Support for maintaining context.</li></ol><ul><li>A particular question is often part of a larger process involving multiple questions.</li><li>There are missed opportunities for tools to make use of the larger context to help programmers more efficiently scope their questions and to determine what is relevant to their higher level questions.</li></ul><ol start="3"><li>Support for piecing information together.</li></ol><ul><li>Many questions require considering multiple entities and relationships.</li><li>In these situations, the burden is on the programmer to assemble the information needed to answer their intended question.</li><li>Tool support is missing for bringing information together and building toward an answer.</li></ul><p>Improved tools and an assessment of these tools in answering these questions present directions for future research.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Qualitative Methods in Empirical Studies of Software Engineering</title>
    <link href="/2022/09/14/Paper-Reading-Qualitative-Methods-in-Empirical-Studies-of-Software-Engineering/"/>
    <url>/2022/09/14/Paper-Reading-Qualitative-Methods-in-Empirical-Studies-of-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/32.799955">here</a>.</p><h1 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-How-does-this-work-move-the-research-forward" class="headerlink" title="What were the primary contributions of the paper as the author sees it? How does this work move the research forward?"></a>What were the primary contributions of the paper as the author sees it? How does this work move the research forward?</h1><p>With empirical studies of software engineering beginning to address the human aspects of software development, the author presents and reviews a number of different methods for the collection and analysis of qualitative data, and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combines with quantitative methods.</p><ul><li>Collecting Qualitative Data<ul><li>Participant Observation</li><li>Interviewing</li></ul></li><li>Extracting Quantitative Values from Qualitative Data for Quantitative Analysis (Coding)</li><li>Analyzing Qualitative Data<ul><li>Theory Generation: extract from a set of field notes a statement or preposition that is supported in multiple ways by the data.</li><li>Theory Confirmation: confirming a preposition after it has been generated from the data.</li></ul></li></ul><h1 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-could-this-research-be-applied-in-practice"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-could-this-research-be-applied-in-practice" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How could this research be applied in practice?"></a>What were the main contributions of the paper as you (the reader) see it? How could this research be applied in practice?</h1><p>Aside from the primary contributions of the paper as the author sees it, in my opinion, another major contribution of the paper is identifying the four main categories of empirical studies, and explaining in detail how combinations of quantitative and qualitative methods can be designed for each category.</p><p>The four main categories of empirical studies:</p><ul><li>Blocked subject-project study:<ul><li>Several projects, several subjects.</li><li>Reduces bias, but increases the cost of the experiment.</li></ul></li><li>Replicated project study:<ul><li>One project, several subjects.</li><li>Isolates the effect of differences between subjects.</li></ul></li><li>Multiproject variation:<ul><li>Several projects, one subject.</li><li>Observes the performance of the subject on a project before some treatment is applied, and on a different project after that treatment is applied.</li></ul></li><li>Single project study:<ul><li>One project, one subject.</li><li>Similar to a case study.</li><li>Certain attributes are examined and possibly compared to some baseline.</li></ul></li></ul><p>How combinations of quantitative and qualitative methods can be designed for each category:</p><ul><li>Blocked subject-project study, Replicated project study:<ul><li>When testing hypotheses and finding casual relationships between variables, use qualitative data to illuminate the statistical results.</li></ul></li><li>Multiproject variation study:<ul><li>Qualitative analysis: revealing new issues and tracking changes relative to other issues.</li><li>Quantitative analysis: looking more closely at the issues suggested by the qualitative analysis.</li></ul></li><li>Single project study:<ul><li>First, data is collected qualitatively through interviews.</li><li>A taxonomy of the question under research is generated.</li><li>Part of the interview data is coded to yield quantitative variables.</li><li>Any relationships found between quantitative variables are checked against qualitative data.</li></ul></li></ul><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>Examples, interviews, quotes from experts, and paper citations are used to validate the points presented when reviewing a number of different methods for the collection and analysis of qualitative data, identifying the four main categories of empirical studies, and explaining in detail how combinations of quantitative and qualitative methods can be designed for each category.</p><h1 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h1><p>In the last paragraph, the author points out that “we must exploit to the fullest every opportunity we do have, by collecting and analyzing as much data of as many different types as possible”. Aside from the examples presented in the paper, what other types of data can be collected, and how they can be analyzed, is a future direction of research.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: No Silver Bullet Essence and Accidents of Software Engineering</title>
    <link href="/2022/09/12/Paper-Reading-No-Silver-Bullet-Essence-and-Accidents-of-Software-Engineering/"/>
    <url>/2022/09/12/Paper-Reading-No-Silver-Bullet-Essence-and-Accidents-of-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://doi.org/10.1109/MC.1987.1663532">here</a>.</p><h1 id="How-does-this-work-move-the-research-forward"><a href="#How-does-this-work-move-the-research-forward" class="headerlink" title="How does this work move the research forward?"></a>How does this work move the research forward?</h1><h2 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it" class="headerlink" title="What were the primary contributions of the paper as the author sees it?"></a>What were the primary contributions of the paper as the author sees it?</h2><p>The author concludes that there is no elixir or “silver bullet” to the problems software engineering is facing. Furthermore, the author also examines encouraging innovations, and shows that a disciplined, consistent effort to develop, propagate, and exploit them should alleviate the problem.</p><h2 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it?"></a>What were the main contributions of the paper as you (the reader) see it?</h2><p>In my opinion, what the paper is most remarkable at is shedding light upon the nature of the software problem and its implications.</p><ol><li>The essence of a software entity is a construct of interlocking concepts that cannot be accurately visualized. The complexity of software is an essential property, and it increases non-linearly with size. This has many implications.</li></ol><ul><li>Difficulty of design.</li><li>Hindrance of communication among team members, which leads to product flaws, cost overruns, schedule delays.</li><li>Hard to use programs.</li><li>Difficulty of extending to new functions without creating side effects.</li><li>Security trapdoors.</li><li>Personnel turnover incurs tremendous learning and understanding burden.</li></ul><ol start="2"><li>Software is constantly subject to pressure for change.</li></ol><p>The aforementioned points clarified by the paper illuminates research directions in software engineering aimed at ameliorating the software problem.</p><h2 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h2><p>In the last section of the paper, the author examines promising attacks on the essence of the software problem.</p><ul><li>Buying off-the-shelf software instead of building in-house software.</li><li>Rapid prototyping and iterative specification of requirements with client feedback.</li><li>Incremental development of software from a simple and incomplete, yet running, system.</li><li>Growing great designers who are the core of the development team.</li></ul><p>The effectiveness of these and other approaches in mitigating the software problem could be assessed in subsequent works.</p><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><ol><li>First, the author examines the nature of the software problem and its implications.</li><li>Further on, the author recalls the three steps in software technology that have been most fruitful in the past - high-level languages, time-sharing, and unified programming environments, concluding that they have their limits and the difficulties that they attacked are accidental, not essential.</li><li>The author continues to consider the technical developments that are most often advanced as potential silver bullets - high-level language advances, object-oriented programming, artificial intelligence, automatic programming, graphical programming, program verification, environments and tools, workstations - analyzing the problems they assess, their advantages, and their disadvantages.</li><li>Finally, the author presents promising attacks on the conceptual essence, explaining why they would be useful.</li></ol><h1 id="How-could-this-research-be-applied-in-practice"><a href="#How-could-this-research-be-applied-in-practice" class="headerlink" title="How could this research be applied in practice?"></a>How could this research be applied in practice?</h1><p>The lessons learned from this research are of great practical value.</p><ol><li>In shedding light upon the nature of the software problem and its implications, the author provides criteria for organizations to assess the effectiveness of their development practices.</li><li>In considering the technical developments that are most often advanced as potential silver bullets, the author examines their advantages, and their disadvantages, and provide insights into whether to, and how to adequately use them.</li><li>In presenting promising attacks on the conceptual essence, the author provides meaningful suggestions for organizations to improve their software development processes, and provides convincing rationale for doing so.</li></ol><p>As this is a classic paper, many promising attacks on the conceptual essence have already materialized and become mainstream.</p><ul><li>Rapid prototyping and incremental development have been manifested as “agile development” and have been widely adopted.</li><li>With the advent of the open-source revolution and code-hosting platforms such as GitHub, reusing off-the-shelf software instead of building in-house software has become ubiquitous.</li></ul><p>However, the call for organizations to “grow great designers who are the core of the development team” incurs significant requirements on corporate management competency, and sadly, hasn’t fully become reality.</p><h1 id="How-does-the-work-apply-to-you"><a href="#How-does-the-work-apply-to-you" class="headerlink" title="How does the work apply to you?"></a>How does the work apply to you?</h1><p>It sheds light upon the nature of the software problem and its implications, illuminates research directions in software engineering aimed at ameliorating the software problem, and provides a reference research methodology for problems within software engineering.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Software&#39;s Chronic Crisis</title>
    <link href="/2022/09/12/Paper-Reading-Software-s-Chronic-Crisis/"/>
    <url>/2022/09/12/Paper-Reading-Software-s-Chronic-Crisis/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://github.com/ubccpsc/507/tree/2022sept">Advanced Software Engineering</a>. The original paper can be found <a href="https://www.cse.psu.edu/~gxt29/bug/localCopies/SoftwareCrisis.html">here</a>.</p><h1 id="How-does-this-work-move-the-research-forward"><a href="#How-does-this-work-move-the-research-forward" class="headerlink" title="How does this work move the research forward?"></a>How does this work move the research forward?</h1><h2 id="What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it"><a href="#What-were-the-primary-contributions-of-the-paper-as-the-author-sees-it" class="headerlink" title="What were the primary contributions of the paper as the author sees it?"></a>What were the primary contributions of the paper as the author sees it?</h2><p>The author identifies software’s chronic crisis and how it is exacerbated by current trends in software engineering.</p><p>The vast majority of code is handcrafted by artisans using techniques they neither measure nor are able to repeat consistently. The software industry remains short of the mature engineering discipline needed to meet the demands of an information-age society, including getting software right the first time in embedded environments, distributed systems and systems integration, rapid increasing system sizes, and systems becoming so complex that no manager can comprehend the entirety.</p><p>Later, the author analyzes proposed remedies to the aforementioned problems and points out directions for future work.</p><p>Remedies:</p><ul><li>Capability Maturity Model, which quantifies a developer’s software engineering and management excellence.</li><li>Consistent and quantitative measurement of development.</li><li>Strategies to avoid bugs or attack them early.<ul><li>Recognizing changing requirements</li><li>Growing software from rapid prototypes and customer feedback</li><li>Formal verification when necessary</li><li>Clean-room process</li><li>Cautious approach to technological innovations such as object-oriented analysis and programming</li></ul></li></ul><p>Directions for Future Work:</p><ul><li>An experimental branch of computer science to separate the general results from the accidental</li><li>Standard unit of measurement of developer productivity</li><li>Codified proven solutions for novices</li><li>Academic-industrial collaboration to gather data and try things</li><li>Generalized, reusable software components</li><li>Certifying software engineers</li><li>Outsourcing</li><li>More software development-oriented computer science curricula</li></ul><h2 id="What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-could-this-research-be-applied-in-practice"><a href="#What-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-How-could-this-research-be-applied-in-practice" class="headerlink" title="What were the main contributions of the paper as you (the reader) see it? How could this research be applied in practice?"></a>What were the main contributions of the paper as you (the reader) see it? How could this research be applied in practice?</h2><p><strong>Aside for the primary contributions of the paper as the author sees it</strong>, in my opinion, a major contribution of the paper in a practical sense are revelations for improving <strong>the culture within software developing organizations</strong>. For example,</p><ul><li>Focus on interchangeability.</li><li>Follow best practices.</li><li>Fix not just the bug but also the flaw in the testing process that allowed it to slip through.</li><li>Value verification in addition to innovation.</li><li>Pay attention to the difference in competence between employees.</li></ul><p>Furthermore, as a historical paper, many of its proposals have already materialized. For example, the open-source revolution and collaboration platforms such as GitHub have greatly facilitated gathering data and trying things for research, and has provided a wealth of generalized, reusable software components.</p><h2 id="How-could-this-research-be-extended"><a href="#How-could-this-research-be-extended" class="headerlink" title="How could this research be extended?"></a>How could this research be extended?</h2><p>Implementing and assessing the proposed directions for future work represents a natural extension of this research.</p><h1 id="How-was-the-work-validated"><a href="#How-was-the-work-validated" class="headerlink" title="How was the work validated?"></a>How was the work validated?</h1><p>The authors validate their arguments on software’s chronic crisis and base their proposals for remedies and future work by analyzing real cases in software engineering, as well as compiling the opinions of experts in the field, including university professors and corporate managers.</p><h1 id="How-does-the-work-apply-to-you"><a href="#How-does-the-work-apply-to-you" class="headerlink" title="How does the work apply to you?"></a>How does the work apply to you?</h1><ol><li>From a theoretical perspective, as a milestone paper in the domain of software engineering, this paper provides a model research methodology for practical problems within software engineering - analyzing real cases and compiling the opinions of experts.</li><li>From a practical perspective, this paper identifies core values and skills that us, as practitioners of software engineering, should firmly grasp.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: An empirical study of the reliability of UNIX utilities</title>
    <link href="/2022/09/10/Paper-Reading-An-empirical-study-of-the-reliability-of-UNIX-utilities/"/>
    <url>/2022/09/10/Paper-Reading-An-empirical-study-of-the-reliability-of-UNIX-utilities/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <a href="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</a>. The original paper can be found <a href="https://doi.org/10.1145/96267.96279">here</a>.</p><p>“An empirical study of the reliability of UNIX utilities” is the work that spawned research into the domain of software fuzzing. It proposes a technique later known as <strong>random fuzzing</strong>, testing the reliability of UNIX utilities by feeding them a stream of randomly generated characters and checking whether the program crashed with a core dump or hangs.</p><p>Although the technique is simple and is not a substitute for formal verification or testing, it is <strong>inexpensive and easy to apply</strong>. Its <strong>effectiveness in identifying bugs and increasing overall system reliability</strong> has been proven in many ways.</p><ol><li>It crashed 25-33% of the utility programs considered to be “reliable” on each platform.</li><li><strong>It was able to find recurring security bugs resulting from bad programming practices that even the best static analysis tools have limited success in detecting</strong>, including:</li></ol><ul><li>Accessing outside the bounds of a buffer</li><li>Dereferencing a null pointer</li><li>Unintentionally overwriting data or code</li><li>Ignoring return codes, especially error-indicating return codes</li><li>Faulty communication with subprocesses</li><li>Unintended interaction between modules</li><li>Improper error handling</li><li>Signed characters</li><li>Race conditions during signal handling</li></ul><ol start="3"><li><strong>Its relevance has remained strong over the years.</strong> Subsequent studies using the same technique showed that similar problems also existed within other operating systems, such as Microsoft Windows. Even after thirty years, the utility programs in the modern Unix distributions of Linux, macOS, and FreeBSD are still crashing at a noticeable rate and not getting better, as evidenced in “The Relevance of Classic Fuzz Testing: Have We Solved This One?”</li></ol><p>The contributions of this work is <strong>multi-fold</strong>.</p><ol><li>As mentioned before, it proposed random fuzzing, an inexpensive, easy to apply, and time-proven way of finding security bugs which is complimentary with formal verification and testing.</li><li>It spawned research into the domain of software fuzzing. New fuzz tools usually take a gray- or white-box approach, diving deeper into a program’s control flow, and they have been applied to many new contexts. However, they often require more advanced specification of the input and&#x2F;or long execution times to explore the input and program control-flow space.</li><li>It provides revelations for software engineering: good design, good education, ongoing training, testing integrated into the development cycle, and most importantly, a culture that promotes and rewards reliability.</li></ol><p>Some personal thoughts after reading the paper.</p><ol><li><strong>Given the source code of a program and an input, what is the mechanism through which the researchers determine the position where the program crashes and hangs when given the input?</strong> This is mentioned in neither “An empirical study of the reliability of UNIX utilities” nor its sequel “The Relevance of Classic Fuzz Testing: Have We Solved This One?”, but is of great practical value.</li><li><strong>There is a surprising number of security bugs stemming from language defects such as not checking array bounds and dereferencing null pointers, as well as ad-hoc, hacky solutions to recurring problems such as lexical analysis, syntax analysis, structured error handling, as well as graph algorithms including cycle detection, topological sort, etc.</strong> Personally, this is not my style of coding. I make extensive a lot of “safe” language constructs such as null coalescing, heavily exploit performant and well-tested algorithms within standard libraries and widely-adapted third-party libraries (such as boost in C++ and networkx in Python), and use theoretically sound tools (such as automatically generated LALR parsers for syntax analysis) in software projects. <strong>The efficiency, effectiveness, and practical value of these and other solutions, as well as how they can be improved, is an interesting question that comes to my mind after reading this paper.</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
